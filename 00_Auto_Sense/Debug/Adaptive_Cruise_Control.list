
Adaptive_Cruise_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022d8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08002470  08002470  00012470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a0c  08002a0c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a0c  08002a0c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a0c  08002a0c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000006c  08002a80  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002a80  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003cd2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d08  00000000  00000000  00023db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000380  00000000  00000000  00024ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000285  00000000  00000000  00024e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024f5  00000000  00000000  000250c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004ca1  00000000  00000000  000275ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a9e1  00000000  00000000  0002c25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ebc  00000000  00000000  00036c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00037af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002458 	.word	0x08002458

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	08002458 	.word	0x08002458

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <ACC_vSysInit>:
 * @brief
 *
 */

void ACC_vSysInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	/* configure clock to all of the system  */

	MRCC_Init(); /* enable rcc of mc  */
 80009b8:	f000 ffc8 	bl	800194c <MRCC_Init>
	MRCC_enablePeripheral(MRCC_AHP1_BUS, MRCC_GPIOA_PERIPHERAL);    /* enable clock to PORTA  */
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 ffea 	bl	8001998 <MRCC_enablePeripheral>
	MRCC_enablePeripheral(MRCC_APB1_BUS, MRCC_TIM2_PERIPHERAL);     /* enable clock to TIMER2 */
 80009c4:	2100      	movs	r1, #0
 80009c6:	2002      	movs	r0, #2
 80009c8:	f000 ffe6 	bl	8001998 <MRCC_enablePeripheral>

	MRCC_enablePeripheral(MRCC_AHP1_BUS, MRCC_GPIOB_PERIPHERAL);    /* enable clock to PORTB  */
 80009cc:	2101      	movs	r1, #1
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 ffe2 	bl	8001998 <MRCC_enablePeripheral>
	MRCC_enablePeripheral(MRCC_APB2_BUS, MRCC_USART1_PERIPHERAL);   /* enable clock to USART1 */
 80009d4:	2104      	movs	r1, #4
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 ffde 	bl	8001998 <MRCC_enablePeripheral>

	/* Configure HC05 gpio pins */

	MGPIO_setPinMode(MGPIO_PORTB, MGPIO_PIN6 , MGPIO_MODE_ALTF); /* set pin b6 to alternate  */
 80009dc:	2202      	movs	r2, #2
 80009de:	2106      	movs	r1, #6
 80009e0:	2001      	movs	r0, #1
 80009e2:	f000 fc7f 	bl	80012e4 <MGPIO_setPinMode>
	MGPIO_setOutputMode  ( MGPIO_PORTB ,  MGPIO_PIN6, MGPIO_OUTPUT_RESISTOR_PUSH_PULL); /* set pin b6 to be push pull */
 80009e6:	2200      	movs	r2, #0
 80009e8:	2106      	movs	r1, #6
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 fd12 	bl	8001414 <MGPIO_setOutputMode>
	MGPIO_setOutputSpeed ( MGPIO_PORTB ,  MGPIO_PIN6 ,  MGPIO_OUTPUT_SPEED_MEDIUM ); /* set pin b6 speed to medium */
 80009f0:	2201      	movs	r2, #1
 80009f2:	2106      	movs	r1, #6
 80009f4:	2001      	movs	r0, #1
 80009f6:	f000 fd9b 	bl	8001530 <MGPIO_setOutputSpeed>
	MGPIO_SetAltFun(MGPIO_PORTB, MGPIO_PIN6, MGPIO_ALTFN_7); /* set pin b6 alt 7 */
 80009fa:	2207      	movs	r2, #7
 80009fc:	2106      	movs	r1, #6
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 ff2c 	bl	800185c <MGPIO_SetAltFun>


	MGPIO_setPinMode(MGPIO_PORTB, MGPIO_PIN7 , MGPIO_MODE_ALTF); /* set pin b7 to alternate  */
 8000a04:	2202      	movs	r2, #2
 8000a06:	2107      	movs	r1, #7
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f000 fc6b 	bl	80012e4 <MGPIO_setPinMode>
	MGPIO_setOutputMode  ( MGPIO_PORTB ,  MGPIO_PIN7 , MGPIO_OUTPUT_RESISTOR_PUSH_PULL); /* set pin b7 to be push pull */
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2107      	movs	r1, #7
 8000a12:	2001      	movs	r0, #1
 8000a14:	f000 fcfe 	bl	8001414 <MGPIO_setOutputMode>
	MGPIO_setOutputSpeed ( MGPIO_PORTB ,  MGPIO_PIN7 ,  MGPIO_OUTPUT_SPEED_MEDIUM ); /* set pin b7 speed to medium */
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 fd87 	bl	8001530 <MGPIO_setOutputSpeed>
	MGPIO_SetAltFun(MGPIO_PORTB, MGPIO_PIN7, MGPIO_ALTFN_7); /* set pin b7 alt 7 */
 8000a22:	2207      	movs	r2, #7
 8000a24:	2107      	movs	r1, #7
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 ff18 	bl	800185c <MGPIO_SetAltFun>

	/* init interface module application */

	AUDI_vInitInterface(MUART1_PERIPHERAL , &uart); /* init the communication between car and driver*/
 8000a2c:	4905      	ldr	r1, [pc, #20]	; (8000a44 <ACC_vSysInit+0x90>)
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <ACC_vSysInit+0x94>)
 8000a30:	f000 fa48 	bl	8000ec4 <AUDI_vInitInterface>

	/* init dc motors of the car */

	HDCM_init(&wheelControl); /* init the 4 wheel of car to be ready to use */
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <ACC_vSysInit+0x98>)
 8000a36:	f000 fab7 	bl	8000fa8 <HDCM_init>

	ultra_init(); /* init ultr */
 8000a3a:	f000 fc45 	bl	80012c8 <ultra_init>





}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	20000000 	.word	0x20000000

08000a50 <ACC_vSysMangment>:
 * @brief
 *
 */

void ACC_vSysMangment(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	; 0x70
 8000a54:	af00      	add	r7, sp, #0
	EN_ACC_carStates_t lo_uddtCarCondation = ACC_CAR_STANDBY;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	while(1)
	{
		switch(lo_uddtCarCondation)
 8000a5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a60:	2b07      	cmp	r3, #7
 8000a62:	d8fb      	bhi.n	8000a5c <ACC_vSysMangment+0xc>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <ACC_vSysMangment+0x1c>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a8d 	.word	0x08000a8d
 8000a70:	08000ab1 	.word	0x08000ab1
 8000a74:	08000b15 	.word	0x08000b15
 8000a78:	08000a5d 	.word	0x08000a5d
 8000a7c:	08000b03 	.word	0x08000b03
 8000a80:	08000b7b 	.word	0x08000b7b
 8000a84:	08000b91 	.word	0x08000b91
 8000a88:	08000ad5 	.word	0x08000ad5
		{
			case ACC_CAR_STANDBY :
			{
				uint8_t lo_u8TakeAction;
				AUDI_vStandByDashboard(MUART1_PERIPHERAL); /* Show simple dashboard for car statues on uart */
 8000a8c:	4845      	ldr	r0, [pc, #276]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000a8e:	f000 fa29 	bl	8000ee4 <AUDI_vStandByDashboard>
				HHC05_uddtReadDataRegister(MUART1_PERIPHERAL , &lo_u8TakeAction); /* take user action to interface with it */
 8000a92:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 8000a96:	4619      	mov	r1, r3
 8000a98:	4842      	ldr	r0, [pc, #264]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000a9a:	f000 fbe5 	bl	8001268 <HHC05_uddtReadDataRegister>
				lo_uddtCarCondation = ACC_uddtDetermineCarState(lo_u8TakeAction); /* send the action to method that determine
 8000a9e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f88c 	bl	8000bc0 <ACC_uddtDetermineCarState>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
																					the logic that will be taken by the car */
				break;
 8000aae:	e078      	b.n	8000ba2 <ACC_vSysMangment+0x152>
			}
			case ACC_CAR_ON :
			{
				uint8_t lo_u8TakeUserChoice;
				AUDI_vOnDashboard(MUART1_PERIPHERAL); /* Show simple dashboard for car options on uart */
 8000ab0:	483c      	ldr	r0, [pc, #240]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000ab2:	f000 fa53 	bl	8000f5c <AUDI_vOnDashboard>
				HHC05_uddtReadDataRegister(MUART1_PERIPHERAL , &lo_u8TakeUserChoice); /* take user choice to take action with it */
 8000ab6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000aba:	4619      	mov	r1, r3
 8000abc:	4839      	ldr	r0, [pc, #228]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000abe:	f000 fbd3 	bl	8001268 <HHC05_uddtReadDataRegister>
				lo_uddtCarCondation = ACC_uddtDetermineCarState(lo_u8TakeUserChoice); /* send the action to method that determine
 8000ac2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f87a 	bl	8000bc0 <ACC_uddtDetermineCarState>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
																									the logic that will be taken by the car */
				break;
 8000ad2:	e066      	b.n	8000ba2 <ACC_vSysMangment+0x152>
			}
			case ACC_CAR_RECVINIG :
			{
				uint8_t lo_u8TakeUserChoice;
				HHC05_uddtReceiveByteSynchNonBlocking(MUART1_PERIPHERAL ,&lo_u8TakeUserChoice); /* wait for driver input for some time and then
 8000ad4:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4832      	ldr	r0, [pc, #200]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000adc:	f000 fbd4 	bl	8001288 <HHC05_uddtReceiveByteSynchNonBlocking>
								 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	   system will skip this line and return for it again
								 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	   in the next run from the first line*/

				if(lo_u8TakeUserChoice == 255) lo_uddtCarCondation = ACC_CAR_RECVINIG; /* if the return of uart input is 255 this mean that
 8000ae0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000ae4:	2bff      	cmp	r3, #255	; 0xff
 8000ae6:	d103      	bne.n	8000af0 <ACC_vSysMangment+0xa0>
 8000ae8:	2307      	movs	r3, #7
 8000aea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
																					        the driver does not enter any thing */
				else lo_uddtCarCondation = ACC_uddtDetermineCarState(lo_u8TakeUserChoice); /* send the action to method that determine
																							  the logic that will be taken by the car */
				break;
 8000aee:	e058      	b.n	8000ba2 <ACC_vSysMangment+0x152>
				else lo_uddtCarCondation = ACC_uddtDetermineCarState(lo_u8TakeUserChoice); /* send the action to method that determine
 8000af0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f863 	bl	8000bc0 <ACC_uddtDetermineCarState>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
 8000b00:	e04f      	b.n	8000ba2 <ACC_vSysMangment+0x152>
			}
			case ACC_CAR_GET_FAULT :
			{
				lo_uddtCarCondation = ACC_uddtFaultDetection(gl_uddtFaultCode); /* pass the fault code for this method
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <ACC_vSysMangment+0x158>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f942 	bl	8000d90 <ACC_uddtFaultDetection>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
																				 to detect what is the problem */
				break;
 8000b12:	e046      	b.n	8000ba2 <ACC_vSysMangment+0x152>
			}
			case ACC_CAR_NCC_ACTIVE :
			{
				uint8_t lo_u8StrDriverSpeed[100];
				uint8_t lo_u8IntSpeed;
				HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Set Ncc Speed \r\n");
 8000b14:	4925      	ldr	r1, [pc, #148]	; (8000bac <ACC_vSysMangment+0x15c>)
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000b18:	f000 fb96 	bl	8001248 <HHC05_uddtTransmitString>
				HHC05_uddtReceiveStringAsynchBlocking(MUART1_PERIPHERAL , lo_u8StrDriverSpeed); /* take the speed from driver */
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4820      	ldr	r0, [pc, #128]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000b22:	f000 fbc1 	bl	80012a8 <HHC05_uddtReceiveStringAsynchBlocking>
				lo_u8IntSpeed = atoi((char *)lo_u8StrDriverSpeed); /* Convert the speed from str to int atoi is a built in function */
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fbc4 	bl	80022b6 <atoi>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				memset(lo_u8StrDriverSpeed, '\0', sizeof(lo_u8StrDriverSpeed)); /* clear all of the array to avoid any data corruption */
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2264      	movs	r2, #100	; 0x64
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fc4c 	bl	80023d8 <memset>
				if((lo_u8IntSpeed >= 1) && (lo_u8IntSpeed <= 100)) /* Check that the speed in valid range */
 8000b40:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d011      	beq.n	8000b6c <ACC_vSysMangment+0x11c>
 8000b48:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000b4c:	2b64      	cmp	r3, #100	; 0x64
 8000b4e:	d80d      	bhi.n	8000b6c <ACC_vSysMangment+0x11c>
				{
					ANCC_vSetNccSpeed(&wheelControl , lo_u8IntSpeed); /* pass the motors and selected speed to NCC module to move them*/
 8000b50:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000b54:	4619      	mov	r1, r3
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <ACC_vSysMangment+0x160>)
 8000b58:	f000 f98c 	bl	8000e74 <ANCC_vSetNccSpeed>
					HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"To Stop Ncc In Any Time Press k \r\n");
 8000b5c:	4915      	ldr	r1, [pc, #84]	; (8000bb4 <ACC_vSysMangment+0x164>)
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000b60:	f000 fb72 	bl	8001248 <HHC05_uddtTransmitString>
					lo_uddtCarCondation = ACC_CAR_RECVINIG;
 8000b64:	2307      	movs	r3, #7
 8000b66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				else
				{
					gl_uddtFaultCode = ACC_NCC_SPEED_RANGE_INVALID; /* assign the fault code in a global var to notify driver */
					lo_uddtCarCondation = ACC_CAR_GET_FAULT; /* change state to fault state to report error */
				}
				break;
 8000b6a:	e01a      	b.n	8000ba2 <ACC_vSysMangment+0x152>
					gl_uddtFaultCode = ACC_NCC_SPEED_RANGE_INVALID; /* assign the fault code in a global var to notify driver */
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <ACC_vSysMangment+0x158>)
 8000b6e:	2207      	movs	r2, #7
 8000b70:	701a      	strb	r2, [r3, #0]
					lo_uddtCarCondation = ACC_CAR_GET_FAULT; /* change state to fault state to report error */
 8000b72:	2304      	movs	r3, #4
 8000b74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
 8000b78:	e013      	b.n	8000ba2 <ACC_vSysMangment+0x152>
			}
			case ACC_CAR_NCC_OFF :
			{
				ANCC_vStopNcc(&wheelControl);
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <ACC_vSysMangment+0x160>)
 8000b7c:	f000 f994 	bl	8000ea8 <ANCC_vStopNcc>
				HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Ncc Is Stopped \r\n");
 8000b80:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <ACC_vSysMangment+0x168>)
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000b84:	f000 fb60 	bl	8001248 <HHC05_uddtTransmitString>
				lo_uddtCarCondation = ACC_CAR_ON;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
 8000b8e:	e008      	b.n	8000ba2 <ACC_vSysMangment+0x152>
			}
			case ACC_CAR_ACC_OFF :
			{
				HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Acc Is Stopped \r\n");
 8000b90:	490a      	ldr	r1, [pc, #40]	; (8000bbc <ACC_vSysMangment+0x16c>)
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <ACC_vSysMangment+0x154>)
 8000b94:	f000 fb58 	bl	8001248 <HHC05_uddtTransmitString>
				lo_uddtCarCondation = ACC_CAR_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
 8000b9e:	bf00      	nop
 8000ba0:	e75c      	b.n	8000a5c <ACC_vSysMangment+0xc>
		switch(lo_uddtCarCondation)
 8000ba2:	e75b      	b.n	8000a5c <ACC_vSysMangment+0xc>
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	20000088 	.word	0x20000088
 8000bac:	08002470 	.word	0x08002470
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	08002484 	.word	0x08002484
 8000bb8:	080024a8 	.word	0x080024a8
 8000bbc:	080024bc 	.word	0x080024bc

08000bc0 <ACC_uddtDetermineCarState>:
	}
}


EN_ACC_carStates_t ACC_uddtDetermineCarState(uint8_t copy_u8Action)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	EN_ACC_carStates_t ret;

	switch(copy_u8Action)
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	3b61      	subs	r3, #97	; 0x61
 8000bce:	2b12      	cmp	r3, #18
 8000bd0:	f200 80c1 	bhi.w	8000d56 <ACC_uddtDetermineCarState+0x196>
 8000bd4:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <ACC_uddtDetermineCarState+0x1c>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000c8f 	.word	0x08000c8f
 8000be0:	08000d57 	.word	0x08000d57
 8000be4:	08000d57 	.word	0x08000d57
 8000be8:	08000d57 	.word	0x08000d57
 8000bec:	08000d57 	.word	0x08000d57
 8000bf0:	08000d57 	.word	0x08000d57
 8000bf4:	08000d57 	.word	0x08000d57
 8000bf8:	08000d57 	.word	0x08000d57
 8000bfc:	08000d57 	.word	0x08000d57
 8000c00:	08000d57 	.word	0x08000d57
 8000c04:	08000d1b 	.word	0x08000d1b
 8000c08:	08000d57 	.word	0x08000d57
 8000c0c:	08000d57 	.word	0x08000d57
 8000c10:	08000c53 	.word	0x08000c53
 8000c14:	08000c29 	.word	0x08000c29
 8000c18:	08000d57 	.word	0x08000d57
 8000c1c:	08000d57 	.word	0x08000d57
 8000c20:	08000d57 	.word	0x08000d57
 8000c24:	08000ccb 	.word	0x08000ccb
	{
		case 'o' :
		{
			if(lo_u8CarIsOnFlag == 0)
 8000c28:	4b55      	ldr	r3, [pc, #340]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d105      	bne.n	8000c3c <ACC_uddtDetermineCarState+0x7c>
			{
				lo_u8CarIsOnFlag = 1;
 8000c30:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
				ret = ACC_CAR_ON;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
			{
				gl_uddtFaultCode = ACC_CAR_IS_ALREADY_ON;
				ret = ACC_CAR_GET_FAULT;
			}
			else {/* DO Nothing */};
			break;
 8000c3a:	e092      	b.n	8000d62 <ACC_uddtDetermineCarState+0x1a2>
			else if(lo_u8CarIsOnFlag == 1)
 8000c3c:	4b50      	ldr	r3, [pc, #320]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	f040 808e 	bne.w	8000d62 <ACC_uddtDetermineCarState+0x1a2>
				gl_uddtFaultCode = ACC_CAR_IS_ALREADY_ON;
 8000c46:	4b4f      	ldr	r3, [pc, #316]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
				ret = ACC_CAR_GET_FAULT;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	73fb      	strb	r3, [r7, #15]
			break;
 8000c50:	e087      	b.n	8000d62 <ACC_uddtDetermineCarState+0x1a2>
		}
		case 'n' :
		{
			if(lo_u8NccIsOnFlag == 0)
 8000c52:	4b4d      	ldr	r3, [pc, #308]	; (8000d88 <ACC_uddtDetermineCarState+0x1c8>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10f      	bne.n	8000c7a <ACC_uddtDetermineCarState+0xba>
			{
				if(lo_u8CarIsOnFlag == 1)
 8000c5a:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d105      	bne.n	8000c6e <ACC_uddtDetermineCarState+0xae>
				{
					lo_u8NccIsOnFlag = 1;
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <ACC_uddtDetermineCarState+0x1c8>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
					ret = ACC_CAR_NCC_ACTIVE;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	73fb      	strb	r3, [r7, #15]
			{
				gl_uddtFaultCode = ACC_NCC_IS_ALREADY_ACTIVE;
				ret = ACC_CAR_GET_FAULT;
			}
			else {/* DO Nothing */};
			break;
 8000c6c:	e07b      	b.n	8000d66 <ACC_uddtDetermineCarState+0x1a6>
					gl_uddtFaultCode = ACC_CAR_IS_ALREADY_OFF;
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	701a      	strb	r2, [r3, #0]
					ret = ACC_CAR_GET_FAULT;
 8000c74:	2304      	movs	r3, #4
 8000c76:	73fb      	strb	r3, [r7, #15]
					break;
 8000c78:	e07c      	b.n	8000d74 <ACC_uddtDetermineCarState+0x1b4>
			else if(lo_u8NccIsOnFlag == 1)
 8000c7a:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <ACC_uddtDetermineCarState+0x1c8>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d171      	bne.n	8000d66 <ACC_uddtDetermineCarState+0x1a6>
				gl_uddtFaultCode = ACC_NCC_IS_ALREADY_ACTIVE;
 8000c82:	4b40      	ldr	r3, [pc, #256]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000c84:	2202      	movs	r2, #2
 8000c86:	701a      	strb	r2, [r3, #0]
				ret = ACC_CAR_GET_FAULT;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	73fb      	strb	r3, [r7, #15]
			break;
 8000c8c:	e06b      	b.n	8000d66 <ACC_uddtDetermineCarState+0x1a6>
		}
		case 'a' :
		{
			if(lo_u8AccIsOnFlag == 0)
 8000c8e:	4b3f      	ldr	r3, [pc, #252]	; (8000d8c <ACC_uddtDetermineCarState+0x1cc>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10f      	bne.n	8000cb6 <ACC_uddtDetermineCarState+0xf6>
			{
				if(lo_u8CarIsOnFlag == 1)
 8000c96:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d105      	bne.n	8000caa <ACC_uddtDetermineCarState+0xea>
				{
					lo_u8AccIsOnFlag = 1;
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <ACC_uddtDetermineCarState+0x1cc>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
					ret = ACC_CAR_ACC_ACTIVE;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	73fb      	strb	r3, [r7, #15]
			{
				gl_uddtFaultCode = ACC_ACC_IS_ALREADY_ACTIVE;
				ret = ACC_CAR_GET_FAULT;
			}
			else {/* DO Nothing */};
			break;
 8000ca8:	e05f      	b.n	8000d6a <ACC_uddtDetermineCarState+0x1aa>
					gl_uddtFaultCode = ACC_CAR_IS_ALREADY_OFF;
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000cac:	2204      	movs	r2, #4
 8000cae:	701a      	strb	r2, [r3, #0]
					ret = ACC_CAR_GET_FAULT;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	73fb      	strb	r3, [r7, #15]
					break;
 8000cb4:	e05e      	b.n	8000d74 <ACC_uddtDetermineCarState+0x1b4>
			else if(lo_u8AccIsOnFlag == 1)
 8000cb6:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <ACC_uddtDetermineCarState+0x1cc>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d155      	bne.n	8000d6a <ACC_uddtDetermineCarState+0x1aa>
				gl_uddtFaultCode = ACC_ACC_IS_ALREADY_ACTIVE;
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	701a      	strb	r2, [r3, #0]
				ret = ACC_CAR_GET_FAULT;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	73fb      	strb	r3, [r7, #15]
			break;
 8000cc8:	e04f      	b.n	8000d6a <ACC_uddtDetermineCarState+0x1aa>
		}
		case 's' :
		{
			if(lo_u8CarIsOnFlag == 1)
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d119      	bne.n	8000d06 <ACC_uddtDetermineCarState+0x146>
			{
				if(lo_u8NccIsOnFlag == 0)
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <ACC_uddtDetermineCarState+0x1c8>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10f      	bne.n	8000cfa <ACC_uddtDetermineCarState+0x13a>
				{
					if(lo_u8AccIsOnFlag == 0)
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <ACC_uddtDetermineCarState+0x1cc>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <ACC_uddtDetermineCarState+0x12e>
					{
						lo_u8CarIsOnFlag = 0;
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
						ret = ACC_CAR_STANDBY;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
			{
				gl_uddtFaultCode = ACC_CAR_IS_ALREADY_OFF;
				ret = ACC_CAR_GET_FAULT;
			}
			else {/* DO Nothing */};
			break;
 8000cec:	e03f      	b.n	8000d6e <ACC_uddtDetermineCarState+0x1ae>
						gl_uddtFaultCode = ACC_ACC_IS_ALREADY_ACTIVE;
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	701a      	strb	r2, [r3, #0]
						ret = ACC_CAR_GET_FAULT;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	73fb      	strb	r3, [r7, #15]
			break;
 8000cf8:	e039      	b.n	8000d6e <ACC_uddtDetermineCarState+0x1ae>
					gl_uddtFaultCode = ACC_NCC_IS_ALREADY_ACTIVE;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	701a      	strb	r2, [r3, #0]
					ret = ACC_CAR_GET_FAULT;
 8000d00:	2304      	movs	r3, #4
 8000d02:	73fb      	strb	r3, [r7, #15]
			break;
 8000d04:	e033      	b.n	8000d6e <ACC_uddtDetermineCarState+0x1ae>
			else if(lo_u8CarIsOnFlag == 0)
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d12f      	bne.n	8000d6e <ACC_uddtDetermineCarState+0x1ae>
				gl_uddtFaultCode = ACC_CAR_IS_ALREADY_OFF;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	701a      	strb	r2, [r3, #0]
				ret = ACC_CAR_GET_FAULT;
 8000d14:	2304      	movs	r3, #4
 8000d16:	73fb      	strb	r3, [r7, #15]
			break;
 8000d18:	e029      	b.n	8000d6e <ACC_uddtDetermineCarState+0x1ae>
		}
		case 'k' :
		{
			if((lo_u8CarIsOnFlag == 1))
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d10f      	bne.n	8000d42 <ACC_uddtDetermineCarState+0x182>
			{
				if(lo_u8NccIsOnFlag == 1)
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <ACC_uddtDetermineCarState+0x1c8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d105      	bne.n	8000d36 <ACC_uddtDetermineCarState+0x176>
				{
					lo_u8NccIsOnFlag = 0;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <ACC_uddtDetermineCarState+0x1c8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
					ret = ACC_CAR_NCC_OFF;
 8000d30:	2305      	movs	r3, #5
 8000d32:	73fb      	strb	r3, [r7, #15]
			{
				gl_uddtFaultCode = ACC_CAR_IS_ALREADY_OFF;
				ret = ACC_CAR_GET_FAULT;
			}
			else {/* DO Nothing */};
			break;
 8000d34:	e01d      	b.n	8000d72 <ACC_uddtDetermineCarState+0x1b2>
					gl_uddtFaultCode = ACC_NCC_IS_ALREADY_OFF;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000d38:	2206      	movs	r2, #6
 8000d3a:	701a      	strb	r2, [r3, #0]
					ret = ACC_CAR_GET_FAULT;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	73fb      	strb	r3, [r7, #15]
			break;
 8000d40:	e017      	b.n	8000d72 <ACC_uddtDetermineCarState+0x1b2>
			else if(lo_u8CarIsOnFlag == 0)
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <ACC_uddtDetermineCarState+0x1c0>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d113      	bne.n	8000d72 <ACC_uddtDetermineCarState+0x1b2>
				gl_uddtFaultCode = ACC_CAR_IS_ALREADY_OFF;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <ACC_uddtDetermineCarState+0x1c4>)
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	701a      	strb	r2, [r3, #0]
				ret = ACC_CAR_GET_FAULT;
 8000d50:	2304      	movs	r3, #4
 8000d52:	73fb      	strb	r3, [r7, #15]
			break;
 8000d54:	e00d      	b.n	8000d72 <ACC_uddtDetermineCarState+0x1b2>
		}
		default :
		{
			ret = ACC_uddtFaultDetection('#');
 8000d56:	2023      	movs	r0, #35	; 0x23
 8000d58:	f000 f81a 	bl	8000d90 <ACC_uddtFaultDetection>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e008      	b.n	8000d74 <ACC_uddtDetermineCarState+0x1b4>
			break;
 8000d62:	bf00      	nop
 8000d64:	e006      	b.n	8000d74 <ACC_uddtDetermineCarState+0x1b4>
			break;
 8000d66:	bf00      	nop
 8000d68:	e004      	b.n	8000d74 <ACC_uddtDetermineCarState+0x1b4>
			break;
 8000d6a:	bf00      	nop
 8000d6c:	e002      	b.n	8000d74 <ACC_uddtDetermineCarState+0x1b4>
			break;
 8000d6e:	bf00      	nop
 8000d70:	e000      	b.n	8000d74 <ACC_uddtDetermineCarState+0x1b4>
			break;
 8000d72:	bf00      	nop
		}
	}

	return ret;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000089 	.word	0x20000089
 8000d84:	20000088 	.word	0x20000088
 8000d88:	2000008a 	.word	0x2000008a
 8000d8c:	2000008b 	.word	0x2000008b

08000d90 <ACC_uddtFaultDetection>:



EN_ACC_carStates_t ACC_uddtFaultDetection(EN_ACC_faultCodes_t copy_uddtFaultCode)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	EN_ACC_carStates_t ret;
	switch(copy_uddtFaultCode)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d841      	bhi.n	8000e26 <ACC_uddtFaultDetection+0x96>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <ACC_uddtFaultDetection+0x18>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000dc5 	.word	0x08000dc5
 8000dac:	08000dd3 	.word	0x08000dd3
 8000db0:	08000de1 	.word	0x08000de1
 8000db4:	08000def 	.word	0x08000def
 8000db8:	08000e0b 	.word	0x08000e0b
 8000dbc:	08000dfd 	.word	0x08000dfd
 8000dc0:	08000e19 	.word	0x08000e19
	{
		case ACC_CAR_IS_ALREADY_ON :
		{
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 1 : Car Is Already On \r\n");
 8000dc4:	4921      	ldr	r1, [pc, #132]	; (8000e4c <ACC_uddtFaultDetection+0xbc>)
 8000dc6:	4822      	ldr	r0, [pc, #136]	; (8000e50 <ACC_uddtFaultDetection+0xc0>)
 8000dc8:	f000 fa3e 	bl	8001248 <HHC05_uddtTransmitString>
			ret = ACC_CAR_RECVINIG;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	73fb      	strb	r3, [r7, #15]
			break;
 8000dd0:	e037      	b.n	8000e42 <ACC_uddtFaultDetection+0xb2>
		}
		case ACC_NCC_IS_ALREADY_ACTIVE :
		{
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 2 : NCC Is Already Active \r\n");
 8000dd2:	4920      	ldr	r1, [pc, #128]	; (8000e54 <ACC_uddtFaultDetection+0xc4>)
 8000dd4:	481e      	ldr	r0, [pc, #120]	; (8000e50 <ACC_uddtFaultDetection+0xc0>)
 8000dd6:	f000 fa37 	bl	8001248 <HHC05_uddtTransmitString>
			ret = ACC_CAR_RECVINIG;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	73fb      	strb	r3, [r7, #15]
			break;
 8000dde:	e030      	b.n	8000e42 <ACC_uddtFaultDetection+0xb2>
		}
		case ACC_ACC_IS_ALREADY_ACTIVE :
		{
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 3 : ACC Is Already Active \r\n");
 8000de0:	491d      	ldr	r1, [pc, #116]	; (8000e58 <ACC_uddtFaultDetection+0xc8>)
 8000de2:	481b      	ldr	r0, [pc, #108]	; (8000e50 <ACC_uddtFaultDetection+0xc0>)
 8000de4:	f000 fa30 	bl	8001248 <HHC05_uddtTransmitString>
			ret = ACC_CAR_RECVINIG;
 8000de8:	2307      	movs	r3, #7
 8000dea:	73fb      	strb	r3, [r7, #15]
			break;
 8000dec:	e029      	b.n	8000e42 <ACC_uddtFaultDetection+0xb2>
		}
		case ACC_CAR_IS_ALREADY_OFF :
		{
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 4 : Car Is Already Off \r\n");
 8000dee:	491b      	ldr	r1, [pc, #108]	; (8000e5c <ACC_uddtFaultDetection+0xcc>)
 8000df0:	4817      	ldr	r0, [pc, #92]	; (8000e50 <ACC_uddtFaultDetection+0xc0>)
 8000df2:	f000 fa29 	bl	8001248 <HHC05_uddtTransmitString>
			ret = ACC_CAR_STANDBY;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
			break;
 8000dfa:	e022      	b.n	8000e42 <ACC_uddtFaultDetection+0xb2>
		}
		case ACC_NCC_IS_ALREADY_OFF :
		{
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 5 : NCC Is Already Off \r\n");
 8000dfc:	4918      	ldr	r1, [pc, #96]	; (8000e60 <ACC_uddtFaultDetection+0xd0>)
 8000dfe:	4814      	ldr	r0, [pc, #80]	; (8000e50 <ACC_uddtFaultDetection+0xc0>)
 8000e00:	f000 fa22 	bl	8001248 <HHC05_uddtTransmitString>
			ret = ACC_CAR_RECVINIG;
 8000e04:	2307      	movs	r3, #7
 8000e06:	73fb      	strb	r3, [r7, #15]
			break;
 8000e08:	e01b      	b.n	8000e42 <ACC_uddtFaultDetection+0xb2>
		}
		case ACC_ACC_IS_ALREADY_OFF :
		{
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 6 : ACC Is Already Off \r\n");
 8000e0a:	4916      	ldr	r1, [pc, #88]	; (8000e64 <ACC_uddtFaultDetection+0xd4>)
 8000e0c:	4810      	ldr	r0, [pc, #64]	; (8000e50 <ACC_uddtFaultDetection+0xc0>)
 8000e0e:	f000 fa1b 	bl	8001248 <HHC05_uddtTransmitString>
			ret = ACC_CAR_RECVINIG;
 8000e12:	2307      	movs	r3, #7
 8000e14:	73fb      	strb	r3, [r7, #15]
			break;
 8000e16:	e014      	b.n	8000e42 <ACC_uddtFaultDetection+0xb2>
		}
		case ACC_NCC_SPEED_RANGE_INVALID :
		{
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 7 : Set Speed For Ncc Out Of The Range Of (1 To 100) \r\n");
 8000e18:	4913      	ldr	r1, [pc, #76]	; (8000e68 <ACC_uddtFaultDetection+0xd8>)
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <ACC_uddtFaultDetection+0xc0>)
 8000e1c:	f000 fa14 	bl	8001248 <HHC05_uddtTransmitString>
			ret = ACC_CAR_NCC_ACTIVE;
 8000e20:	2302      	movs	r3, #2
 8000e22:	73fb      	strb	r3, [r7, #15]
			break;
 8000e24:	e00d      	b.n	8000e42 <ACC_uddtFaultDetection+0xb2>
		}
		default:
		{
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault  : Invalid Option \r\n");
 8000e26:	4911      	ldr	r1, [pc, #68]	; (8000e6c <ACC_uddtFaultDetection+0xdc>)
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <ACC_uddtFaultDetection+0xc0>)
 8000e2a:	f000 fa0d 	bl	8001248 <HHC05_uddtTransmitString>
			if(lo_u8CarIsOnFlag == 1)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <ACC_uddtFaultDetection+0xe0>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d102      	bne.n	8000e3c <ACC_uddtFaultDetection+0xac>
			ret = ACC_CAR_RECVINIG;
 8000e36:	2307      	movs	r3, #7
 8000e38:	73fb      	strb	r3, [r7, #15]
			else ret = ACC_CAR_STANDBY;
			break;
 8000e3a:	e001      	b.n	8000e40 <ACC_uddtFaultDetection+0xb0>
			else ret = ACC_CAR_STANDBY;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
			break;
 8000e40:	bf00      	nop
		}
	}
	return ret;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	080024d0 	.word	0x080024d0
 8000e50:	40011000 	.word	0x40011000
 8000e54:	080024f0 	.word	0x080024f0
 8000e58:	08002514 	.word	0x08002514
 8000e5c:	08002538 	.word	0x08002538
 8000e60:	08002558 	.word	0x08002558
 8000e64:	08002578 	.word	0x08002578
 8000e68:	08002598 	.word	0x08002598
 8000e6c:	080025d8 	.word	0x080025d8
 8000e70:	20000089 	.word	0x20000089

08000e74 <ANCC_vSetNccSpeed>:

#include "../../../Inc/APPLICATION/Normal_Cruise_Control/ncc_interface.h"


void ANCC_vSetNccSpeed(ST_DCM_cfg_t *dcmCfg , uint8_t copy_u8Speed)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
	HDCM_controlSpeed(copy_u8Speed); /* set the speed of NCC taken from driver */
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f991 	bl	80011aa <HDCM_controlSpeed>
	HDCM_turnOn(dcmCfg); /* turn dc motor on to start moving the car */
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 f94f 	bl	800112c <HDCM_turnOn>
	HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Ncc Is Working Now \r\n");
 8000e8e:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <ANCC_vSetNccSpeed+0x2c>)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <ANCC_vSetNccSpeed+0x30>)
 8000e92:	f000 f9d9 	bl	8001248 <HHC05_uddtTransmitString>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	080025f4 	.word	0x080025f4
 8000ea4:	40011000 	.word	0x40011000

08000ea8 <ANCC_vStopNcc>:

void ANCC_vStopNcc(ST_DCM_cfg_t *dcmCfg)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	HDCM_controlSpeed(STOP_SPEED); /* set the speed of NCC to stop speed to turn off pwm*/
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f000 f97a 	bl	80011aa <HDCM_controlSpeed>
	HDCM_turnOff(dcmCfg); /* turn off dc motors to stop car */
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f917 	bl	80010ea <HDCM_turnOff>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <AUDI_vInitInterface>:

#include "../../../Inc/APPLICATION/User_Dashboard_Interface/udi_interface.h"


void AUDI_vInitInterface(ST_MUART_RegistersMap_t *PS_USARTx , ST_MUSART_cfg_t const *PS_uddtUartCfg)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	    /* init HC05*/
		HHC05_uddtInit(PS_USARTx , PS_uddtUartCfg);  /* USART init*/
 8000ece:	6839      	ldr	r1, [r7, #0]
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f99b 	bl	800120c <HHC05_uddtInit>
		HHC05_uddtEnable(PS_USARTx); /* USART enable*/
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f9a8 	bl	800122c <HHC05_uddtEnable>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <AUDI_vStandByDashboard>:

void AUDI_vStandByDashboard(ST_MUART_RegistersMap_t *PS_USARTx)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0fa      	sub	sp, #488	; 0x1e8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000eee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000ef2:	6018      	str	r0, [r3, #0]

    uint8_t lo_u8CarDashboardTemplate[] = {
 8000ef4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000ef8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000efc:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <AUDI_vStandByDashboard+0x70>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	4611      	mov	r1, r2
 8000f02:	f240 1321 	movw	r3, #289	; 0x121
 8000f06:	461a      	mov	r2, r3
 8000f08:	f001 fa98 	bl	800243c <memcpy>
        '|', ' ', 'A', 'C', 'C', ' ', 'S', 't', 'a', 't', 'u', 's', ':', ' ', '[', ' ', ' ', ' ','O', 'F', 'F', ' ', ' ',  ' ', ' ', ']', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|','\r','\n',
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','\r','\n',
		'\0'
    };

    uint8_t lo_u8TurnCarOn[] = {
 8000f0c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000f10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8000f14:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <AUDI_vStandByDashboard+0x74>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	4611      	mov	r1, r2
 8000f1a:	23b5      	movs	r3, #181	; 0xb5
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	f001 fa8d 	bl	800243c <memcpy>
        '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','\r','\n',
		'\0'
    };


	HHC05_uddtTransmitString(PS_USARTx,lo_u8CarDashboardTemplate);
 8000f22:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000f26:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000f2a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000f2e:	4611      	mov	r1, r2
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	f000 f989 	bl	8001248 <HHC05_uddtTransmitString>
	HHC05_uddtTransmitString(PS_USARTx,lo_u8TurnCarOn);
 8000f36:	f107 020c 	add.w	r2, r7, #12
 8000f3a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000f3e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000f42:	4611      	mov	r1, r2
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	f000 f97f 	bl	8001248 <HHC05_uddtTransmitString>

}
 8000f4a:	bf00      	nop
 8000f4c:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	0800260c 	.word	0x0800260c
 8000f58:	08002730 	.word	0x08002730

08000f5c <AUDI_vOnDashboard>:

void AUDI_vOnDashboard(ST_MUART_RegistersMap_t *PS_USARTx)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0cc      	sub	sp, #304	; 0x130
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f6a:	6018      	str	r0, [r3, #0]
    uint8_t lo_u8CarOptions[] = {
 8000f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <AUDI_vOnDashboard+0x48>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	4611      	mov	r1, r2
 8000f7a:	f240 1321 	movw	r3, #289	; 0x121
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f001 fa5c 	bl	800243c <memcpy>
        '|', ' ', 'T', 'U', 'R', 'N', ' ', 'N', 'C', 'C','O','F','F', ':', ' ', '[', ' ', ' ', ' ',' ', 'k', ' ', ' ', ' ',  ' ', ']', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|','\r','\n',
		'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','\r','\n',
		'\0'
    };

	HHC05_uddtTransmitString(PS_USARTx,lo_u8CarOptions);
 8000f84:	f107 020c 	add.w	r2, r7, #12
 8000f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f90:	4611      	mov	r1, r2
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	f000 f958 	bl	8001248 <HHC05_uddtTransmitString>

}
 8000f98:	bf00      	nop
 8000f9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	080027e8 	.word	0x080027e8

08000fa8 <HDCM_init>:

#include "../../../Inc/HAL/dcm/dcm_interface.h"


EN_DCM_systemState_t HDCM_init(ST_DCM_cfg_t *dcmCfg)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	EN_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d102      	bne.n	8000fbc <HDCM_init+0x14>
	{
		ret = DCM_NOK;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e091      	b.n	80010e0 <HDCM_init+0x138>
	}
	else
	{
		if(dcmCfg->DCM_defaultDirection == DCM_DIR_CLOCKWISE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	795b      	ldrb	r3, [r3, #5]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d143      	bne.n	800104c <HDCM_init+0xa4>
		{
	    	MGPIO_setPinMode(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, MGPIO_MODE_OUTPUT);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7818      	ldrb	r0, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	785b      	ldrb	r3, [r3, #1]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f000 f988 	bl	80012e4 <MGPIO_setPinMode>
	    	MGPIO_setOutputMode  ( dcmCfg->DCM_5vPort ,  dcmCfg->DCM_5vPin , MGPIO_OUTPUT_RESISTOR_PUSH_PULL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7818      	ldrb	r0, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	785b      	ldrb	r3, [r3, #1]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f000 fa18 	bl	8001414 <MGPIO_setOutputMode>
	    	MGPIO_setOutputSpeed ( dcmCfg->DCM_5vPort ,  dcmCfg->DCM_5vPin ,  MGPIO_OUTPUT_SPEED_HIGH );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7818      	ldrb	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	785b      	ldrb	r3, [r3, #1]
 8000fec:	2202      	movs	r2, #2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f000 fa9e 	bl	8001530 <MGPIO_setOutputSpeed>
	    	MGPIO_setPinVal(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, dcmCfg->DCM_intialState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7818      	ldrb	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7859      	ldrb	r1, [r3, #1]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	461a      	mov	r2, r3
 8001002:	f000 fb29 	bl	8001658 <MGPIO_setPinVal>

	    	MGPIO_setPinMode(dcmCfg->DCM_gndPort, dcmCfg->DCM_gndPin, MGPIO_MODE_OUTPUT);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7898      	ldrb	r0, [r3, #2]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	78db      	ldrb	r3, [r3, #3]
 800100e:	2201      	movs	r2, #1
 8001010:	4619      	mov	r1, r3
 8001012:	f000 f967 	bl	80012e4 <MGPIO_setPinMode>
	    	MGPIO_setOutputMode  (dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin , MGPIO_OUTPUT_RESISTOR_PUSH_PULL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7898      	ldrb	r0, [r3, #2]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	78db      	ldrb	r3, [r3, #3]
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	f000 f9f7 	bl	8001414 <MGPIO_setOutputMode>
	    	MGPIO_setOutputSpeed (dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin,  MGPIO_OUTPUT_SPEED_HIGH );
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7898      	ldrb	r0, [r3, #2]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	78db      	ldrb	r3, [r3, #3]
 800102e:	2202      	movs	r2, #2
 8001030:	4619      	mov	r1, r3
 8001032:	f000 fa7d 	bl	8001530 <MGPIO_setOutputSpeed>
	    	MGPIO_setPinVal(dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin, MGPIO_LOGIC_LOW);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7898      	ldrb	r0, [r3, #2]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	78db      	ldrb	r3, [r3, #3]
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	f000 fb09 	bl	8001658 <MGPIO_setPinVal>

			ret = DCM_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e049      	b.n	80010e0 <HDCM_init+0x138>
		}
		else if(dcmCfg->DCM_defaultDirection == DCM_DIR_ANTI_CLOCKWISE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	795b      	ldrb	r3, [r3, #5]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d143      	bne.n	80010dc <HDCM_init+0x134>
		{

	    	MGPIO_setPinMode(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, MGPIO_MODE_OUTPUT);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7818      	ldrb	r0, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	785b      	ldrb	r3, [r3, #1]
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	f000 f940 	bl	80012e4 <MGPIO_setPinMode>
	    	MGPIO_setOutputMode  ( dcmCfg->DCM_5vPort ,  dcmCfg->DCM_5vPin , MGPIO_OUTPUT_RESISTOR_PUSH_PULL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7818      	ldrb	r0, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	785b      	ldrb	r3, [r3, #1]
 800106c:	2200      	movs	r2, #0
 800106e:	4619      	mov	r1, r3
 8001070:	f000 f9d0 	bl	8001414 <MGPIO_setOutputMode>
	    	MGPIO_setOutputSpeed ( dcmCfg->DCM_5vPort ,  dcmCfg->DCM_5vPin ,  MGPIO_OUTPUT_SPEED_HIGH );
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7818      	ldrb	r0, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	2202      	movs	r2, #2
 800107e:	4619      	mov	r1, r3
 8001080:	f000 fa56 	bl	8001530 <MGPIO_setOutputSpeed>
	    	MGPIO_setPinVal(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, MGPIO_LOGIC_LOW);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7818      	ldrb	r0, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	2200      	movs	r2, #0
 800108e:	4619      	mov	r1, r3
 8001090:	f000 fae2 	bl	8001658 <MGPIO_setPinVal>

	    	MGPIO_setPinMode(dcmCfg->DCM_gndPort, dcmCfg->DCM_gndPin, MGPIO_MODE_OUTPUT);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7898      	ldrb	r0, [r3, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	78db      	ldrb	r3, [r3, #3]
 800109c:	2201      	movs	r2, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	f000 f920 	bl	80012e4 <MGPIO_setPinMode>
	    	MGPIO_setOutputMode  (dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin , MGPIO_OUTPUT_RESISTOR_PUSH_PULL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7898      	ldrb	r0, [r3, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	78db      	ldrb	r3, [r3, #3]
 80010ac:	2200      	movs	r2, #0
 80010ae:	4619      	mov	r1, r3
 80010b0:	f000 f9b0 	bl	8001414 <MGPIO_setOutputMode>
	    	MGPIO_setOutputSpeed (dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin,  MGPIO_OUTPUT_SPEED_HIGH );
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7898      	ldrb	r0, [r3, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	78db      	ldrb	r3, [r3, #3]
 80010bc:	2202      	movs	r2, #2
 80010be:	4619      	mov	r1, r3
 80010c0:	f000 fa36 	bl	8001530 <MGPIO_setOutputSpeed>
	    	MGPIO_setPinVal(dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin, dcmCfg->DCM_intialState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7898      	ldrb	r0, [r3, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	78d9      	ldrb	r1, [r3, #3]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	461a      	mov	r2, r3
 80010d2:	f000 fac1 	bl	8001658 <MGPIO_setPinVal>

			ret = DCM_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e001      	b.n	80010e0 <HDCM_init+0x138>
		}
		else
		{
			ret = DCM_NOK;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
		}

	}
	return ret;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HDCM_turnOff>:

EN_DCM_systemState_t HDCM_turnOff(ST_DCM_cfg_t *dcmCfg)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	EN_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <HDCM_turnOff+0x14>
	{
		ret = DCM_NOK;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e011      	b.n	8001122 <HDCM_turnOff+0x38>
	}
	else
	{
	    MGPIO_setPinVal(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, MGPIO_LOGIC_LOW);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7818      	ldrb	r0, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	f000 faa5 	bl	8001658 <MGPIO_setPinVal>
	    MGPIO_setPinVal(dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin, MGPIO_LOGIC_LOW);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7898      	ldrb	r0, [r3, #2]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f000 fa9d 	bl	8001658 <MGPIO_setPinVal>
		ret = DCM_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HDCM_turnOn>:

EN_DCM_systemState_t HDCM_turnOn(ST_DCM_cfg_t *dcmCfg)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	EN_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <HDCM_turnOn+0x14>
	{
		ret = DCM_NOK;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e02f      	b.n	80011a0 <HDCM_turnOn+0x74>
	}
	else
	{
		if(dcmCfg->DCM_defaultDirection == DCM_DIR_CLOCKWISE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	795b      	ldrb	r3, [r3, #5]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d112      	bne.n	800116e <HDCM_turnOn+0x42>
		{
		    MGPIO_setPinVal(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, MGPIO_LOGIC_HIGH);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7818      	ldrb	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	f000 fa80 	bl	8001658 <MGPIO_setPinVal>
		    MGPIO_setPinVal(dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin, MGPIO_LOGIC_LOW);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7898      	ldrb	r0, [r3, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	78db      	ldrb	r3, [r3, #3]
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	f000 fa78 	bl	8001658 <MGPIO_setPinVal>

			ret = DCM_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e018      	b.n	80011a0 <HDCM_turnOn+0x74>
		}
		else if(dcmCfg->DCM_defaultDirection == DCM_DIR_ANTI_CLOCKWISE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	795b      	ldrb	r3, [r3, #5]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d112      	bne.n	800119c <HDCM_turnOn+0x70>
		{
		    MGPIO_setPinVal(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, MGPIO_LOGIC_LOW);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7818      	ldrb	r0, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	785b      	ldrb	r3, [r3, #1]
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	f000 fa69 	bl	8001658 <MGPIO_setPinVal>
		    MGPIO_setPinVal(dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin, MGPIO_LOGIC_HIGH);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7898      	ldrb	r0, [r3, #2]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	78db      	ldrb	r3, [r3, #3]
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	f000 fa61 	bl	8001658 <MGPIO_setPinVal>

			ret = DCM_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e001      	b.n	80011a0 <HDCM_turnOn+0x74>
		}
		else
		{
			ret = DCM_NOK;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
		}

	}
	return ret;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HDCM_controlSpeed>:
	}
	return ret;
}

EN_DCM_systemState_t HDCM_controlSpeed(uint8_t copy_u8Speed)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
	MGPIO_setPinMode(MGPIO_PORTA, MGPIO_PIN0, MGPIO_MODE_ALTF);
 80011b4:	2202      	movs	r2, #2
 80011b6:	2100      	movs	r1, #0
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f893 	bl	80012e4 <MGPIO_setPinMode>
	MGPIO_SetAltFun(MGPIO_PORTA, MGPIO_PIN0, MGPIO_ALTFN_1);
 80011be:	2201      	movs	r2, #1
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 fb4a 	bl	800185c <MGPIO_SetAltFun>

	/* speed init */
	MTMR_vSetTimerPrescaler(MTMR2, 64);
 80011c8:	2140      	movs	r1, #64	; 0x40
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fcc2 	bl	8001b54 <MTMR_vSetTimerPrescaler>
	MTMR_vSetTimerARR(MTMR2, 10000 - 1);
 80011d0:	f242 710f 	movw	r1, #9999	; 0x270f
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 fda9 	bl	8001d2c <MTMR_vSetTimerARR>
	MTMR_vSetTimerChannelOutput(MTMR2, MTMR_MODE_PWM_MODE1, MTMR_CH1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2106      	movs	r1, #6
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 fd0e 	bl	8001c00 <MTMR_vSetTimerChannelOutput>

	uint32_t counter = 100 * copy_u8Speed;
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2264      	movs	r2, #100	; 0x64
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	60fb      	str	r3, [r7, #12]
	MTMR_vSetTimerCMPVal(MTMR2, MTMR_CH1, counter - 1);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	461a      	mov	r2, r3
 80011f4:	2101      	movs	r1, #1
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 fd60 	bl	8001cbc <MTMR_vSetTimerCMPVal>
	MTMR_vStartTimer(MTMR2);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f000 fc69 	bl	8001ad4 <MTMR_vStartTimer>
}
 8001202:	bf00      	nop
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HHC05_uddtInit>:

#include "../../../Inc/HAL/hc05/hc05_interface.h"


EN_HHC05_systeamState_t  HHC05_uddtInit(ST_MUART_RegistersMap_t *PS_USARTx , ST_MUSART_cfg_t const *PS_uddtUartCfg)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	EN_HHC05_systeamState_t ret = MUSART_uddtInit(PS_USARTx,PS_uddtUartCfg);
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 fdb1 	bl	8001d80 <MUSART_uddtInit>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HHC05_uddtEnable>:

EN_HHC05_systeamState_t  HHC05_uddtEnable(ST_MUART_RegistersMap_t *PS_USARTx)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	EN_HHC05_systeamState_t ret = MUSART_uddtEnable(PS_USARTx);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 ff03 	bl	8002040 <MUSART_uddtEnable>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
	return ret;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HHC05_uddtTransmitString>:
	EN_HHC05_systeamState_t ret = MUSART_uddtTransmitByte(PS_USARTx,copy_u8ByteToSend);
	return ret;
}

EN_HHC05_systeamState_t  HHC05_uddtTransmitString(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8StringToSend)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	EN_HHC05_systeamState_t ret = MUSART_uddtTransmitString(PS_USARTx,copy_u8StringToSend);
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 ff3c 	bl	80020d2 <MUSART_uddtTransmitString>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
	return ret;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HHC05_uddtReadDataRegister>:

EN_HHC05_systeamState_t  HHC05_uddtReadDataRegister(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8ByteToReceive)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]

	EN_HHC05_systeamState_t ret = MUSART_uddtReadDataRegister(PS_USARTx,copy_u8ByteToReceive);
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 ff57 	bl	8002128 <MUSART_uddtReadDataRegister>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
	return ret;
 800127e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HHC05_uddtReceiveByteSynchNonBlocking>:

EN_HHC05_systeamState_t  HHC05_uddtReceiveByteSynchNonBlocking(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8ByteToReceive)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	EN_HHC05_systeamState_t ret = MUSART_uddtReceiveByteSynchNonBlocking(PS_USARTx,copy_u8ByteToReceive);
 8001292:	6839      	ldr	r1, [r7, #0]
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 ff6d 	bl	8002174 <MUSART_uddtReceiveByteSynchNonBlocking>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]
	return ret;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HHC05_uddtReceiveStringAsynchBlocking>:
	EN_HHC05_systeamState_t ret = MUSART_uddtReceiveStringSynchNonBlocking(PS_USARTx,copy_u8ByteToReceive);
	return ret;
}

EN_HHC05_systeamState_t  HHC05_uddtReceiveStringAsynchBlocking(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8ByteToReceive)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	EN_HHC05_systeamState_t ret = MUSART_uddtReceiveStringAsynchBlocking(PS_USARTx,copy_u8ByteToReceive);
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 ff97 	bl	80021e8 <MUSART_uddtReceiveStringAsynchBlocking>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]
	return ret;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <ultra_init>:
    }
}


void ultra_init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	MGPIO_setPinMode(TRIGGER_PORT, TRIGGER_PIN, MGPIO_MODE_OUTPUT);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2109      	movs	r1, #9
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 f807 	bl	80012e4 <MGPIO_setPinMode>
	MGPIO_setPinMode(ECHO_PORT, ECHO_PIN, MGPIO_MODE_INPUT);
 80012d6:	2200      	movs	r2, #0
 80012d8:	210a      	movs	r1, #10
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f802 	bl	80012e4 <MGPIO_setPinMode>


}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <MGPIO_setPinMode>:

#include "../../../Inc/MCAL/gpio/gpio_interface.h"


EN_MGPIO_systemState_t MGPIO_setPinMode (EN_MGPIO_portOptions_t copy_uddtPortName ,EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_pinModeOptions_t copy_uddtPinMode)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	460b      	mov	r3, r1
 80012f0:	71bb      	strb	r3, [r7, #6]
 80012f2:	4613      	mov	r3, r2
 80012f4:	717b      	strb	r3, [r7, #5]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 80012f6:	2301      	movs	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]

	if((copy_uddtPortName >= MGPIO_PORTA && copy_uddtPortName <= MGPIO_PORTH)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d873      	bhi.n	80013e8 <MGPIO_setPinMode+0x104>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	d870      	bhi.n	80013e8 <MGPIO_setPinMode+0x104>
		&& (copy_uddtPinMode >= MGPIO_MODE_OUTPUT && copy_uddtPinMode <= MGPIO_MODE_ANALOG))
 8001306:	797b      	ldrb	r3, [r7, #5]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d06d      	beq.n	80013e8 <MGPIO_setPinMode+0x104>
 800130c:	797b      	ldrb	r3, [r7, #5]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d86a      	bhi.n	80013e8 <MGPIO_setPinMode+0x104>
	{
		switch(copy_uddtPortName)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d863      	bhi.n	80013e0 <MGPIO_setPinMode+0xfc>
 8001318:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <MGPIO_setPinMode+0x3c>)
 800131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131e:	bf00      	nop
 8001320:	08001339 	.word	0x08001339
 8001324:	08001355 	.word	0x08001355
 8001328:	08001371 	.word	0x08001371
 800132c:	0800138d 	.word	0x0800138d
 8001330:	080013a9 	.word	0x080013a9
 8001334:	080013c5 	.word	0x080013c5
		{
			case MGPIO_PORTA :
			{
				MGPIOA_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <MGPIO_setPinMode+0x118>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	7979      	ldrb	r1, [r7, #5]
 800133e:	79ba      	ldrb	r2, [r7, #6]
 8001340:	0052      	lsls	r2, r2, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	4611      	mov	r1, r2
 8001348:	4a2c      	ldr	r2, [pc, #176]	; (80013fc <MGPIO_setPinMode+0x118>)
 800134a:	430b      	orrs	r3, r1
 800134c:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
				break;
 8001352:	e048      	b.n	80013e6 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTB :
			{
				MGPIOB_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <MGPIO_setPinMode+0x11c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	7979      	ldrb	r1, [r7, #5]
 800135a:	79ba      	ldrb	r2, [r7, #6]
 800135c:	0052      	lsls	r2, r2, #1
 800135e:	fa01 f202 	lsl.w	r2, r1, r2
 8001362:	4611      	mov	r1, r2
 8001364:	4a26      	ldr	r2, [pc, #152]	; (8001400 <MGPIO_setPinMode+0x11c>)
 8001366:	430b      	orrs	r3, r1
 8001368:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
				break;
 800136e:	e03a      	b.n	80013e6 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTC :
			{
				MGPIOC_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <MGPIO_setPinMode+0x120>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	7979      	ldrb	r1, [r7, #5]
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	0052      	lsls	r2, r2, #1
 800137a:	fa01 f202 	lsl.w	r2, r1, r2
 800137e:	4611      	mov	r1, r2
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <MGPIO_setPinMode+0x120>)
 8001382:	430b      	orrs	r3, r1
 8001384:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
				break;
 800138a:	e02c      	b.n	80013e6 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTD :
			{
				MGPIOD_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MGPIO_setPinMode+0x124>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	7979      	ldrb	r1, [r7, #5]
 8001392:	79ba      	ldrb	r2, [r7, #6]
 8001394:	0052      	lsls	r2, r2, #1
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	4611      	mov	r1, r2
 800139c:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <MGPIO_setPinMode+0x124>)
 800139e:	430b      	orrs	r3, r1
 80013a0:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
				break;
 80013a6:	e01e      	b.n	80013e6 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTE :
			{
				MGPIOE_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <MGPIO_setPinMode+0x128>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	7979      	ldrb	r1, [r7, #5]
 80013ae:	79ba      	ldrb	r2, [r7, #6]
 80013b0:	0052      	lsls	r2, r2, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	4611      	mov	r1, r2
 80013b8:	4a14      	ldr	r2, [pc, #80]	; (800140c <MGPIO_setPinMode+0x128>)
 80013ba:	430b      	orrs	r3, r1
 80013bc:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
				break;
 80013c2:	e010      	b.n	80013e6 <MGPIO_setPinMode+0x102>
			}
			case MGPIO_PORTH :
			{
				MGPIOH_PERIPHERAL->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MGPIO_setPinMode+0x12c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	7979      	ldrb	r1, [r7, #5]
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	0052      	lsls	r2, r2, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	4611      	mov	r1, r2
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <MGPIO_setPinMode+0x12c>)
 80013d6:	430b      	orrs	r3, r1
 80013d8:	6013      	str	r3, [r2, #0]
				ret = MGPIO_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
				break;
 80013de:	e002      	b.n	80013e6 <MGPIO_setPinMode+0x102>
			}
			default :
			{
				ret = MGPIO_INVALID_PARAMTER;
 80013e0:	2302      	movs	r3, #2
 80013e2:	73fb      	strb	r3, [r7, #15]
				break;
 80013e4:	bf00      	nop
		switch(copy_uddtPortName)
 80013e6:	e001      	b.n	80013ec <MGPIO_setPinMode+0x108>
			}
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 80013e8:	2302      	movs	r3, #2
 80013ea:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40021000 	.word	0x40021000
 8001410:	40021c00 	.word	0x40021c00

08001414 <MGPIO_setOutputMode>:




EN_MGPIO_systemState_t MGPIO_setOutputMode (EN_MGPIO_portOptions_t copy_uddtPortName , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_outputResistorOptions_t copy_uddtOutputResistor)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	460b      	mov	r3, r1
 8001420:	71bb      	strb	r3, [r7, #6]
 8001422:	4613      	mov	r3, r2
 8001424:	717b      	strb	r3, [r7, #5]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001426:	2301      	movs	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]

	if((copy_uddtPortName >= MGPIO_PORTA && copy_uddtPortName <= MGPIO_PORTH)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b05      	cmp	r3, #5
 800142e:	d869      	bhi.n	8001504 <MGPIO_setOutputMode+0xf0>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	d866      	bhi.n	8001504 <MGPIO_setOutputMode+0xf0>
		&& (copy_uddtOutputResistor >= MGPIO_OUTPUT_RESISTOR_PUSH_PULL && copy_uddtOutputResistor <= MGPIO_OUTPUT_RESISTOR_OPEN_DRAIN))
 8001436:	797b      	ldrb	r3, [r7, #5]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d863      	bhi.n	8001504 <MGPIO_setOutputMode+0xf0>
	{
		switch(copy_uddtPortName)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d85c      	bhi.n	80014fc <MGPIO_setOutputMode+0xe8>
 8001442:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <MGPIO_setOutputMode+0x34>)
 8001444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001448:	08001461 	.word	0x08001461
 800144c:	0800147b 	.word	0x0800147b
 8001450:	08001495 	.word	0x08001495
 8001454:	080014af 	.word	0x080014af
 8001458:	080014c9 	.word	0x080014c9
 800145c:	080014e3 	.word	0x080014e3
		{
			case MGPIO_PORTA :
			{
				MGPIOA_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 8001460:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <MGPIO_setOutputMode+0x104>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	7979      	ldrb	r1, [r7, #5]
 8001466:	79ba      	ldrb	r2, [r7, #6]
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	4611      	mov	r1, r2
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <MGPIO_setOutputMode+0x104>)
 8001470:	430b      	orrs	r3, r1
 8001472:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
				break;
 8001478:	e043      	b.n	8001502 <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTB :
			{
				MGPIOB_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <MGPIO_setOutputMode+0x108>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	7979      	ldrb	r1, [r7, #5]
 8001480:	79ba      	ldrb	r2, [r7, #6]
 8001482:	fa01 f202 	lsl.w	r2, r1, r2
 8001486:	4611      	mov	r1, r2
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <MGPIO_setOutputMode+0x108>)
 800148a:	430b      	orrs	r3, r1
 800148c:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
				break;
 8001492:	e036      	b.n	8001502 <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTC :
			{
				MGPIOC_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <MGPIO_setOutputMode+0x10c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	7979      	ldrb	r1, [r7, #5]
 800149a:	79ba      	ldrb	r2, [r7, #6]
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	4611      	mov	r1, r2
 80014a2:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <MGPIO_setOutputMode+0x10c>)
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
				break;
 80014ac:	e029      	b.n	8001502 <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTD :
			{
				MGPIOD_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MGPIO_setOutputMode+0x110>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	7979      	ldrb	r1, [r7, #5]
 80014b4:	79ba      	ldrb	r2, [r7, #6]
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	4611      	mov	r1, r2
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <MGPIO_setOutputMode+0x110>)
 80014be:	430b      	orrs	r3, r1
 80014c0:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
				break;
 80014c6:	e01c      	b.n	8001502 <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTE :
			{
				MGPIOE_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MGPIO_setOutputMode+0x114>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	7979      	ldrb	r1, [r7, #5]
 80014ce:	79ba      	ldrb	r2, [r7, #6]
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	4611      	mov	r1, r2
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <MGPIO_setOutputMode+0x114>)
 80014d8:	430b      	orrs	r3, r1
 80014da:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
				break;
 80014e0:	e00f      	b.n	8001502 <MGPIO_setOutputMode+0xee>
			}
			case MGPIO_PORTH :
			{
				MGPIOH_PERIPHERAL->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <MGPIO_setOutputMode+0x118>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	7979      	ldrb	r1, [r7, #5]
 80014e8:	79ba      	ldrb	r2, [r7, #6]
 80014ea:	fa01 f202 	lsl.w	r2, r1, r2
 80014ee:	4611      	mov	r1, r2
 80014f0:	4a0e      	ldr	r2, [pc, #56]	; (800152c <MGPIO_setOutputMode+0x118>)
 80014f2:	430b      	orrs	r3, r1
 80014f4:	6053      	str	r3, [r2, #4]
				ret = MGPIO_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]
				break;
 80014fa:	e002      	b.n	8001502 <MGPIO_setOutputMode+0xee>
			}
			default :
			{
				ret = MGPIO_INVALID_PARAMTER;
 80014fc:	2302      	movs	r3, #2
 80014fe:	73fb      	strb	r3, [r7, #15]
				break;
 8001500:	bf00      	nop
		switch(copy_uddtPortName)
 8001502:	e001      	b.n	8001508 <MGPIO_setOutputMode+0xf4>
			}
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8001504:	2302      	movs	r3, #2
 8001506:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40021c00 	.word	0x40021c00

08001530 <MGPIO_setOutputSpeed>:


EN_MGPIO_systemState_t MGPIO_setOutputSpeed  (EN_MGPIO_portOptions_t copy_uddtPortName , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_outputSpeedOptions_t copy_uddtOutputSpeed )
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	460b      	mov	r3, r1
 800153c:	71bb      	strb	r3, [r7, #6]
 800153e:	4613      	mov	r3, r2
 8001540:	717b      	strb	r3, [r7, #5]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001542:	2301      	movs	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]

	if((copy_uddtPortName >= MGPIO_PORTA && copy_uddtPortName <= MGPIO_PORTH)
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d86f      	bhi.n	800162c <MGPIO_setOutputSpeed+0xfc>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	d86c      	bhi.n	800162c <MGPIO_setOutputSpeed+0xfc>
		&& (copy_uddtOutputSpeed >= MGPIO_OUTPUT_SPEED_LOW && copy_uddtOutputSpeed <= MGPIO_OUTPUT_SPEED_VERY_HIGH))
 8001552:	797b      	ldrb	r3, [r7, #5]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d869      	bhi.n	800162c <MGPIO_setOutputSpeed+0xfc>
	{
		switch(copy_uddtPortName)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b05      	cmp	r3, #5
 800155c:	d862      	bhi.n	8001624 <MGPIO_setOutputSpeed+0xf4>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <MGPIO_setOutputSpeed+0x34>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	0800157d 	.word	0x0800157d
 8001568:	08001599 	.word	0x08001599
 800156c:	080015b5 	.word	0x080015b5
 8001570:	080015d1 	.word	0x080015d1
 8001574:	080015ed 	.word	0x080015ed
 8001578:	08001609 	.word	0x08001609
		{
			case MGPIO_PORTA :
			{
				MGPIOA_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 800157c:	4b30      	ldr	r3, [pc, #192]	; (8001640 <MGPIO_setOutputSpeed+0x110>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	7979      	ldrb	r1, [r7, #5]
 8001582:	79ba      	ldrb	r2, [r7, #6]
 8001584:	0052      	lsls	r2, r2, #1
 8001586:	fa01 f202 	lsl.w	r2, r1, r2
 800158a:	4611      	mov	r1, r2
 800158c:	4a2c      	ldr	r2, [pc, #176]	; (8001640 <MGPIO_setOutputSpeed+0x110>)
 800158e:	430b      	orrs	r3, r1
 8001590:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
				break;
 8001596:	e048      	b.n	800162a <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTB :
			{
				MGPIOB_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MGPIO_setOutputSpeed+0x114>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	7979      	ldrb	r1, [r7, #5]
 800159e:	79ba      	ldrb	r2, [r7, #6]
 80015a0:	0052      	lsls	r2, r2, #1
 80015a2:	fa01 f202 	lsl.w	r2, r1, r2
 80015a6:	4611      	mov	r1, r2
 80015a8:	4a26      	ldr	r2, [pc, #152]	; (8001644 <MGPIO_setOutputSpeed+0x114>)
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
				break;
 80015b2:	e03a      	b.n	800162a <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTC :
			{
				MGPIOC_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <MGPIO_setOutputSpeed+0x118>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	7979      	ldrb	r1, [r7, #5]
 80015ba:	79ba      	ldrb	r2, [r7, #6]
 80015bc:	0052      	lsls	r2, r2, #1
 80015be:	fa01 f202 	lsl.w	r2, r1, r2
 80015c2:	4611      	mov	r1, r2
 80015c4:	4a20      	ldr	r2, [pc, #128]	; (8001648 <MGPIO_setOutputSpeed+0x118>)
 80015c6:	430b      	orrs	r3, r1
 80015c8:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
				break;
 80015ce:	e02c      	b.n	800162a <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTD :
			{
				MGPIOD_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MGPIO_setOutputSpeed+0x11c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	7979      	ldrb	r1, [r7, #5]
 80015d6:	79ba      	ldrb	r2, [r7, #6]
 80015d8:	0052      	lsls	r2, r2, #1
 80015da:	fa01 f202 	lsl.w	r2, r1, r2
 80015de:	4611      	mov	r1, r2
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <MGPIO_setOutputSpeed+0x11c>)
 80015e2:	430b      	orrs	r3, r1
 80015e4:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
				break;
 80015ea:	e01e      	b.n	800162a <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTE :
			{
				MGPIOE_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MGPIO_setOutputSpeed+0x120>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	7979      	ldrb	r1, [r7, #5]
 80015f2:	79ba      	ldrb	r2, [r7, #6]
 80015f4:	0052      	lsls	r2, r2, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	4611      	mov	r1, r2
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <MGPIO_setOutputSpeed+0x120>)
 80015fe:	430b      	orrs	r3, r1
 8001600:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
				break;
 8001606:	e010      	b.n	800162a <MGPIO_setOutputSpeed+0xfa>
			}
			case MGPIO_PORTH :
			{
				MGPIOH_PERIPHERAL->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MGPIO_setOutputSpeed+0x124>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	7979      	ldrb	r1, [r7, #5]
 800160e:	79ba      	ldrb	r2, [r7, #6]
 8001610:	0052      	lsls	r2, r2, #1
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	4611      	mov	r1, r2
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <MGPIO_setOutputSpeed+0x124>)
 800161a:	430b      	orrs	r3, r1
 800161c:	6093      	str	r3, [r2, #8]
				ret = MGPIO_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
				break;
 8001622:	e002      	b.n	800162a <MGPIO_setOutputSpeed+0xfa>
			}
			default :
			{
				ret = MGPIO_INVALID_PARAMTER;
 8001624:	2302      	movs	r3, #2
 8001626:	73fb      	strb	r3, [r7, #15]
				break;
 8001628:	bf00      	nop
		switch(copy_uddtPortName)
 800162a:	e001      	b.n	8001630 <MGPIO_setOutputSpeed+0x100>
			}
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 800162c:	2302      	movs	r3, #2
 800162e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	40020800 	.word	0x40020800
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40021000 	.word	0x40021000
 8001654:	40021c00 	.word	0x40021c00

08001658 <MGPIO_setPinVal>:
	}
	return ret;
}

EN_MGPIO_systemState_t MGPIO_setPinVal(EN_MGPIO_portOptions_t copy_uddtPortName , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_pinLogicOptions_t copy_uddtPinLogic)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	460b      	mov	r3, r1
 8001664:	71bb      	strb	r3, [r7, #6]
 8001666:	4613      	mov	r3, r2
 8001668:	717b      	strb	r3, [r7, #5]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]

	if((copy_uddtPortName >= MGPIO_PORTA && copy_uddtPortName <= MGPIO_PORTH)
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b05      	cmp	r3, #5
 8001672:	f200 80de 	bhi.w	8001832 <MGPIO_setPinVal+0x1da>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	f200 80da 	bhi.w	8001832 <MGPIO_setPinVal+0x1da>
		&& (copy_uddtPinLogic >= MGPIO_LOGIC_LOW && copy_uddtPinLogic <= MGPIO_LOGIC_HIGH))
 800167e:	797b      	ldrb	r3, [r7, #5]
 8001680:	2b01      	cmp	r3, #1
 8001682:	f200 80d6 	bhi.w	8001832 <MGPIO_setPinVal+0x1da>
	{
		if(copy_uddtPinLogic == MGPIO_LOGIC_HIGH)
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d162      	bne.n	8001752 <MGPIO_setPinVal+0xfa>
		{
			switch(copy_uddtPortName)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d85c      	bhi.n	800174c <MGPIO_setPinVal+0xf4>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <MGPIO_setPinVal+0x40>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	080016b1 	.word	0x080016b1
 800169c:	080016cb 	.word	0x080016cb
 80016a0:	080016e5 	.word	0x080016e5
 80016a4:	080016ff 	.word	0x080016ff
 80016a8:	08001719 	.word	0x08001719
 80016ac:	08001733 	.word	0x08001733
			{
				case MGPIO_PORTA :
				{
					SET_BIT(MGPIOA_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 80016b0:	4b64      	ldr	r3, [pc, #400]	; (8001844 <MGPIO_setPinVal+0x1ec>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	79ba      	ldrb	r2, [r7, #6]
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	4611      	mov	r1, r2
 80016be:	4a61      	ldr	r2, [pc, #388]	; (8001844 <MGPIO_setPinVal+0x1ec>)
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
					break;
 80016c8:	e0b2      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTB :
				{
					SET_BIT(MGPIOB_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <MGPIO_setPinVal+0x1f0>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	79ba      	ldrb	r2, [r7, #6]
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f202 	lsl.w	r2, r1, r2
 80016d6:	4611      	mov	r1, r2
 80016d8:	4a5b      	ldr	r2, [pc, #364]	; (8001848 <MGPIO_setPinVal+0x1f0>)
 80016da:	430b      	orrs	r3, r1
 80016dc:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
					break;
 80016e2:	e0a5      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTC :
				{
					SET_BIT(MGPIOC_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 80016e4:	4b59      	ldr	r3, [pc, #356]	; (800184c <MGPIO_setPinVal+0x1f4>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	79ba      	ldrb	r2, [r7, #6]
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f202 	lsl.w	r2, r1, r2
 80016f0:	4611      	mov	r1, r2
 80016f2:	4a56      	ldr	r2, [pc, #344]	; (800184c <MGPIO_setPinVal+0x1f4>)
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
					break;
 80016fc:	e098      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTD :
				{
					SET_BIT(MGPIOD_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 80016fe:	4b54      	ldr	r3, [pc, #336]	; (8001850 <MGPIO_setPinVal+0x1f8>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	79ba      	ldrb	r2, [r7, #6]
 8001704:	2101      	movs	r1, #1
 8001706:	fa01 f202 	lsl.w	r2, r1, r2
 800170a:	4611      	mov	r1, r2
 800170c:	4a50      	ldr	r2, [pc, #320]	; (8001850 <MGPIO_setPinVal+0x1f8>)
 800170e:	430b      	orrs	r3, r1
 8001710:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
					break;
 8001716:	e08b      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTE :
				{
					SET_BIT(MGPIOE_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8001718:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <MGPIO_setPinVal+0x1fc>)
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	79ba      	ldrb	r2, [r7, #6]
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	4611      	mov	r1, r2
 8001726:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <MGPIO_setPinVal+0x1fc>)
 8001728:	430b      	orrs	r3, r1
 800172a:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]
					break;
 8001730:	e07e      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTH :
				{
					SET_BIT(MGPIOH_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8001732:	4b49      	ldr	r3, [pc, #292]	; (8001858 <MGPIO_setPinVal+0x200>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	2101      	movs	r1, #1
 800173a:	fa01 f202 	lsl.w	r2, r1, r2
 800173e:	4611      	mov	r1, r2
 8001740:	4a45      	ldr	r2, [pc, #276]	; (8001858 <MGPIO_setPinVal+0x200>)
 8001742:	430b      	orrs	r3, r1
 8001744:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
					break;
 800174a:	e071      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				default :
				{
					ret = MGPIO_INVALID_PARAMTER;
 800174c:	2302      	movs	r3, #2
 800174e:	73fb      	strb	r3, [r7, #15]
					break;
 8001750:	e06e      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
			}
		}
		else if(copy_uddtPinLogic == MGPIO_LOGIC_LOW)
 8001752:	797b      	ldrb	r3, [r7, #5]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d168      	bne.n	800182a <MGPIO_setPinVal+0x1d2>
		{
			switch(copy_uddtPortName)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d862      	bhi.n	8001824 <MGPIO_setPinVal+0x1cc>
 800175e:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <MGPIO_setPinVal+0x10c>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	0800177d 	.word	0x0800177d
 8001768:	08001799 	.word	0x08001799
 800176c:	080017b5 	.word	0x080017b5
 8001770:	080017d1 	.word	0x080017d1
 8001774:	080017ed 	.word	0x080017ed
 8001778:	08001809 	.word	0x08001809
			{
				case MGPIO_PORTA :
				{
					CLR_BIT(MGPIOA_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <MGPIO_setPinVal+0x1ec>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	79ba      	ldrb	r2, [r7, #6]
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	43d2      	mvns	r2, r2
 800178a:	4611      	mov	r1, r2
 800178c:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <MGPIO_setPinVal+0x1ec>)
 800178e:	400b      	ands	r3, r1
 8001790:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
					break;
 8001796:	e04b      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTB :
				{
					CLR_BIT(MGPIOB_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <MGPIO_setPinVal+0x1f0>)
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	79ba      	ldrb	r2, [r7, #6]
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	43d2      	mvns	r2, r2
 80017a6:	4611      	mov	r1, r2
 80017a8:	4a27      	ldr	r2, [pc, #156]	; (8001848 <MGPIO_setPinVal+0x1f0>)
 80017aa:	400b      	ands	r3, r1
 80017ac:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]
					break;
 80017b2:	e03d      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTC :
				{
					CLR_BIT(MGPIOC_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <MGPIO_setPinVal+0x1f4>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	79ba      	ldrb	r2, [r7, #6]
 80017ba:	2101      	movs	r1, #1
 80017bc:	fa01 f202 	lsl.w	r2, r1, r2
 80017c0:	43d2      	mvns	r2, r2
 80017c2:	4611      	mov	r1, r2
 80017c4:	4a21      	ldr	r2, [pc, #132]	; (800184c <MGPIO_setPinVal+0x1f4>)
 80017c6:	400b      	ands	r3, r1
 80017c8:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
					break;
 80017ce:	e02f      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTD :
				{
					CLR_BIT(MGPIOD_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MGPIO_setPinVal+0x1f8>)
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	79ba      	ldrb	r2, [r7, #6]
 80017d6:	2101      	movs	r1, #1
 80017d8:	fa01 f202 	lsl.w	r2, r1, r2
 80017dc:	43d2      	mvns	r2, r2
 80017de:	4611      	mov	r1, r2
 80017e0:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <MGPIO_setPinVal+0x1f8>)
 80017e2:	400b      	ands	r3, r1
 80017e4:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	73fb      	strb	r3, [r7, #15]
					break;
 80017ea:	e021      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTE :
				{
					CLR_BIT(MGPIOE_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MGPIO_setPinVal+0x1fc>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	79ba      	ldrb	r2, [r7, #6]
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	43d2      	mvns	r2, r2
 80017fa:	4611      	mov	r1, r2
 80017fc:	4a15      	ldr	r2, [pc, #84]	; (8001854 <MGPIO_setPinVal+0x1fc>)
 80017fe:	400b      	ands	r3, r1
 8001800:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
					break;
 8001806:	e013      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				case MGPIO_PORTH :
				{
					CLR_BIT(MGPIOH_PERIPHERAL->MGPIOx_ODR , copy_uddtPinNum);
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MGPIO_setPinVal+0x200>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	79ba      	ldrb	r2, [r7, #6]
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	43d2      	mvns	r2, r2
 8001816:	4611      	mov	r1, r2
 8001818:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <MGPIO_setPinVal+0x200>)
 800181a:	400b      	ands	r3, r1
 800181c:	6153      	str	r3, [r2, #20]
					ret = MGPIO_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
					break;
 8001822:	e005      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
				default :
				{
					ret = MGPIO_INVALID_PARAMTER;
 8001824:	2302      	movs	r3, #2
 8001826:	73fb      	strb	r3, [r7, #15]
					break;
 8001828:	e002      	b.n	8001830 <MGPIO_setPinVal+0x1d8>
				}
			}
		}
		else
		{
			ret = MGPIO_INVALID_PARAMTER;
 800182a:	2302      	movs	r3, #2
 800182c:	73fb      	strb	r3, [r7, #15]
		if(copy_uddtPinLogic == MGPIO_LOGIC_HIGH)
 800182e:	e002      	b.n	8001836 <MGPIO_setPinVal+0x1de>
 8001830:	e001      	b.n	8001836 <MGPIO_setPinVal+0x1de>
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8001832:	2302      	movs	r3, #2
 8001834:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00
 8001854:	40021000 	.word	0x40021000
 8001858:	40021c00 	.word	0x40021c00

0800185c <MGPIO_SetAltFun>:
	}
	return ret;
}

EN_MGPIO_systemState_t MGPIO_SetAltFun (EN_MGPIO_portOptions_t copy_uddtPortName , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_altfnOptions_t Copy_uddtAltFun)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	460b      	mov	r3, r1
 8001868:	71bb      	strb	r3, [r7, #6]
 800186a:	4613      	mov	r3, r2
 800186c:	717b      	strb	r3, [r7, #5]
	if (copy_uddtPinNum <= 7U )
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	2b07      	cmp	r3, #7
 8001872:	d82d      	bhi.n	80018d0 <MGPIO_SetAltFun+0x74>
	{
		switch (copy_uddtPortName)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d01e      	beq.n	80018b8 <MGPIO_SetAltFun+0x5c>
 800187a:	2b02      	cmp	r3, #2
 800187c:	dc59      	bgt.n	8001932 <MGPIO_SetAltFun+0xd6>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <MGPIO_SetAltFun+0x2c>
 8001882:	2b01      	cmp	r3, #1
 8001884:	d00c      	beq.n	80018a0 <MGPIO_SetAltFun+0x44>
 8001886:	e054      	b.n	8001932 <MGPIO_SetAltFun+0xd6>
		{
			case MGPIO_PORTA : MGPIOA_PERIPHERAL->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <MGPIO_SetAltFun+0xe4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	7979      	ldrb	r1, [r7, #5]
 800188e:	79ba      	ldrb	r2, [r7, #6]
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	4611      	mov	r1, r2
 8001898:	4a29      	ldr	r2, [pc, #164]	; (8001940 <MGPIO_SetAltFun+0xe4>)
 800189a:	430b      	orrs	r3, r1
 800189c:	6213      	str	r3, [r2, #32]
 800189e:	e048      	b.n	8001932 <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTB : MGPIOB_PERIPHERAL->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <MGPIO_SetAltFun+0xe8>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	7979      	ldrb	r1, [r7, #5]
 80018a6:	79ba      	ldrb	r2, [r7, #6]
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	fa01 f202 	lsl.w	r2, r1, r2
 80018ae:	4611      	mov	r1, r2
 80018b0:	4a24      	ldr	r2, [pc, #144]	; (8001944 <MGPIO_SetAltFun+0xe8>)
 80018b2:	430b      	orrs	r3, r1
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	e03c      	b.n	8001932 <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTC : MGPIOC_PERIPHERAL->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <MGPIO_SetAltFun+0xec>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	7979      	ldrb	r1, [r7, #5]
 80018be:	79ba      	ldrb	r2, [r7, #6]
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	fa01 f202 	lsl.w	r2, r1, r2
 80018c6:	4611      	mov	r1, r2
 80018c8:	4a1f      	ldr	r2, [pc, #124]	; (8001948 <MGPIO_SetAltFun+0xec>)
 80018ca:	430b      	orrs	r3, r1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	e030      	b.n	8001932 <MGPIO_SetAltFun+0xd6>
		}
	}

	else  if (copy_uddtPinNum <= 15U )
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	2b0f      	cmp	r3, #15
 80018d4:	d82d      	bhi.n	8001932 <MGPIO_SetAltFun+0xd6>
	{
		switch (copy_uddtPortName)
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d01e      	beq.n	800191a <MGPIO_SetAltFun+0xbe>
 80018dc:	2b02      	cmp	r3, #2
 80018de:	dc28      	bgt.n	8001932 <MGPIO_SetAltFun+0xd6>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <MGPIO_SetAltFun+0x8e>
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d00c      	beq.n	8001902 <MGPIO_SetAltFun+0xa6>
 80018e8:	e023      	b.n	8001932 <MGPIO_SetAltFun+0xd6>
		{
			case MGPIO_PORTA : MGPIOA_PERIPHERAL->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MGPIO_SetAltFun+0xe4>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	7979      	ldrb	r1, [r7, #5]
 80018f0:	79ba      	ldrb	r2, [r7, #6]
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	4611      	mov	r1, r2
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <MGPIO_SetAltFun+0xe4>)
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6253      	str	r3, [r2, #36]	; 0x24
 8001900:	e017      	b.n	8001932 <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTB : MGPIOB_PERIPHERAL->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MGPIO_SetAltFun+0xe8>)
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	7979      	ldrb	r1, [r7, #5]
 8001908:	79ba      	ldrb	r2, [r7, #6]
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	4611      	mov	r1, r2
 8001912:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <MGPIO_SetAltFun+0xe8>)
 8001914:	430b      	orrs	r3, r1
 8001916:	6253      	str	r3, [r2, #36]	; 0x24
 8001918:	e00b      	b.n	8001932 <MGPIO_SetAltFun+0xd6>

			case MGPIO_PORTC : MGPIOC_PERIPHERAL->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum))  ; break ;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MGPIO_SetAltFun+0xec>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	7979      	ldrb	r1, [r7, #5]
 8001920:	79ba      	ldrb	r2, [r7, #6]
 8001922:	0092      	lsls	r2, r2, #2
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	4611      	mov	r1, r2
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <MGPIO_SetAltFun+0xec>)
 800192c:	430b      	orrs	r3, r1
 800192e:	6253      	str	r3, [r2, #36]	; 0x24
 8001930:	bf00      	nop
	else
	{
		// report error
	}

}
 8001932:	bf00      	nop
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40020000 	.word	0x40020000
 8001944:	40020400 	.word	0x40020400
 8001948:	40020800 	.word	0x40020800

0800194c <MRCC_Init>:

#include "../../../Inc/MCAL/rcc/rcc_interface.h"


EN_MRCC_systemState_t MRCC_Init(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
	EN_MRCC_systemState_t ret = MRCC_NOK;
 8001952:	2301      	movs	r3, #1
 8001954:	71fb      	strb	r3, [r7, #7]

		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFFFFFC ) | (sysClkSelect << SW0_BIT));
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MRCC_Init+0x48>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <MRCC_Init+0x48>)
 800195c:	f023 0303 	bic.w	r3, r3, #3
 8001960:	6093      	str	r3, [r2, #8]

		if(sysClkSelect == MRCC_SYS_CLK_HSI )
		{
			SET_BIT(MRCC_PERIPHERAL->RCC_CR_REG , HSION_BIT );
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MRCC_Init+0x48>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <MRCC_Init+0x48>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6013      	str	r3, [r2, #0]
			ret = MRCC_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	71fb      	strb	r3, [r7, #7]
		}
		else
		{
			ret = MRCC_INVALID_PARAMTER;
		}
		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFF030F )
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MRCC_Init+0x48>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800197a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <MRCC_Init+0x48>)
						|(ahbPrescaler << HPRE0_BIT)
						|(apbLowSpeedPrescaler << PPRE10_BIT)
						|(apbHighSpeedPrescaler << PPRE20_BIT));
 8001980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFF030F )
 8001984:	6093      	str	r3, [r2, #8]
	return ret;
 8001986:	79fb      	ldrb	r3, [r7, #7]
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40023800 	.word	0x40023800

08001998 <MRCC_enablePeripheral>:


EN_MRCC_systemState_t MRCC_enablePeripheral(EN_MRCC_busOptions_t busSelection,EN_MRCC_peripheralOptions_t PeripheralNumber)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	460a      	mov	r2, r1
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71bb      	strb	r3, [r7, #6]
	EN_MRCC_systemState_t ret = MRCC_NOK;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
	if((busSelection >=0 && busSelection <=4 ) && (PeripheralNumber >=0 && PeripheralNumber <= 31))
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d848      	bhi.n	8001a44 <MRCC_enablePeripheral+0xac>
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	2b1f      	cmp	r3, #31
 80019b6:	d845      	bhi.n	8001a44 <MRCC_enablePeripheral+0xac>
	{
		switch(busSelection)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d83e      	bhi.n	8001a3c <MRCC_enablePeripheral+0xa4>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <MRCC_enablePeripheral+0x2c>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019ef 	.word	0x080019ef
 80019cc:	08001a09 	.word	0x08001a09
 80019d0:	08001a23 	.word	0x08001a23
		{
			case MRCC_AHP1_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_AHB1ENR_REG , PeripheralNumber);
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <MRCC_enablePeripheral+0xc0>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	79ba      	ldrb	r2, [r7, #6]
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	4611      	mov	r1, r2
 80019e2:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <MRCC_enablePeripheral+0xc0>)
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6313      	str	r3, [r2, #48]	; 0x30
				ret = MRCC_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
				break;
 80019ec:	e029      	b.n	8001a42 <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_AHP2_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_AHB2ENR_REG , PeripheralNumber);
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MRCC_enablePeripheral+0xc0>)
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	79ba      	ldrb	r2, [r7, #6]
 80019f4:	2101      	movs	r1, #1
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	4611      	mov	r1, r2
 80019fc:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <MRCC_enablePeripheral+0xc0>)
 80019fe:	430b      	orrs	r3, r1
 8001a00:	6353      	str	r3, [r2, #52]	; 0x34
				ret = MRCC_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
				break;
 8001a06:	e01c      	b.n	8001a42 <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_APB1_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_APB1ENR_REG , PeripheralNumber);
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MRCC_enablePeripheral+0xc0>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	79ba      	ldrb	r2, [r7, #6]
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f202 	lsl.w	r2, r1, r2
 8001a14:	4611      	mov	r1, r2
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <MRCC_enablePeripheral+0xc0>)
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
				ret = MRCC_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
				break;
 8001a20:	e00f      	b.n	8001a42 <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_APB2_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_APB2ENR_REG , PeripheralNumber);
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <MRCC_enablePeripheral+0xc0>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	79ba      	ldrb	r2, [r7, #6]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <MRCC_enablePeripheral+0xc0>)
 8001a32:	430b      	orrs	r3, r1
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
				ret = MRCC_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
				break;
 8001a3a:	e002      	b.n	8001a42 <MRCC_enablePeripheral+0xaa>
			}
			default :
			{
				ret = MRCC_INVALID_PARAMTER;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	73fb      	strb	r3, [r7, #15]
		switch(busSelection)
 8001a40:	e002      	b.n	8001a48 <MRCC_enablePeripheral+0xb0>
 8001a42:	e001      	b.n	8001a48 <MRCC_enablePeripheral+0xb0>
			}
		}
	}
	else
	{
		ret = MRCC_INVALID_PARAMTER;
 8001a44:	2303      	movs	r3, #3
 8001a46:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <SysTick_Handler>:
	return ret;
}


void SysTick_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
	if(PTR_NULL != pfForStkCallBack)
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <SysTick_Handler+0x6c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d02a      	beq.n	8001ac0 <SysTick_Handler+0x64>
	{
		uint8_t u8TempForFlagReading = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	71fb      	strb	r3, [r7, #7]
		if(g_u8intervalMode == MSTK_IntervalSingle)
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <SysTick_Handler+0x70>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d116      	bne.n	8001aa4 <SysTick_Handler+0x48>
		{
			u8TempForFlagReading = GET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_COUNTFLAG_BIT);
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <SysTick_Handler+0x74>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	0c1b      	lsrs	r3, r3, #16
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	71fb      	strb	r3, [r7, #7]
			pfForStkCallBack();
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <SysTick_Handler+0x6c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4798      	blx	r3
			CLR_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_ENABLE_BIT);
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <SysTick_Handler+0x74>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <SysTick_Handler+0x74>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6013      	str	r3, [r2, #0]
			MSTK_PERIPHERAL->MSTK_STK_LOAD = 0;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <SysTick_Handler+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
			MSTK_PERIPHERAL->MSTK_STK_VAL = 0;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <SysTick_Handler+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
	}
	else
	{
		/* Do Nothing */
	}
}
 8001aa2:	e00d      	b.n	8001ac0 <SysTick_Handler+0x64>
		else if(g_u8intervalMode == MSTK_IntervalPeriodic)
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <SysTick_Handler+0x70>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d109      	bne.n	8001ac0 <SysTick_Handler+0x64>
			u8TempForFlagReading = GET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_COUNTFLAG_BIT);
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <SysTick_Handler+0x74>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
			pfForStkCallBack();
 8001aba:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <SysTick_Handler+0x6c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4798      	blx	r3
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000008c 	.word	0x2000008c
 8001acc:	20000090 	.word	0x20000090
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <MTMR_vStartTimer>:

#include "../../../Inc/MCAL/tmr/tmr_interface.h"


void 	 MTMR_vStartTimer(EN_MTMR_number_t copy_uddtTMRNumber)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
	switch(copy_uddtTMRNumber)
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d829      	bhi.n	8001b38 <MTMR_vStartTimer+0x64>
 8001ae4:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <MTMR_vStartTimer+0x18>)
 8001ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aea:	bf00      	nop
 8001aec:	08001afd 	.word	0x08001afd
 8001af0:	08001b0f 	.word	0x08001b0f
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	08001b2b 	.word	0x08001b2b
	{
	case MTMR2:
		SET_BIT(MTMR2_PERIPHERAL -> MTMRx_CR1, CEN_BIT); break;
 8001afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e015      	b.n	8001b3a <MTMR_vStartTimer+0x66>
	case MTMR3:
		SET_BIT(MTMR3_PERIPHERAL -> MTMRx_CR1, CEN_BIT); break;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MTMR_vStartTimer+0x74>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <MTMR_vStartTimer+0x74>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00e      	b.n	8001b3a <MTMR_vStartTimer+0x66>
	case MTMR4:
		SET_BIT(MTMR4_PERIPHERAL -> MTMRx_CR1, CEN_BIT); break;
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MTMR_vStartTimer+0x78>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <MTMR_vStartTimer+0x78>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e007      	b.n	8001b3a <MTMR_vStartTimer+0x66>
	case MTMR5:
		SET_BIT(MTMR5_PERIPHERAL -> MTMRx_CR1, CEN_BIT); break;
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MTMR_vStartTimer+0x7c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <MTMR_vStartTimer+0x7c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e000      	b.n	8001b3a <MTMR_vStartTimer+0x66>

	default:                               break;
 8001b38:	bf00      	nop
	}
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	40000c00 	.word	0x40000c00

08001b54 <MTMR_vSetTimerPrescaler>:
	}
}


void 	 MTMR_vSetTimerPrescaler(EN_MTMR_number_t copy_uddtTMRNumber, uint16_t copy_u16Value)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460a      	mov	r2, r1
 8001b5e:	71fb      	strb	r3, [r7, #7]
 8001b60:	4613      	mov	r3, r2
 8001b62:	80bb      	strh	r3, [r7, #4]
	switch(copy_uddtTMRNumber)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d83d      	bhi.n	8001be6 <MTMR_vSetTimerPrescaler+0x92>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <MTMR_vSetTimerPrescaler+0x1c>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b9f 	.word	0x08001b9f
 8001b78:	08001bb7 	.word	0x08001bb7
 8001b7c:	08001bcf 	.word	0x08001bcf
	{
	case MTMR2:
		CLR_ALL_BITS(MTMR2_PERIPHERAL -> MTMRx_PSC);
 8001b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b84:	2200      	movs	r2, #0
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
		MTMR2_PERIPHERAL -> MTMRx_PSC |= copy_u16Value - 1;
 8001b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	88ba      	ldrh	r2, [r7, #4]
 8001b90:	3a01      	subs	r2, #1
 8001b92:	4611      	mov	r1, r2
 8001b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8001b9c:	e024      	b.n	8001be8 <MTMR_vSetTimerPrescaler+0x94>
	case MTMR3:
		CLR_ALL_BITS(MTMR3_PERIPHERAL -> MTMRx_PSC);
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MTMR_vSetTimerPrescaler+0xa0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
		MTMR3_PERIPHERAL -> MTMRx_PSC |= copy_u16Value - 1;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <MTMR_vSetTimerPrescaler+0xa0>)
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	88ba      	ldrh	r2, [r7, #4]
 8001baa:	3a01      	subs	r2, #1
 8001bac:	4611      	mov	r1, r2
 8001bae:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <MTMR_vSetTimerPrescaler+0xa0>)
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8001bb4:	e018      	b.n	8001be8 <MTMR_vSetTimerPrescaler+0x94>
	case MTMR4:
		CLR_ALL_BITS(MTMR4_PERIPHERAL -> MTMRx_PSC);
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MTMR_vSetTimerPrescaler+0xa4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
		MTMR4_PERIPHERAL -> MTMRx_PSC |= copy_u16Value - 1;
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MTMR_vSetTimerPrescaler+0xa4>)
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	88ba      	ldrh	r2, [r7, #4]
 8001bc2:	3a01      	subs	r2, #1
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <MTMR_vSetTimerPrescaler+0xa4>)
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8001bcc:	e00c      	b.n	8001be8 <MTMR_vSetTimerPrescaler+0x94>
	case MTMR5:
		CLR_ALL_BITS(MTMR5_PERIPHERAL -> MTMRx_PSC);
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MTMR_vSetTimerPrescaler+0xa8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
		MTMR5_PERIPHERAL -> MTMRx_PSC |= copy_u16Value - 1;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MTMR_vSetTimerPrescaler+0xa8>)
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	88ba      	ldrh	r2, [r7, #4]
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <MTMR_vSetTimerPrescaler+0xa8>)
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8001be4:	e000      	b.n	8001be8 <MTMR_vSetTimerPrescaler+0x94>
	default:                               break;
 8001be6:	bf00      	nop
	}
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	40000c00 	.word	0x40000c00

08001c00 <MTMR_vSetTimerChannelOutput>:
}



void 	 MTMR_vSetTimerChannelOutput(EN_MTMR_number_t copy_uddtTMRNumber, EN_MTMR_selectedMode_t copy_uddtTimerMode, EN_MTMR_channel_t copy_uddtChannelNumber)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	71bb      	strb	r3, [r7, #6]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	717b      	strb	r3, [r7, #5]
	switch(copy_uddtTMRNumber)
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d147      	bne.n	8001ca8 <MTMR_vSetTimerChannelOutput+0xa8>
	{
	case MTMR2:
		switch(copy_uddtChannelNumber)
 8001c18:	797b      	ldrb	r3, [r7, #5]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d845      	bhi.n	8001cac <MTMR_vSetTimerChannelOutput+0xac>
 8001c20:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <MTMR_vSetTimerChannelOutput+0x28>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c39 	.word	0x08001c39
 8001c2c:	08001ca5 	.word	0x08001ca5
 8001c30:	08001c6f 	.word	0x08001c6f
 8001c34:	08001ca5 	.word	0x08001ca5
		{
		case MTMR_CH1:
			CLR_BITS(MTMR2_PERIPHERAL -> MTMRx_CCMR1, 0x00000073);
 8001c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c42:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001c46:	6193      	str	r3, [r2, #24]
			MTMR2_PERIPHERAL -> MTMRx_CCMR1 |= (copy_uddtTimerMode << OC1M_SHIFT);
 8001c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	79ba      	ldrb	r2, [r7, #6]
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	4611      	mov	r1, r2
 8001c54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	6193      	str	r3, [r2, #24]
			SET_BIT(MTMR2_PERIPHERAL -> MTMRx_CCER, CC1EN_BIT);
 8001c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
			break;
 8001c6c:	e01b      	b.n	8001ca6 <MTMR_vSetTimerChannelOutput+0xa6>
		case MTMR_CH2:	break;
		case MTMR_CH3:
			CLR_BITS(MTMR2_PERIPHERAL -> MTMRx_CCMR2, 0x00000073);
 8001c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c78:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001c7c:	61d3      	str	r3, [r2, #28]
			MTMR2_PERIPHERAL -> MTMRx_CCMR2 |= (copy_uddtTimerMode << OC1M_SHIFT);
 8001c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	79ba      	ldrb	r2, [r7, #6]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	4611      	mov	r1, r2
 8001c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	61d3      	str	r3, [r2, #28]
			SET_BIT(MTMR2_PERIPHERAL -> MTMRx_CCER, 8);
 8001c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca0:	6213      	str	r3, [r2, #32]
			break;
 8001ca2:	e000      	b.n	8001ca6 <MTMR_vSetTimerChannelOutput+0xa6>
		case MTMR_CH2:	break;
 8001ca4:	bf00      	nop
		case MTMR_CH4:	break;
		}
		break;
 8001ca6:	e001      	b.n	8001cac <MTMR_vSetTimerChannelOutput+0xac>
		default:                               break;
 8001ca8:	bf00      	nop
 8001caa:	e000      	b.n	8001cae <MTMR_vSetTimerChannelOutput+0xae>
		break;
 8001cac:	bf00      	nop
	}
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <MTMR_vSetTimerCMPVal>:

void 	 MTMR_vSetTimerCMPVal(EN_MTMR_number_t copy_uddtTMRNumber, EN_MTMR_channel_t copy_uddtChannelNumber, uint32_t copy_u32CmpValue)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	603a      	str	r2, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	71bb      	strb	r3, [r7, #6]
	switch(copy_uddtTMRNumber)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d123      	bne.n	8001d1a <MTMR_vSetTimerCMPVal+0x5e>
	{
	case MTMR2:
		switch(copy_uddtChannelNumber)
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d821      	bhi.n	8001d1e <MTMR_vSetTimerCMPVal+0x62>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <MTMR_vSetTimerCMPVal+0x24>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001cfb 	.word	0x08001cfb
 8001ce8:	08001d05 	.word	0x08001d05
 8001cec:	08001d0f 	.word	0x08001d0f
		{
		case MTMR_CH1:
			MTMR2_PERIPHERAL -> MTMRx_CCR1 = copy_u32CmpValue;
 8001cf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8001cf8:	e00e      	b.n	8001d18 <MTMR_vSetTimerCMPVal+0x5c>
		case MTMR_CH2:
			MTMR2_PERIPHERAL -> MTMRx_CCR2 = copy_u32CmpValue;
 8001cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8001d02:	e009      	b.n	8001d18 <MTMR_vSetTimerCMPVal+0x5c>
		case MTMR_CH3:
			MTMR2_PERIPHERAL -> MTMRx_CCR3 = copy_u32CmpValue;
 8001d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8001d0c:	e004      	b.n	8001d18 <MTMR_vSetTimerCMPVal+0x5c>
		case MTMR_CH4:
			MTMR2_PERIPHERAL -> MTMRx_CCR4 = copy_u32CmpValue;
 8001d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8001d16:	bf00      	nop
		}
		break;
 8001d18:	e001      	b.n	8001d1e <MTMR_vSetTimerCMPVal+0x62>
		default:                               break;
 8001d1a:	bf00      	nop
 8001d1c:	e000      	b.n	8001d20 <MTMR_vSetTimerCMPVal+0x64>
		break;
 8001d1e:	bf00      	nop
	}
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <MTMR_vSetTimerARR>:




void 	 MTMR_vSetTimerARR(EN_MTMR_number_t copy_uddtTMRNumber, uint32_t copy_u32Value)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
	switch(copy_uddtTMRNumber)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d00f      	beq.n	8001d5e <MTMR_vSetTimerARR+0x32>
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	dc11      	bgt.n	8001d66 <MTMR_vSetTimerARR+0x3a>
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <MTMR_vSetTimerARR+0x20>
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d005      	beq.n	8001d56 <MTMR_vSetTimerARR+0x2a>
		MTMR3_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
		break;
	case MTMR5:
		MTMR5_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
		break;
	default:                               break;
 8001d4a:	e00c      	b.n	8001d66 <MTMR_vSetTimerARR+0x3a>
		MTMR2_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
 8001d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 8001d54:	e008      	b.n	8001d68 <MTMR_vSetTimerARR+0x3c>
		MTMR3_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <MTMR_vSetTimerARR+0x48>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 8001d5c:	e004      	b.n	8001d68 <MTMR_vSetTimerARR+0x3c>
		MTMR5_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
 8001d5e:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <MTMR_vSetTimerARR+0x4c>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 8001d64:	e000      	b.n	8001d68 <MTMR_vSetTimerARR+0x3c>
	default:                               break;
 8001d66:	bf00      	nop
	}
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40000c00 	.word	0x40000c00
 8001d7c:	00000000 	.word	0x00000000

08001d80 <MUSART_uddtInit>:

#include "../../../Inc/MCAL/usart/usart_interface.h"


EN_MUSART_systeamState_t MUSART_uddtInit(ST_MUART_RegistersMap_t *PS_USARTx , ST_MUSART_cfg_t const *PS_uddtUartCfg)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
	if(PS_uddtUartCfg != PTR_NULL && PS_USARTx != PTR_NULL)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 8145 	beq.w	8002020 <MUSART_uddtInit+0x2a0>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8141 	beq.w	8002020 <MUSART_uddtInit+0x2a0>
	{
		switch (PS_uddtUartCfg->copy_uddtSamplingModeOption)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	785b      	ldrb	r3, [r3, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <MUSART_uddtInit+0x2c>
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d072      	beq.n	8001e90 <MUSART_uddtInit+0x110>
 8001daa:	e0e1      	b.n	8001f70 <MUSART_uddtInit+0x1f0>
		{
			case MUSART_SAMPLING_BY_16 : PS_USARTx->MUSART_BRR = UART_BRR_SAMPLING16(__PCLK__,PS_uddtUartCfg->copy_uddtBuadRateOption); break;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fb53 	bl	800045c <__aeabi_ui2d>
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	4b9f      	ldr	r3, [pc, #636]	; (8002038 <MUSART_uddtInit+0x2b8>)
 8001dbc:	f7fe fbc8 	bl	8000550 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	a19a      	add	r1, pc, #616	; (adr r1, 8002030 <MUSART_uddtInit+0x2b0>)
 8001dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dca:	f7fe fceb 	bl	80007a4 <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe fdcd 	bl	8000974 <__aeabi_d2uiz>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a97      	ldr	r2, [pc, #604]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	011c      	lsls	r4, r3, #4
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb36 	bl	800045c <__aeabi_ui2d>
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b90      	ldr	r3, [pc, #576]	; (8002038 <MUSART_uddtInit+0x2b8>)
 8001df6:	f7fe fbab 	bl	8000550 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	a18c      	add	r1, pc, #560	; (adr r1, 8002030 <MUSART_uddtInit+0x2b0>)
 8001e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e04:	f7fe fcce 	bl	80007a4 <__aeabi_ddiv>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fdb0 	bl	8000974 <__aeabi_d2uiz>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b89      	ldr	r3, [pc, #548]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001e18:	fba3 1302 	umull	r1, r3, r3, r2
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	2164      	movs	r1, #100	; 0x64
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	3332      	adds	r3, #50	; 0x32
 8001e2a:	4a84      	ldr	r2, [pc, #528]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e36:	441c      	add	r4, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb0d 	bl	800045c <__aeabi_ui2d>
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <MUSART_uddtInit+0x2b8>)
 8001e48:	f7fe fb82 	bl	8000550 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	a177      	add	r1, pc, #476	; (adr r1, 8002030 <MUSART_uddtInit+0x2b0>)
 8001e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e56:	f7fe fca5 	bl	80007a4 <__aeabi_ddiv>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fd87 	bl	8000974 <__aeabi_d2uiz>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b74      	ldr	r3, [pc, #464]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2164      	movs	r1, #100	; 0x64
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	3332      	adds	r3, #50	; 0x32
 8001e7c:	4a6f      	ldr	r2, [pc, #444]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	18e2      	adds	r2, r4, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	e06f      	b.n	8001f70 <MUSART_uddtInit+0x1f0>
			case MUSART_SAMPLING_BY_8  : PS_USARTx->MUSART_BRR = UART_BRR_SAMPLING8(__PCLK__,PS_uddtUartCfg->copy_uddtBuadRateOption); break;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fae1 	bl	800045c <__aeabi_ui2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	f7fe f9a1 	bl	80001e4 <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	a162      	add	r1, pc, #392	; (adr r1, 8002030 <MUSART_uddtInit+0x2b0>)
 8001ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eac:	f7fe fc7a 	bl	80007a4 <__aeabi_ddiv>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fd5c 	bl	8000974 <__aeabi_d2uiz>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4a5f      	ldr	r2, [pc, #380]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	011c      	lsls	r4, r3, #4
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fac5 	bl	800045c <__aeabi_ui2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	f7fe f985 	bl	80001e4 <__adddf3>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	a154      	add	r1, pc, #336	; (adr r1, 8002030 <MUSART_uddtInit+0x2b0>)
 8001ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ee4:	f7fe fc5e 	bl	80007a4 <__aeabi_ddiv>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fd40 	bl	8000974 <__aeabi_d2uiz>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b51      	ldr	r3, [pc, #324]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	2164      	movs	r1, #100	; 0x64
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	3332      	adds	r3, #50	; 0x32
 8001f0a:	4a4c      	ldr	r2, [pc, #304]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	095b      	lsrs	r3, r3, #5
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f18:	441c      	add	r4, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fa9c 	bl	800045c <__aeabi_ui2d>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	f7fe f95c 	bl	80001e4 <__adddf3>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	a13f      	add	r1, pc, #252	; (adr r1, 8002030 <MUSART_uddtInit+0x2b0>)
 8001f32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f36:	f7fe fc35 	bl	80007a4 <__aeabi_ddiv>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fd17 	bl	8000974 <__aeabi_d2uiz>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b3c      	ldr	r3, [pc, #240]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2164      	movs	r1, #100	; 0x64
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	3332      	adds	r3, #50	; 0x32
 8001f5c:	4a37      	ldr	r2, [pc, #220]	; (800203c <MUSART_uddtInit+0x2bc>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	18e2      	adds	r2, r4, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	bf00      	nop
		}

		PS_USARTx->MUSART_CR1 =  (PS_uddtUartCfg->copy_uddtSamplingModeOption << MUSART_CR1_OVER8_BIT)  |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	03da      	lsls	r2, r3, #15
					      	  	 (PS_uddtUartCfg->copy_HardwareFlowControl<<MUSART_CR1_UE_BIT)          |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	7b1b      	ldrb	r3, [r3, #12]
 8001f7a:	035b      	lsls	r3, r3, #13
		PS_USARTx->MUSART_CR1 =  (PS_uddtUartCfg->copy_uddtSamplingModeOption << MUSART_CR1_OVER8_BIT)  |
 8001f7c:	431a      	orrs	r2, r3
								 (PS_uddtUartCfg->copy_uddtDataSizeOption <<MUSART_CR1_M_BIT)           |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	7a1b      	ldrb	r3, [r3, #8]
 8001f82:	031b      	lsls	r3, r3, #12
					      	  	 (PS_uddtUartCfg->copy_HardwareFlowControl<<MUSART_CR1_UE_BIT)          |
 8001f84:	431a      	orrs	r2, r3
								 (PS_uddtUartCfg->copy_uddtParityControl <<MUSART_CR1_PCE_BIT)     		|
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	7a5b      	ldrb	r3, [r3, #9]
 8001f8a:	029b      	lsls	r3, r3, #10
								 (PS_uddtUartCfg->copy_uddtDataSizeOption <<MUSART_CR1_M_BIT)           |
 8001f8c:	431a      	orrs	r2, r3
								 (PS_uddtUartCfg->copy_uddtParitySelection <<MUSART_CR1_PS_BIT)    		;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	7a9b      	ldrb	r3, [r3, #10]
 8001f92:	025b      	lsls	r3, r3, #9
								 (PS_uddtUartCfg->copy_uddtParityControl <<MUSART_CR1_PCE_BIT)     		|
 8001f94:	4313      	orrs	r3, r2
 8001f96:	461a      	mov	r2, r3
		PS_USARTx->MUSART_CR1 =  (PS_uddtUartCfg->copy_uddtSamplingModeOption << MUSART_CR1_OVER8_BIT)  |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	60da      	str	r2, [r3, #12]

		switch (PS_uddtUartCfg->copy_uddtTransferDirection)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d014      	beq.n	8001fce <MUSART_uddtInit+0x24e>
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	dc1f      	bgt.n	8001fe8 <MUSART_uddtInit+0x268>
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <MUSART_uddtInit+0x232>
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d007      	beq.n	8001fc0 <MUSART_uddtInit+0x240>
 8001fb0:	e01a      	b.n	8001fe8 <MUSART_uddtInit+0x268>
		{
			case MUSART_TX_ONLY:   SET_BIT(PS_USARTx->MUSART_CR1, MUSART_CR1_TE_BIT); break;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f043 0208 	orr.w	r2, r3, #8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	e013      	b.n	8001fe8 <MUSART_uddtInit+0x268>
			case MUSART_RX_ONLY:   SET_BIT(PS_USARTx->MUSART_CR1, MUSART_CR1_RE_BIT); break;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	e00c      	b.n	8001fe8 <MUSART_uddtInit+0x268>
			case MUSART_TX_RX  :   SET_BIT(PS_USARTx->MUSART_CR1, MUSART_CR1_TE_BIT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f043 0208 	orr.w	r2, r3, #8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60da      	str	r2, [r3, #12]
						  	  	   SET_BIT(PS_USARTx->MUSART_CR1, MUSART_CR1_RE_BIT); break;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f043 0204 	orr.w	r2, r3, #4
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	bf00      	nop
		}
		PS_USARTx->MUSART_CR2 = (PS_uddtUartCfg->copy_uddtStopBitSelection<<MUSART_CR2_STOP_BIT)				  |
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	7adb      	ldrb	r3, [r3, #11]
 8001fec:	031a      	lsls	r2, r3, #12
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockOutput <<MUSART_CR2_CLKEN_BIT)       |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	7b5b      	ldrb	r3, [r3, #13]
 8001ff2:	02db      	lsls	r3, r3, #11
		PS_USARTx->MUSART_CR2 = (PS_uddtUartCfg->copy_uddtStopBitSelection<<MUSART_CR2_STOP_BIT)				  |
 8001ff4:	431a      	orrs	r2, r3
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockPhase <<MUSART_CR2_CPHA_BIT)         |
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	7bdb      	ldrb	r3, [r3, #15]
 8001ffa:	025b      	lsls	r3, r3, #9
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockOutput <<MUSART_CR2_CLKEN_BIT)       |
 8001ffc:	431a      	orrs	r2, r3
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockPolarity <<MUSART_CR2_CPOL_BIT)      |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	7b9b      	ldrb	r3, [r3, #14]
 8002002:	029b      	lsls	r3, r3, #10
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockPhase <<MUSART_CR2_CPHA_BIT)         |
 8002004:	431a      	orrs	r2, r3
								(PS_uddtUartCfg->copy_uddtUartClockInit.lastBitClockPulse <<MUSART_CR2_LBCL_BIT)  ;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7c1b      	ldrb	r3, [r3, #16]
 800200a:	021b      	lsls	r3, r3, #8
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockPolarity <<MUSART_CR2_CPOL_BIT)      |
 800200c:	4313      	orrs	r3, r2
 800200e:	461a      	mov	r2, r3
		PS_USARTx->MUSART_CR2 = (PS_uddtUartCfg->copy_uddtStopBitSelection<<MUSART_CR2_STOP_BIT)				  |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	611a      	str	r2, [r3, #16]

		PS_USARTx->MUSART_SR = 0																                  ;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]

		ret = MUSART_OK;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	e001      	b.n	8002024 <MUSART_uddtInit+0x2a4>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 8002020:	2302      	movs	r3, #2
 8002022:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	00000000 	.word	0x00000000
 8002034:	41a7d784 	.word	0x41a7d784
 8002038:	40100000 	.word	0x40100000
 800203c:	51eb851f 	.word	0x51eb851f

08002040 <MUSART_uddtEnable>:



EN_MUSART_systeamState_t MUSART_uddtEnable(ST_MUART_RegistersMap_t *PS_USARTx)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]

	if(PS_USARTx != PTR_NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <MUSART_uddtEnable+0x24>
	{
		SET_BIT(PS_USARTx->MUSART_CR1,MUSART_CR1_UE_BIT);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60da      	str	r2, [r3, #12]
		ret = MUSART_OK;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e001      	b.n	8002068 <MUSART_uddtEnable+0x28>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 8002064:	2302      	movs	r3, #2
 8002066:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <MUSART_uddtTransmitByte>:

	return ret;
}

EN_MUSART_systeamState_t MUSART_uddtTransmitByte(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t copy_u8ByteToSend)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	70fb      	strb	r3, [r7, #3]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]

	if(PS_USARTx != PTR_NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d019      	beq.n	80020c0 <MUSART_uddtTransmitByte+0x4a>
	{
		while (GET_BIT(PS_USARTx->MUSART_SR,MUSART_SR_TXE_BIT)==0);
 800208c:	bf00      	nop
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f9      	beq.n	800208e <MUSART_uddtTransmitByte+0x18>
		PS_USARTx->MUSART_DR = copy_u8ByteToSend;
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	605a      	str	r2, [r3, #4]
		while (GET_BIT(PS_USARTx->MUSART_SR,MUSART_SR_TC_BIT)==0);
 80020a0:	bf00      	nop
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f9      	beq.n	80020a2 <MUSART_uddtTransmitByte+0x2c>
		CLR_BIT(PS_USARTx->MUSART_SR,MUSART_SR_TC_BIT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
		ret = MUSART_OK;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e001      	b.n	80020c4 <MUSART_uddtTransmitByte+0x4e>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 80020c0:	2302      	movs	r3, #2
 80020c2:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <MUSART_uddtTransmitString>:

EN_MUSART_systeamState_t MUSART_uddtTransmitString(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8StringToSend)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]

	if(PS_USARTx != PTR_NULL && copy_u8StringToSend != PTR_NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d019      	beq.n	800211a <MUSART_uddtTransmitString+0x48>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d016      	beq.n	800211a <MUSART_uddtTransmitString+0x48>
	{
		uint32_t loc_u32Iterator = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
		while (copy_u8StringToSend[loc_u32Iterator] != STR_NULL)
 80020f0:	e00a      	b.n	8002108 <MUSART_uddtTransmitString+0x36>
		{
			MUSART_uddtTransmitByte(PS_USARTx, copy_u8StringToSend[loc_u32Iterator]);
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffba 	bl	8002076 <MUSART_uddtTransmitByte>
			loc_u32Iterator++;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3301      	adds	r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
		while (copy_u8StringToSend[loc_u32Iterator] != STR_NULL)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <MUSART_uddtTransmitString+0x20>
		}
		ret = MUSART_OK;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
	{
 8002118:	e001      	b.n	800211e <MUSART_uddtTransmitString+0x4c>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 800211a:	2302      	movs	r3, #2
 800211c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <MUSART_uddtReadDataRegister>:

EN_MUSART_systeamState_t MUSART_uddtReadDataRegister(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8ByteToReceive)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]

	if(PS_USARTx != PTR_NULL && copy_u8ByteToReceive!= PTR_NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d011      	beq.n	8002160 <MUSART_uddtReadDataRegister+0x38>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00e      	beq.n	8002160 <MUSART_uddtReadDataRegister+0x38>
	{
		while(GET_BIT(PS_USARTx->MUSART_SR , MUSART_SR_RXNE_BIT) == 0);
 8002142:	bf00      	nop
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f9      	beq.n	8002144 <MUSART_uddtReadDataRegister+0x1c>
		*copy_u8ByteToReceive = PS_USARTx->MUSART_DR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	701a      	strb	r2, [r3, #0]
		ret = MUSART_OK;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e001      	b.n	8002164 <MUSART_uddtReadDataRegister+0x3c>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 8002160:	2302      	movs	r3, #2
 8002162:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <MUSART_uddtReceiveByteSynchNonBlocking>:

	return ret;
}

EN_MUSART_systeamState_t MUSART_uddtReceiveByteSynchNonBlocking(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8ByteToReceive)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
	uint32_t loc_u32TimeOut = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]

	if(PS_USARTx != PTR_NULL && copy_u8ByteToReceive != PTR_NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <MUSART_uddtReceiveByteSynchNonBlocking+0x5a>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01d      	beq.n	80021ce <MUSART_uddtReceiveByteSynchNonBlocking+0x5a>
	{
		while ((GET_BIT(PS_USARTx->MUSART_SR,MUSART_SR_RXNE_BIT)==0) && (loc_u32TimeOut < THRESHOLD_VALUE) )
 8002192:	e002      	b.n	800219a <MUSART_uddtReceiveByteSynchNonBlocking+0x26>
		{
			loc_u32TimeOut++;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	3301      	adds	r3, #1
 8002198:	60bb      	str	r3, [r7, #8]
		while ((GET_BIT(PS_USARTx->MUSART_SR,MUSART_SR_RXNE_BIT)==0) && (loc_u32TimeOut < THRESHOLD_VALUE) )
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <MUSART_uddtReceiveByteSynchNonBlocking+0x3a>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <MUSART_uddtReceiveByteSynchNonBlocking+0x6c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d9f2      	bls.n	8002194 <MUSART_uddtReceiveByteSynchNonBlocking+0x20>
		}
		if (loc_u32TimeOut == THRESHOLD_VALUE)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <MUSART_uddtReceiveByteSynchNonBlocking+0x70>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d103      	bne.n	80021be <MUSART_uddtReceiveByteSynchNonBlocking+0x4a>
		{
			*copy_u8ByteToReceive = 255;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	22ff      	movs	r2, #255	; 0xff
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e004      	b.n	80021c8 <MUSART_uddtReceiveByteSynchNonBlocking+0x54>
		}
		else
		{
			*copy_u8ByteToReceive = PS_USARTx->MUSART_DR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	701a      	strb	r2, [r3, #0]
		}
		ret = MUSART_OK;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e001      	b.n	80021d2 <MUSART_uddtReceiveByteSynchNonBlocking+0x5e>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 80021ce:	2302      	movs	r3, #2
 80021d0:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	0007a11f 	.word	0x0007a11f
 80021e4:	0007a120 	.word	0x0007a120

080021e8 <MUSART_uddtReceiveStringAsynchBlocking>:

EN_MUSART_systeamState_t  MUSART_uddtReceiveStringAsynchBlocking (ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8ByteToReceive)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]

	if(PS_USARTx != PTR_NULL && copy_u8ByteToReceive != PTR_NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d024      	beq.n	8002246 <MUSART_uddtReceiveStringAsynchBlocking+0x5e>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d021      	beq.n	8002246 <MUSART_uddtReceiveStringAsynchBlocking+0x5e>
	{
		uint8_t loc_Iterator = 0 , loc_u8DataCome ;
 8002202:	2300      	movs	r3, #0
 8002204:	73bb      	strb	r3, [r7, #14]
		MUSART_uddtReadDataRegister(PS_USARTx , &loc_u8DataCome);
 8002206:	f107 030d 	add.w	r3, r7, #13
 800220a:	4619      	mov	r1, r3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff8b 	bl	8002128 <MUSART_uddtReadDataRegister>
		while(loc_u8DataCome != 13)
 8002212:	e00d      	b.n	8002230 <MUSART_uddtReceiveStringAsynchBlocking+0x48>
		{
			copy_u8ByteToReceive[ loc_Iterator ] = loc_u8DataCome ;
 8002214:	7bbb      	ldrb	r3, [r7, #14]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	4413      	add	r3, r2
 800221a:	7b7a      	ldrb	r2, [r7, #13]
 800221c:	701a      	strb	r2, [r3, #0]
			loc_Iterator++;
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	3301      	adds	r3, #1
 8002222:	73bb      	strb	r3, [r7, #14]
			MUSART_uddtReadDataRegister(PS_USARTx , &loc_u8DataCome);
 8002224:	f107 030d 	add.w	r3, r7, #13
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ff7c 	bl	8002128 <MUSART_uddtReadDataRegister>
		while(loc_u8DataCome != 13)
 8002230:	7b7b      	ldrb	r3, [r7, #13]
 8002232:	2b0d      	cmp	r3, #13
 8002234:	d1ee      	bne.n	8002214 <MUSART_uddtReceiveStringAsynchBlocking+0x2c>
		}

		copy_u8ByteToReceive[loc_Iterator] = '\0';
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	4413      	add	r3, r2
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
		ret = MUSART_OK;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
	{
 8002244:	e001      	b.n	800224a <MUSART_uddtReceiveStringAsynchBlocking+0x62>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 8002246:	2302      	movs	r3, #2
 8002248:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <main>:
 * @return
 */



void main(void) {
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0

	ACC_vSysInit();
 8002258:	f7fe fbac 	bl	80009b4 <ACC_vSysInit>
	ACC_vSysMangment();
 800225c:	f7fe fbf8 	bl	8000a50 <ACC_vSysMangment>

}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002264:	480d      	ldr	r0, [pc, #52]	; (800229c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800226e:	490d      	ldr	r1, [pc, #52]	; (80022a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <LoopForever+0xe>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002274:	e002      	b.n	800227c <LoopCopyDataInit>

08002276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227a:	3304      	adds	r3, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800227c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002280:	d3f9      	bcc.n	8002276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002284:	4c0a      	ldr	r4, [pc, #40]	; (80022b0 <LoopForever+0x16>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002288:	e001      	b.n	800228e <LoopFillZerobss>

0800228a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800228c:	3204      	adds	r2, #4

0800228e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002290:	d3fb      	bcc.n	800228a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002292:	f000 f8af 	bl	80023f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002296:	f7ff ffdd 	bl	8002254 <main>

0800229a <LoopForever>:

LoopForever:
  b LoopForever
 800229a:	e7fe      	b.n	800229a <LoopForever>
  ldr   r0, =_estack
 800229c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80022a8:	08002a14 	.word	0x08002a14
  ldr r2, =_sbss
 80022ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80022b0:	200001cc 	.word	0x200001cc

080022b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC_IRQHandler>

080022b6 <atoi>:
 80022b6:	220a      	movs	r2, #10
 80022b8:	2100      	movs	r1, #0
 80022ba:	f000 b883 	b.w	80023c4 <strtol>
	...

080022c0 <_strtol_l.constprop.0>:
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c6:	d001      	beq.n	80022cc <_strtol_l.constprop.0+0xc>
 80022c8:	2b24      	cmp	r3, #36	; 0x24
 80022ca:	d906      	bls.n	80022da <_strtol_l.constprop.0+0x1a>
 80022cc:	f000 f88c 	bl	80023e8 <__errno>
 80022d0:	2316      	movs	r3, #22
 80022d2:	6003      	str	r3, [r0, #0]
 80022d4:	2000      	movs	r0, #0
 80022d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80023c0 <_strtol_l.constprop.0+0x100>
 80022de:	460d      	mov	r5, r1
 80022e0:	462e      	mov	r6, r5
 80022e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80022e6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80022ea:	f017 0708 	ands.w	r7, r7, #8
 80022ee:	d1f7      	bne.n	80022e0 <_strtol_l.constprop.0+0x20>
 80022f0:	2c2d      	cmp	r4, #45	; 0x2d
 80022f2:	d132      	bne.n	800235a <_strtol_l.constprop.0+0x9a>
 80022f4:	782c      	ldrb	r4, [r5, #0]
 80022f6:	2701      	movs	r7, #1
 80022f8:	1cb5      	adds	r5, r6, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d05b      	beq.n	80023b6 <_strtol_l.constprop.0+0xf6>
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d109      	bne.n	8002316 <_strtol_l.constprop.0+0x56>
 8002302:	2c30      	cmp	r4, #48	; 0x30
 8002304:	d107      	bne.n	8002316 <_strtol_l.constprop.0+0x56>
 8002306:	782c      	ldrb	r4, [r5, #0]
 8002308:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800230c:	2c58      	cmp	r4, #88	; 0x58
 800230e:	d14d      	bne.n	80023ac <_strtol_l.constprop.0+0xec>
 8002310:	786c      	ldrb	r4, [r5, #1]
 8002312:	2310      	movs	r3, #16
 8002314:	3502      	adds	r5, #2
 8002316:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800231a:	f108 38ff 	add.w	r8, r8, #4294967295
 800231e:	f04f 0e00 	mov.w	lr, #0
 8002322:	fbb8 f9f3 	udiv	r9, r8, r3
 8002326:	4676      	mov	r6, lr
 8002328:	fb03 8a19 	mls	sl, r3, r9, r8
 800232c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002330:	f1bc 0f09 	cmp.w	ip, #9
 8002334:	d816      	bhi.n	8002364 <_strtol_l.constprop.0+0xa4>
 8002336:	4664      	mov	r4, ip
 8002338:	42a3      	cmp	r3, r4
 800233a:	dd24      	ble.n	8002386 <_strtol_l.constprop.0+0xc6>
 800233c:	f1be 3fff 	cmp.w	lr, #4294967295
 8002340:	d008      	beq.n	8002354 <_strtol_l.constprop.0+0x94>
 8002342:	45b1      	cmp	r9, r6
 8002344:	d31c      	bcc.n	8002380 <_strtol_l.constprop.0+0xc0>
 8002346:	d101      	bne.n	800234c <_strtol_l.constprop.0+0x8c>
 8002348:	45a2      	cmp	sl, r4
 800234a:	db19      	blt.n	8002380 <_strtol_l.constprop.0+0xc0>
 800234c:	fb06 4603 	mla	r6, r6, r3, r4
 8002350:	f04f 0e01 	mov.w	lr, #1
 8002354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002358:	e7e8      	b.n	800232c <_strtol_l.constprop.0+0x6c>
 800235a:	2c2b      	cmp	r4, #43	; 0x2b
 800235c:	bf04      	itt	eq
 800235e:	782c      	ldrbeq	r4, [r5, #0]
 8002360:	1cb5      	addeq	r5, r6, #2
 8002362:	e7ca      	b.n	80022fa <_strtol_l.constprop.0+0x3a>
 8002364:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002368:	f1bc 0f19 	cmp.w	ip, #25
 800236c:	d801      	bhi.n	8002372 <_strtol_l.constprop.0+0xb2>
 800236e:	3c37      	subs	r4, #55	; 0x37
 8002370:	e7e2      	b.n	8002338 <_strtol_l.constprop.0+0x78>
 8002372:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002376:	f1bc 0f19 	cmp.w	ip, #25
 800237a:	d804      	bhi.n	8002386 <_strtol_l.constprop.0+0xc6>
 800237c:	3c57      	subs	r4, #87	; 0x57
 800237e:	e7db      	b.n	8002338 <_strtol_l.constprop.0+0x78>
 8002380:	f04f 3eff 	mov.w	lr, #4294967295
 8002384:	e7e6      	b.n	8002354 <_strtol_l.constprop.0+0x94>
 8002386:	f1be 3fff 	cmp.w	lr, #4294967295
 800238a:	d105      	bne.n	8002398 <_strtol_l.constprop.0+0xd8>
 800238c:	2322      	movs	r3, #34	; 0x22
 800238e:	6003      	str	r3, [r0, #0]
 8002390:	4646      	mov	r6, r8
 8002392:	b942      	cbnz	r2, 80023a6 <_strtol_l.constprop.0+0xe6>
 8002394:	4630      	mov	r0, r6
 8002396:	e79e      	b.n	80022d6 <_strtol_l.constprop.0+0x16>
 8002398:	b107      	cbz	r7, 800239c <_strtol_l.constprop.0+0xdc>
 800239a:	4276      	negs	r6, r6
 800239c:	2a00      	cmp	r2, #0
 800239e:	d0f9      	beq.n	8002394 <_strtol_l.constprop.0+0xd4>
 80023a0:	f1be 0f00 	cmp.w	lr, #0
 80023a4:	d000      	beq.n	80023a8 <_strtol_l.constprop.0+0xe8>
 80023a6:	1e69      	subs	r1, r5, #1
 80023a8:	6011      	str	r1, [r2, #0]
 80023aa:	e7f3      	b.n	8002394 <_strtol_l.constprop.0+0xd4>
 80023ac:	2430      	movs	r4, #48	; 0x30
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1b1      	bne.n	8002316 <_strtol_l.constprop.0+0x56>
 80023b2:	2308      	movs	r3, #8
 80023b4:	e7af      	b.n	8002316 <_strtol_l.constprop.0+0x56>
 80023b6:	2c30      	cmp	r4, #48	; 0x30
 80023b8:	d0a5      	beq.n	8002306 <_strtol_l.constprop.0+0x46>
 80023ba:	230a      	movs	r3, #10
 80023bc:	e7ab      	b.n	8002316 <_strtol_l.constprop.0+0x56>
 80023be:	bf00      	nop
 80023c0:	0800290a 	.word	0x0800290a

080023c4 <strtol>:
 80023c4:	4613      	mov	r3, r2
 80023c6:	460a      	mov	r2, r1
 80023c8:	4601      	mov	r1, r0
 80023ca:	4802      	ldr	r0, [pc, #8]	; (80023d4 <strtol+0x10>)
 80023cc:	6800      	ldr	r0, [r0, #0]
 80023ce:	f7ff bf77 	b.w	80022c0 <_strtol_l.constprop.0>
 80023d2:	bf00      	nop
 80023d4:	20000068 	.word	0x20000068

080023d8 <memset>:
 80023d8:	4402      	add	r2, r0
 80023da:	4603      	mov	r3, r0
 80023dc:	4293      	cmp	r3, r2
 80023de:	d100      	bne.n	80023e2 <memset+0xa>
 80023e0:	4770      	bx	lr
 80023e2:	f803 1b01 	strb.w	r1, [r3], #1
 80023e6:	e7f9      	b.n	80023dc <memset+0x4>

080023e8 <__errno>:
 80023e8:	4b01      	ldr	r3, [pc, #4]	; (80023f0 <__errno+0x8>)
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000068 	.word	0x20000068

080023f4 <__libc_init_array>:
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	4d0d      	ldr	r5, [pc, #52]	; (800242c <__libc_init_array+0x38>)
 80023f8:	4c0d      	ldr	r4, [pc, #52]	; (8002430 <__libc_init_array+0x3c>)
 80023fa:	1b64      	subs	r4, r4, r5
 80023fc:	10a4      	asrs	r4, r4, #2
 80023fe:	2600      	movs	r6, #0
 8002400:	42a6      	cmp	r6, r4
 8002402:	d109      	bne.n	8002418 <__libc_init_array+0x24>
 8002404:	4d0b      	ldr	r5, [pc, #44]	; (8002434 <__libc_init_array+0x40>)
 8002406:	4c0c      	ldr	r4, [pc, #48]	; (8002438 <__libc_init_array+0x44>)
 8002408:	f000 f826 	bl	8002458 <_init>
 800240c:	1b64      	subs	r4, r4, r5
 800240e:	10a4      	asrs	r4, r4, #2
 8002410:	2600      	movs	r6, #0
 8002412:	42a6      	cmp	r6, r4
 8002414:	d105      	bne.n	8002422 <__libc_init_array+0x2e>
 8002416:	bd70      	pop	{r4, r5, r6, pc}
 8002418:	f855 3b04 	ldr.w	r3, [r5], #4
 800241c:	4798      	blx	r3
 800241e:	3601      	adds	r6, #1
 8002420:	e7ee      	b.n	8002400 <__libc_init_array+0xc>
 8002422:	f855 3b04 	ldr.w	r3, [r5], #4
 8002426:	4798      	blx	r3
 8002428:	3601      	adds	r6, #1
 800242a:	e7f2      	b.n	8002412 <__libc_init_array+0x1e>
 800242c:	08002a0c 	.word	0x08002a0c
 8002430:	08002a0c 	.word	0x08002a0c
 8002434:	08002a0c 	.word	0x08002a0c
 8002438:	08002a10 	.word	0x08002a10

0800243c <memcpy>:
 800243c:	440a      	add	r2, r1
 800243e:	4291      	cmp	r1, r2
 8002440:	f100 33ff 	add.w	r3, r0, #4294967295
 8002444:	d100      	bne.n	8002448 <memcpy+0xc>
 8002446:	4770      	bx	lr
 8002448:	b510      	push	{r4, lr}
 800244a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800244e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002452:	4291      	cmp	r1, r2
 8002454:	d1f9      	bne.n	800244a <memcpy+0xe>
 8002456:	bd10      	pop	{r4, pc}

08002458 <_init>:
 8002458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245a:	bf00      	nop
 800245c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245e:	bc08      	pop	{r3}
 8002460:	469e      	mov	lr, r3
 8002462:	4770      	bx	lr

08002464 <_fini>:
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	bf00      	nop
 8002468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246a:	bc08      	pop	{r3}
 800246c:	469e      	mov	lr, r3
 800246e:	4770      	bx	lr
