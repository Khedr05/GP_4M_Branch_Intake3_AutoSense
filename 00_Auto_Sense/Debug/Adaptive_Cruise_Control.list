
Adaptive_Cruise_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800335c  0800335c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  0800335c  0800335c  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800335c  0800335c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  2000003c  080033a0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080033a0  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005427  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010ee  00000000  00000000  000254d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004b0  00000000  00000000  000265c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000357  00000000  00000000  00026a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027ef  00000000  00000000  00026dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006626  00000000  00000000  000295be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b2de  00000000  00000000  0002fbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001104  00000000  00000000  0003aec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0003bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000003c 	.word	0x2000003c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002be0 	.word	0x08002be0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000040 	.word	0x20000040
 80001d4:	08002be0 	.word	0x08002be0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <AACC_vSetSpeedLimit>:
static uint8_t gl_u8AccSpeedLimit = 0;
static uint8_t gl_u8LastSpeed = 0;
static uint8_t gl_u8MotorFlag = 0;

void AACC_vSetSpeedLimit(ST_DCM_cfg_t *dcmCfg ,uint8_t copy_u8SpeedLimit)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
	gl_u8AccSpeedLimit = copy_u8SpeedLimit; /* Setting the speed limit to be global */
 80009c0:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <AACC_vSetSpeedLimit+0x30>)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	7013      	strb	r3, [r2, #0]
	HDCM_turnOn(dcmCfg); /* turn dc motor on to start moving the car */
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 ffe9 	bl	800199e <HDCM_turnOn>
	HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"ACC Speed Limit Is Setting \r\n");
 80009cc:	4906      	ldr	r1, [pc, #24]	; (80009e8 <AACC_vSetSpeedLimit+0x34>)
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <AACC_vSetSpeedLimit+0x38>)
 80009d0:	f001 f888 	bl	8001ae4 <HHC05_uddtTransmitString>
	gl_u8MotorFlag = 1;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <AACC_vSetSpeedLimit+0x3c>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000058 	.word	0x20000058
 80009e8:	08002bf8 	.word	0x08002bf8
 80009ec:	40011000 	.word	0x40011000
 80009f0:	2000005a 	.word	0x2000005a

080009f4 <AACC_vControlingCar>:

void AACC_vControlingCar(ST_DCM_cfg_t *dcmCfg ,uint32_t copy_u32CurrentDistance)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	if((copy_u32CurrentDistance >= GREEN_RANGE) && (gl_u8LastSpeed < gl_u8AccSpeedLimit))
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2b31      	cmp	r3, #49	; 0x31
 8000a02:	d935      	bls.n	8000a70 <AACC_vControlingCar+0x7c>
 8000a04:	4b7e      	ldr	r3, [pc, #504]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b7e      	ldr	r3, [pc, #504]	; (8000c04 <AACC_vControlingCar+0x210>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d22f      	bcs.n	8000a70 <AACC_vControlingCar+0x7c>
	{
		if(gl_u8MotorFlag == 0)
 8000a10:	4b7d      	ldr	r3, [pc, #500]	; (8000c08 <AACC_vControlingCar+0x214>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d11f      	bne.n	8000a58 <AACC_vControlingCar+0x64>
		{
			gl_u8LastSpeed +=5;
 8000a18:	4b79      	ldr	r3, [pc, #484]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3305      	adds	r3, #5
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b77      	ldr	r3, [pc, #476]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000a22:	701a      	strb	r2, [r3, #0]
			HDCM_controlSpeed(gl_u8LastSpeed); /* set the speed of NCC taken from driver */
 8000a24:	4b76      	ldr	r3, [pc, #472]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fff7 	bl	8001a1c <HDCM_controlSpeed>
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"ACC In Green Range \r\n");
 8000a2e:	4977      	ldr	r1, [pc, #476]	; (8000c0c <AACC_vControlingCar+0x218>)
 8000a30:	4877      	ldr	r0, [pc, #476]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000a32:	f001 f857 	bl	8001ae4 <HHC05_uddtTransmitString>
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"ACC Current Speed Is : ");
 8000a36:	4977      	ldr	r1, [pc, #476]	; (8000c14 <AACC_vControlingCar+0x220>)
 8000a38:	4875      	ldr	r0, [pc, #468]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000a3a:	f001 f853 	bl	8001ae4 <HHC05_uddtTransmitString>
			HHC05_uddtTransmitByte(MUART1_PERIPHERAL,(gl_u8LastSpeed + '0'));
 8000a3e:	4b70      	ldr	r3, [pc, #448]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	3330      	adds	r3, #48	; 0x30
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	4871      	ldr	r0, [pc, #452]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000a4a:	f001 f839 	bl	8001ac0 <HHC05_uddtTransmitByte>
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"\r\n");
 8000a4e:	4972      	ldr	r1, [pc, #456]	; (8000c18 <AACC_vControlingCar+0x224>)
 8000a50:	486f      	ldr	r0, [pc, #444]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000a52:	f001 f847 	bl	8001ae4 <HHC05_uddtTransmitString>
		if(gl_u8MotorFlag == 0)
 8000a56:	e0ce      	b.n	8000bf6 <AACC_vControlingCar+0x202>
		}
		else if(gl_u8MotorFlag == 1)
 8000a58:	4b6b      	ldr	r3, [pc, #428]	; (8000c08 <AACC_vControlingCar+0x214>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	f040 80ca 	bne.w	8000bf6 <AACC_vControlingCar+0x202>
		{
			HDCM_turnOn(dcmCfg);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 ff9b 	bl	800199e <HDCM_turnOn>
			gl_u8MotorFlag = 0;
 8000a68:	4b67      	ldr	r3, [pc, #412]	; (8000c08 <AACC_vControlingCar+0x214>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
		if(gl_u8MotorFlag == 0)
 8000a6e:	e0c2      	b.n	8000bf6 <AACC_vControlingCar+0x202>
			/* Do Nothing */
		}


	}
	else if((copy_u32CurrentDistance >= GREEN_RANGE) && (gl_u8LastSpeed > gl_u8AccSpeedLimit) )
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b31      	cmp	r3, #49	; 0x31
 8000a74:	d925      	bls.n	8000ac2 <AACC_vControlingCar+0xce>
 8000a76:	4b62      	ldr	r3, [pc, #392]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b62      	ldr	r3, [pc, #392]	; (8000c04 <AACC_vControlingCar+0x210>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d91f      	bls.n	8000ac2 <AACC_vControlingCar+0xce>
	{
		gl_u8LastSpeed -=5;
 8000a82:	4b5f      	ldr	r3, [pc, #380]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	3b05      	subs	r3, #5
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000a8c:	701a      	strb	r2, [r3, #0]
		HDCM_controlSpeed(gl_u8LastSpeed); /* set the speed of NCC taken from driver */
 8000a8e:	4b5c      	ldr	r3, [pc, #368]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 ffc2 	bl	8001a1c <HDCM_controlSpeed>
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"ACC In Green Range2 \r\n");
 8000a98:	4960      	ldr	r1, [pc, #384]	; (8000c1c <AACC_vControlingCar+0x228>)
 8000a9a:	485d      	ldr	r0, [pc, #372]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000a9c:	f001 f822 	bl	8001ae4 <HHC05_uddtTransmitString>
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"ACC Current Speed Is : ");
 8000aa0:	495c      	ldr	r1, [pc, #368]	; (8000c14 <AACC_vControlingCar+0x220>)
 8000aa2:	485b      	ldr	r0, [pc, #364]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000aa4:	f001 f81e 	bl	8001ae4 <HHC05_uddtTransmitString>
		HHC05_uddtTransmitByte(MUART1_PERIPHERAL,(gl_u8LastSpeed + '0'));
 8000aa8:	4b55      	ldr	r3, [pc, #340]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3330      	adds	r3, #48	; 0x30
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4857      	ldr	r0, [pc, #348]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000ab4:	f001 f804 	bl	8001ac0 <HHC05_uddtTransmitByte>
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"\r\n");
 8000ab8:	4957      	ldr	r1, [pc, #348]	; (8000c18 <AACC_vControlingCar+0x224>)
 8000aba:	4855      	ldr	r0, [pc, #340]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000abc:	f001 f812 	bl	8001ae4 <HHC05_uddtTransmitString>
 8000ac0:	e09a      	b.n	8000bf8 <AACC_vControlingCar+0x204>
	}
	else if((copy_u32CurrentDistance < GREEN_RANGE) && (copy_u32CurrentDistance >= BLUE_RANGE) && (gl_u8LastSpeed < gl_u8AccSpeedLimit))
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b31      	cmp	r3, #49	; 0x31
 8000ac6:	d827      	bhi.n	8000b18 <AACC_vControlingCar+0x124>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2b13      	cmp	r3, #19
 8000acc:	d924      	bls.n	8000b18 <AACC_vControlingCar+0x124>
 8000ace:	4b4c      	ldr	r3, [pc, #304]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <AACC_vControlingCar+0x210>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d21e      	bcs.n	8000b18 <AACC_vControlingCar+0x124>
	{
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"ACC In Blue Range \r\n");
 8000ada:	4951      	ldr	r1, [pc, #324]	; (8000c20 <AACC_vControlingCar+0x22c>)
 8000adc:	484c      	ldr	r0, [pc, #304]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000ade:	f001 f801 	bl	8001ae4 <HHC05_uddtTransmitString>
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"No Change In Speed : ");
 8000ae2:	4950      	ldr	r1, [pc, #320]	; (8000c24 <AACC_vControlingCar+0x230>)
 8000ae4:	484a      	ldr	r0, [pc, #296]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000ae6:	f000 fffd 	bl	8001ae4 <HHC05_uddtTransmitString>
		HHC05_uddtTransmitByte(MUART1_PERIPHERAL,(gl_u8LastSpeed + '0'));
 8000aea:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	3330      	adds	r3, #48	; 0x30
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4619      	mov	r1, r3
 8000af4:	4846      	ldr	r0, [pc, #280]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000af6:	f000 ffe3 	bl	8001ac0 <HHC05_uddtTransmitByte>
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"\r\n");
 8000afa:	4947      	ldr	r1, [pc, #284]	; (8000c18 <AACC_vControlingCar+0x224>)
 8000afc:	4844      	ldr	r0, [pc, #272]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000afe:	f000 fff1 	bl	8001ae4 <HHC05_uddtTransmitString>
		if(gl_u8MotorFlag == 1)
 8000b02:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <AACC_vControlingCar+0x214>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d176      	bne.n	8000bf8 <AACC_vControlingCar+0x204>
		{
			HDCM_turnOn(dcmCfg);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 ff47 	bl	800199e <HDCM_turnOn>
			gl_u8MotorFlag = 0;
 8000b10:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <AACC_vControlingCar+0x214>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		if(gl_u8MotorFlag == 1)
 8000b16:	e06f      	b.n	8000bf8 <AACC_vControlingCar+0x204>
		else
		{
			/* Do Nothing */;
		}
	}
	else if((copy_u32CurrentDistance < GREEN_RANGE) && (copy_u32CurrentDistance >= BLUE_RANGE) && (gl_u8LastSpeed > gl_u8AccSpeedLimit))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2b31      	cmp	r3, #49	; 0x31
 8000b1c:	d832      	bhi.n	8000b84 <AACC_vControlingCar+0x190>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b13      	cmp	r3, #19
 8000b22:	d92f      	bls.n	8000b84 <AACC_vControlingCar+0x190>
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <AACC_vControlingCar+0x210>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d929      	bls.n	8000b84 <AACC_vControlingCar+0x190>
	{
		gl_u8LastSpeed -=5;
 8000b30:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3b05      	subs	r3, #5
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000b3a:	701a      	strb	r2, [r3, #0]
		HDCM_controlSpeed(gl_u8LastSpeed); /* set the speed of NCC taken from driver */
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 ff6b 	bl	8001a1c <HDCM_controlSpeed>
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"ACC In Blue Range2\r\n");
 8000b46:	4938      	ldr	r1, [pc, #224]	; (8000c28 <AACC_vControlingCar+0x234>)
 8000b48:	4831      	ldr	r0, [pc, #196]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000b4a:	f000 ffcb 	bl	8001ae4 <HHC05_uddtTransmitString>
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"No Change In Speed : ");
 8000b4e:	4935      	ldr	r1, [pc, #212]	; (8000c24 <AACC_vControlingCar+0x230>)
 8000b50:	482f      	ldr	r0, [pc, #188]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000b52:	f000 ffc7 	bl	8001ae4 <HHC05_uddtTransmitString>
		HHC05_uddtTransmitByte(MUART1_PERIPHERAL,(gl_u8LastSpeed + '0'));
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	3330      	adds	r3, #48	; 0x30
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	482b      	ldr	r0, [pc, #172]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000b62:	f000 ffad 	bl	8001ac0 <HHC05_uddtTransmitByte>
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"\r\n");
 8000b66:	492c      	ldr	r1, [pc, #176]	; (8000c18 <AACC_vControlingCar+0x224>)
 8000b68:	4829      	ldr	r0, [pc, #164]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000b6a:	f000 ffbb 	bl	8001ae4 <HHC05_uddtTransmitString>
		if(gl_u8MotorFlag == 1)
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <AACC_vControlingCar+0x214>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d140      	bne.n	8000bf8 <AACC_vControlingCar+0x204>
		{
			HDCM_turnOn(dcmCfg);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 ff11 	bl	800199e <HDCM_turnOn>
			gl_u8MotorFlag = 0;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <AACC_vControlingCar+0x214>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
		if(gl_u8MotorFlag == 1)
 8000b82:	e039      	b.n	8000bf8 <AACC_vControlingCar+0x204>
		else
		{
			/* Do Nothing */;
		}
	}
	else if((copy_u32CurrentDistance < BLUE_RANGE) && (copy_u32CurrentDistance > RED_RANGE))
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b13      	cmp	r3, #19
 8000b88:	d830      	bhi.n	8000bec <AACC_vControlingCar+0x1f8>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d02d      	beq.n	8000bec <AACC_vControlingCar+0x1f8>
	{
		if(gl_u8LastSpeed > 0)
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d01f      	beq.n	8000bd8 <AACC_vControlingCar+0x1e4>
		{
			gl_u8LastSpeed -=10;
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	3b0a      	subs	r3, #10
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000ba2:	701a      	strb	r2, [r3, #0]
			HDCM_controlSpeed(gl_u8LastSpeed); /* set the speed of NCC taken from driver */
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 ff37 	bl	8001a1c <HDCM_controlSpeed>
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"ACC In Red Range \r\n");
 8000bae:	491f      	ldr	r1, [pc, #124]	; (8000c2c <AACC_vControlingCar+0x238>)
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000bb2:	f000 ff97 	bl	8001ae4 <HHC05_uddtTransmitString>
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"ACC Current Speed Is : ");
 8000bb6:	4917      	ldr	r1, [pc, #92]	; (8000c14 <AACC_vControlingCar+0x220>)
 8000bb8:	4815      	ldr	r0, [pc, #84]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000bba:	f000 ff93 	bl	8001ae4 <HHC05_uddtTransmitString>
			HHC05_uddtTransmitByte(MUART1_PERIPHERAL,(gl_u8LastSpeed + '0'));
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <AACC_vControlingCar+0x20c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	3330      	adds	r3, #48	; 0x30
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4811      	ldr	r0, [pc, #68]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000bca:	f000 ff79 	bl	8001ac0 <HHC05_uddtTransmitByte>
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"\r\n");
 8000bce:	4912      	ldr	r1, [pc, #72]	; (8000c18 <AACC_vControlingCar+0x224>)
 8000bd0:	480f      	ldr	r0, [pc, #60]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000bd2:	f000 ff87 	bl	8001ae4 <HHC05_uddtTransmitString>
		if(gl_u8LastSpeed > 0)
 8000bd6:	e00f      	b.n	8000bf8 <AACC_vControlingCar+0x204>
		}
		else
		{
			HDCM_turnOff(dcmCfg);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 febf 	bl	800195c <HDCM_turnOff>
			gl_u8MotorFlag = 1;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <AACC_vControlingCar+0x214>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
			HDCM_controlSpeed(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 ff19 	bl	8001a1c <HDCM_controlSpeed>
		if(gl_u8LastSpeed > 0)
 8000bea:	e005      	b.n	8000bf8 <AACC_vControlingCar+0x204>
		}

	}
	else
	{
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Reach Speed Limit\r\n");
 8000bec:	4910      	ldr	r1, [pc, #64]	; (8000c30 <AACC_vControlingCar+0x23c>)
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <AACC_vControlingCar+0x21c>)
 8000bf0:	f000 ff78 	bl	8001ae4 <HHC05_uddtTransmitString>

	}
}
 8000bf4:	e000      	b.n	8000bf8 <AACC_vControlingCar+0x204>
		if(gl_u8MotorFlag == 0)
 8000bf6:	bf00      	nop
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000059 	.word	0x20000059
 8000c04:	20000058 	.word	0x20000058
 8000c08:	2000005a 	.word	0x2000005a
 8000c0c:	08002c18 	.word	0x08002c18
 8000c10:	40011000 	.word	0x40011000
 8000c14:	08002c30 	.word	0x08002c30
 8000c18:	08002c48 	.word	0x08002c48
 8000c1c:	08002c4c 	.word	0x08002c4c
 8000c20:	08002c64 	.word	0x08002c64
 8000c24:	08002c7c 	.word	0x08002c7c
 8000c28:	08002c94 	.word	0x08002c94
 8000c2c:	08002cac 	.word	0x08002cac
 8000c30:	08002cc0 	.word	0x08002cc0

08000c34 <AACC_vStopAcc>:


void AACC_vStopAcc(ST_DCM_cfg_t *dcmCfg )
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	if(dcmCfg != PTR_NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <AACC_vStopAcc+0x1a>
	{
		HDCM_turnOff(dcmCfg);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 fe8a 	bl	800195c <HDCM_turnOff>
		HDCM_controlSpeed(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 fee7 	bl	8001a1c <HDCM_controlSpeed>
	}
	else
	{
		/* Do Nothing */
	}
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <AACC_vChangeAccSpeedLimit>:

uint8_t AACC_vChangeAccSpeedLimit(uint8_t copy_u8SpeedAction)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	switch(copy_u8SpeedAction)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b2b      	cmp	r3, #43	; 0x2b
 8000c66:	d002      	beq.n	8000c6e <AACC_vChangeAccSpeedLimit+0x16>
 8000c68:	2b2d      	cmp	r3, #45	; 0x2d
 8000c6a:	d007      	beq.n	8000c7c <AACC_vChangeAccSpeedLimit+0x24>
			break;
		}
		default :
		{
			/*Do Nothing*/
			break;
 8000c6c:	e00d      	b.n	8000c8a <AACC_vChangeAccSpeedLimit+0x32>
			gl_u8AccSpeedLimit+=10;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <AACC_vChangeAccSpeedLimit+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	330a      	adds	r3, #10
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <AACC_vChangeAccSpeedLimit+0x44>)
 8000c78:	701a      	strb	r2, [r3, #0]
			break;
 8000c7a:	e006      	b.n	8000c8a <AACC_vChangeAccSpeedLimit+0x32>
			gl_u8AccSpeedLimit-=10;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <AACC_vChangeAccSpeedLimit+0x44>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3b0a      	subs	r3, #10
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <AACC_vChangeAccSpeedLimit+0x44>)
 8000c86:	701a      	strb	r2, [r3, #0]
			break;
 8000c88:	bf00      	nop
		}
	}
	return gl_u8AccSpeedLimit;
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <AACC_vChangeAccSpeedLimit+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000058 	.word	0x20000058

08000ca0 <AAEB_vIsReady>:
#include "../../../Inc/APPLICATION/Automatic_Emergency_Brake/aeb_interface.h"



void AAEB_vIsReady(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	/* transmit a massage for the driver with UART */
	HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Automatic Emergency Brake Is Ready \r\n");
 8000ca4:	4902      	ldr	r1, [pc, #8]	; (8000cb0 <AAEB_vIsReady+0x10>)
 8000ca6:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <AAEB_vIsReady+0x14>)
 8000ca8:	f000 ff1c 	bl	8001ae4 <HHC05_uddtTransmitString>
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	08002cd4 	.word	0x08002cd4
 8000cb4:	40011000 	.word	0x40011000

08000cb8 <AAEB_uddtCheckForObstacles>:

EN_AAEB_zones_t AAEB_uddtCheckForObstacles(ST_DCM_cfg_t *dcmCfg , uint32_t copy_u32CurrentDistance)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	EN_AAEB_zones_t ret = AAEB_SAFE_ZONE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
	if(dcmCfg != PTR_NULL )
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00d      	beq.n	8000ce8 <AAEB_uddtCheckForObstacles+0x30>
	{
		if(copy_u32CurrentDistance <= DANGEROUS_ZONE)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2b0a      	cmp	r3, #10
 8000cd0:	d808      	bhi.n	8000ce4 <AAEB_uddtCheckForObstacles+0x2c>
		{
			HDCM_controlSpeed(STOP_SPEED); /* Stop PWM*/
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f000 fea2 	bl	8001a1c <HDCM_controlSpeed>
			HDCM_turnOff(dcmCfg); /* turn off dc_motors to stop car */
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 fe3f 	bl	800195c <HDCM_turnOff>
			ret = AAEB_DANGEROUS_ZONE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e001      	b.n	8000ce8 <AAEB_uddtCheckForObstacles+0x30>
		}
		else
		{
			ret = AAEB_SAFE_ZONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	}
	else
	{
		/* do nothing */
	}
	return ret;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <ESP_Callback>:
 * @brief callback function will execute when UART2 receive any thing
 *
 */

void ESP_Callback(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	/* Receive read register of UART2 in gl_u8Uart2Buffer variable  */
	gl_u8Uart2Buffer = MUART2_PERIPHERAL->MUSART_DR;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <ESP_Callback+0x30>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <ESP_Callback+0x34>)
 8000d00:	701a      	strb	r2, [r3, #0]
	/* check if the data equal to 'm' */
	if(gl_u8Uart2Buffer == 'm')
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <ESP_Callback+0x34>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b6d      	cmp	r3, #109	; 0x6d
 8000d08:	d109      	bne.n	8000d1e <ESP_Callback+0x2a>
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		MUSART_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Their is a new firmware on server\r\n");
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <ESP_Callback+0x38>)
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <ESP_Callback+0x3c>)
 8000d0e:	f001 fe50 	bl	80029b2 <MUSART_uddtTransmitString>
		/* set gl_u8NewFirmwareFlag to indicate car system that a new firmware is available */
		gl_u8NewFirmwareFlag = 1;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <ESP_Callback+0x40>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
		gl_u8Uart2Buffer = STR_NULL;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <ESP_Callback+0x34>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/*Do Nothing */
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40004400 	.word	0x40004400
 8000d28:	2000006f 	.word	0x2000006f
 8000d2c:	08002cfc 	.word	0x08002cfc
 8000d30:	40011000 	.word	0x40011000
 8000d34:	2000006d 	.word	0x2000006d

08000d38 <HC05_Callback>:

void HC05_Callback(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	/* Receive read register of UART1 in gl_u8Uart1Buffer variable  */
	gl_u8Uart1Buffer = MUART1_PERIPHERAL->MUSART_DR;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HC05_Callback+0x2c>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HC05_Callback+0x30>)
 8000d44:	701a      	strb	r2, [r3, #0]
	gl_uddtCarCondation = ABCM_uddtDetermineCarState(gl_u8Uart1Buffer);
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HC05_Callback+0x30>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa12 	bl	8001174 <ABCM_uddtDetermineCarState>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HC05_Callback+0x34>)
 8000d56:	701a      	strb	r2, [r3, #0]
	gl_u8Uart1Buffer = STR_NULL;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HC05_Callback+0x30>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40011000 	.word	0x40011000
 8000d68:	2000006e 	.word	0x2000006e
 8000d6c:	20000061 	.word	0x20000061

08000d70 <ABCM_vSysInit>:
 * @param  : void
 * @return : void
 */

void ABCM_vSysInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
	/*############################ configure clock to all of the system #################################*/

	/* enable RCC of micro_controller  */
	MRCC_Init();
 8000d76:	f001 f9d7 	bl	8002128 <MRCC_Init>
	/* enable clock to PORTA  */
	MRCC_enablePeripheral(MRCC_AHP1_BUS, MRCC_GPIOA_PERIPHERAL);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f001 f9f9 	bl	8002174 <MRCC_enablePeripheral>
	/* enable clock to TIMER2 */
	MRCC_enablePeripheral(MRCC_APB1_BUS, MRCC_TIM2_PERIPHERAL);
 8000d82:	2100      	movs	r1, #0
 8000d84:	2002      	movs	r0, #2
 8000d86:	f001 f9f5 	bl	8002174 <MRCC_enablePeripheral>
	/* enable clock to PORTB  */
	MRCC_enablePeripheral(MRCC_AHP1_BUS, MRCC_GPIOB_PERIPHERAL);
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f001 f9f1 	bl	8002174 <MRCC_enablePeripheral>
	/* enable clock to USART1 */
	MRCC_enablePeripheral(MRCC_APB2_BUS, MRCC_USART1_PERIPHERAL);
 8000d92:	2104      	movs	r1, #4
 8000d94:	2003      	movs	r0, #3
 8000d96:	f001 f9ed 	bl	8002174 <MRCC_enablePeripheral>
	/* enable clock to USART2 */
	MRCC_enablePeripheral(MRCC_APB1_BUS, MRCC_USART2_PERIPHERAL);
 8000d9a:	2111      	movs	r1, #17
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f001 f9e9 	bl	8002174 <MRCC_enablePeripheral>
	/* enable clock to TIMER3 */
	MRCC_enablePeripheral(MRCC_APB1_BUS, MRCC_TIM3_PERIPHERAL);
 8000da2:	2101      	movs	r1, #1
 8000da4:	2002      	movs	r0, #2
 8000da6:	f001 f9e5 	bl	8002174 <MRCC_enablePeripheral>
	/*will remove*/
	HLIDAR_controlSpeed(50);
 8000daa:	2032      	movs	r0, #50	; 0x32
 8000dac:	f001 fc24 	bl	80025f8 <HLIDAR_controlSpeed>

	/*################################################### Configure NVIC groups ##################################################*/

	/* set NVIC groups to 16 priority group & no sub priority   */
	MNVIC_SetInterruptGroup(GP_16_SP_00);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f001 f993 	bl	80020dc <MNVIC_SetInterruptGroup>
	/* set UART1 receive interrupt to priority group one & without sub priority */
	MNVIC_SetInterruptPriority(37 , GP_16_SP_00 ,1,0);
 8000db6:	2300      	movs	r3, #0
 8000db8:	2201      	movs	r2, #1
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2025      	movs	r0, #37	; 0x25
 8000dbe:	f001 f92d 	bl	800201c <MNVIC_SetInterruptPriority>
	/*enable UART1 receive interrupt*/
	MNVIC_enableInterrupt(37);
 8000dc2:	2025      	movs	r0, #37	; 0x25
 8000dc4:	f001 f900 	bl	8001fc8 <MNVIC_enableInterrupt>
	/* set UART2 receive interrupt to priority group two & without sub priority */
	MNVIC_SetInterruptPriority(38 , GP_16_SP_00 ,2,0);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	2202      	movs	r2, #2
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2026      	movs	r0, #38	; 0x26
 8000dd0:	f001 f924 	bl	800201c <MNVIC_SetInterruptPriority>
	/*enable UART2 receive interrupt*/
	MNVIC_enableInterrupt(38);
 8000dd4:	2026      	movs	r0, #38	; 0x26
 8000dd6:	f001 f8f7 	bl	8001fc8 <MNVIC_enableInterrupt>

	/*###################################### Configure USART2 pins for EspMcu #################################################*/
	/*initialise ALT pinA2 for UART */
	ST_MGPIO_altPinCfg_t lo_altUartPinA2 = {MGPIOA_PERIPHERAL,MGPIO_PIN2,MGPIO_ALTFN_7,
 8000dda:	4a24      	ldr	r2, [pc, #144]	; (8000e6c <ABCM_vSysInit+0xfc>)
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000de2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			MGPIO_OUTPUT_RESISTOR_PUSH_PULL,MGPIO_OUTPUT_SPEED_MEDIUM,MGPIO_PULL_FLOATING};
	/*initialise ALT pinA3 for UART */
	ST_MGPIO_altPinCfg_t lo_altUartPinA3 = {MGPIOA_PERIPHERAL,MGPIO_PIN3,MGPIO_ALTFN_7,
 8000de6:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <ABCM_vSysInit+0x100>)
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			MGPIO_OUTPUT_RESISTOR_PUSH_PULL,MGPIO_OUTPUT_SPEED_MEDIUM,MGPIO_PULL_FLOATING};
	/* set pin A2 to alternate
	 * set pin A2 to be push pull
	 * set pin A2 speed to medium
	 * set pin A2 alternate 7 */
	MGPIO_uddtInitAltPin(&lo_altUartPinA2);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 f893 	bl	8001f22 <MGPIO_uddtInitAltPin>
	/* set pin A3 to alternate
	 * set pin A3 to be push pull
	 * set pin A3 speed to medium
	 * set pin A3 alternate 7 */
	MGPIO_uddtInitAltPin(&lo_altUartPinA3);
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 f88e 	bl	8001f22 <MGPIO_uddtInitAltPin>

	/*initialise UART2 to use with EspMc */
	MUSART_uddtInit(MUART2_PERIPHERAL , &gl_uddtUartOfESP);
 8000e06:	491b      	ldr	r1, [pc, #108]	; (8000e74 <ABCM_vSysInit+0x104>)
 8000e08:	481b      	ldr	r0, [pc, #108]	; (8000e78 <ABCM_vSysInit+0x108>)
 8000e0a:	f001 fc29 	bl	8002660 <MUSART_uddtInit>
	/*enable UART2 to use with EspMc */
	MUSART_uddtEnable(MUART2_PERIPHERAL);
 8000e0e:	481a      	ldr	r0, [pc, #104]	; (8000e78 <ABCM_vSysInit+0x108>)
 8000e10:	f001 fd86 	bl	8002920 <MUSART_uddtEnable>
	/*initialise interrupt of UART2 */
	MUSART_RxIntSetStatus(MUART2_PERIPHERAL , MUSART_ENABLE);
 8000e14:	2101      	movs	r1, #1
 8000e16:	4818      	ldr	r0, [pc, #96]	; (8000e78 <ABCM_vSysInit+0x108>)
 8000e18:	f001 fdf6 	bl	8002a08 <MUSART_RxIntSetStatus>
	/*set callback function of the receive interrupt with function  ESP_uartCallback*/
	MUSART2_uddtSetCallBack(ESP_Callback);
 8000e1c:	4817      	ldr	r0, [pc, #92]	; (8000e7c <ABCM_vSysInit+0x10c>)
 8000e1e:	f001 fe37 	bl	8002a90 <MUSART2_uddtSetCallBack>


	/*###################################### Configure HC05 GPIO pins #########################################################*/
	/*initialise ALT pinB6 for UART */
	ST_MGPIO_altPinCfg_t lo_altUartPinB6 = {MGPIOB_PERIPHERAL,MGPIO_PIN6,MGPIO_ALTFN_7,
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <ABCM_vSysInit+0x110>)
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			MGPIO_OUTPUT_RESISTOR_PUSH_PULL,MGPIO_OUTPUT_SPEED_MEDIUM,MGPIO_PULL_FLOATING};
	/*initialise ALT pinB7 for UART */
	ST_MGPIO_altPinCfg_t lo_altUartPinB7 = {MGPIOB_PERIPHERAL,MGPIO_PIN7,MGPIO_ALTFN_7,
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <ABCM_vSysInit+0x114>)
 8000e30:	463b      	mov	r3, r7
 8000e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			MGPIO_OUTPUT_RESISTOR_PUSH_PULL,MGPIO_OUTPUT_SPEED_MEDIUM,MGPIO_PULL_FLOATING};
	/* set pin b6 to alternate
	 * set pin b6 to be push pull
	 * set pin b6 speed to medium
	 * set pin b6 alternate 7 */
	MGPIO_uddtInitAltPin(&lo_altUartPinB6);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 f870 	bl	8001f22 <MGPIO_uddtInitAltPin>
	/* set pin b7 to alternate
	 * set pin b7 to be push pull
	 * set pin b7 speed to medium
	 * set pin b7 alternate 7 */
	MGPIO_uddtInitAltPin(&lo_altUartPinB7);
 8000e42:	463b      	mov	r3, r7
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 f86c 	bl	8001f22 <MGPIO_uddtInitAltPin>

	/* ##################################### Initialise interface module application ############################################*/

	/* initialise communication between car and driver*/
	AUDI_vInitInterface(MUART1_PERIPHERAL , &gl_uddtUartOfHC05 ,HC05_Callback);
 8000e4a:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <ABCM_vSysInit+0x118>)
 8000e4c:	490f      	ldr	r1, [pc, #60]	; (8000e8c <ABCM_vSysInit+0x11c>)
 8000e4e:	4810      	ldr	r0, [pc, #64]	; (8000e90 <ABCM_vSysInit+0x120>)
 8000e50:	f000 fc82 	bl	8001758 <AUDI_vInitInterface>

	/* ##################################### Initialise dc_motors of the car ####################################################*/

	/* initialise the 4 wheel of car to be ready to use */
	HDCM_init(&wheelControl);
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <ABCM_vSysInit+0x124>)
 8000e56:	f000 fcf9 	bl	800184c <HDCM_init>
	/* turn dc_motors on to be ready */
	HDCM_turnOn(&wheelControl);
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <ABCM_vSysInit+0x124>)
 8000e5c:	f000 fd9f 	bl	800199e <HDCM_turnOn>

	/* Will Be Removed */
	ultra_init();
 8000e60:	f000 fe86 	bl	8001b70 <ultra_init>
}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	08002d20 	.word	0x08002d20
 8000e70:	08002d2c 	.word	0x08002d2c
 8000e74:	20000024 	.word	0x20000024
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	08000cf5 	.word	0x08000cf5
 8000e80:	08002d38 	.word	0x08002d38
 8000e84:	08002d44 	.word	0x08002d44
 8000e88:	08000d39 	.word	0x08000d39
 8000e8c:	20000010 	.word	0x20000010
 8000e90:	40011000 	.word	0x40011000
 8000e94:	20000000 	.word	0x20000000

08000e98 <ABCM_vSysMangment>:
 * @param  : void
 * @return : void
 */

void ABCM_vSysMangment(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
	while(1)
	{
		// Send ultra_sonic pulse will removed
		send_pulse();
 8000e9e:	f000 fe7d 	bl	8001b9c <send_pulse>

		/* Measure distance will removed */
		gl_u32distance = measure_distance();
 8000ea2:	f000 fe91 	bl	8001bc8 <measure_distance>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a9b      	ldr	r2, [pc, #620]	; (8001118 <ABCM_vSysMangment+0x280>)
 8000eaa:	6013      	str	r3, [r2, #0]

		/* Delay before next measurement */
		delay_us(10000); // 500ms delay
 8000eac:	f242 7010 	movw	r0, #10000	; 0x2710
 8000eb0:	f000 fe48 	bl	8001b44 <delay_us>

		/*local variable to store the zone of AEB in it*/
		EN_AAEB_zones_t lo_uddtAebZone;
		/*Check the car zone */
		lo_uddtAebZone = AAEB_uddtCheckForObstacles(&wheelControl , gl_u32distance);
 8000eb4:	4b98      	ldr	r3, [pc, #608]	; (8001118 <ABCM_vSysMangment+0x280>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4898      	ldr	r0, [pc, #608]	; (800111c <ABCM_vSysMangment+0x284>)
 8000ebc:	f7ff fefc 	bl	8000cb8 <AAEB_uddtCheckForObstacles>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]

		/*check if car zone is dangerous zone */
		if(lo_uddtAebZone == AAEB_DANGEROUS_ZONE)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d105      	bne.n	8000ed6 <ABCM_vSysMangment+0x3e>
		{
			/* transmit a massage for the driver with UART */
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Automatic Emergency Brake Is Active \r\n");
 8000eca:	4995      	ldr	r1, [pc, #596]	; (8001120 <ABCM_vSysMangment+0x288>)
 8000ecc:	4895      	ldr	r0, [pc, #596]	; (8001124 <ABCM_vSysMangment+0x28c>)
 8000ece:	f000 fe09 	bl	8001ae4 <HHC05_uddtTransmitString>
			/*call function to handle the car in dangerous zone*/
			ABCM_vThreadMode();
 8000ed2:	f000 fba1 	bl	8001618 <ABCM_vThreadMode>
		else{/*Do Nothing*/};



		/* switch to perform a action depend on the car state  */
		switch(gl_uddtCarCondation)
 8000ed6:	4b94      	ldr	r3, [pc, #592]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	d8df      	bhi.n	8000e9e <ABCM_vSysMangment+0x6>
 8000ede:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <ABCM_vSysMangment+0x4c>)
 8000ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee4:	08000f11 	.word	0x08000f11
 8000ee8:	08000f23 	.word	0x08000f23
 8000eec:	08000f87 	.word	0x08000f87
 8000ef0:	08000f57 	.word	0x08000f57
 8000ef4:	08000f73 	.word	0x08000f73
 8000ef8:	08000f43 	.word	0x08000f43
 8000efc:	08000fa3 	.word	0x08000fa3
 8000f00:	08000fb9 	.word	0x08000fb9
 8000f04:	08000f31 	.word	0x08000f31
 8000f08:	080010e9 	.word	0x080010e9
 8000f0c:	08000fcf 	.word	0x08000fcf
		{
		case ABCM_CAR_STANDBY :
		{
			/* Show simple dash_board for car statues on UART */
			AUDI_vStandByDashboard(MUART1_PERIPHERAL);
 8000f10:	4884      	ldr	r0, [pc, #528]	; (8001124 <ABCM_vSysMangment+0x28c>)
 8000f12:	f000 fc39 	bl	8001788 <AUDI_vStandByDashboard>
			/* Initialise AEB of the car */
			AAEB_vIsReady();
 8000f16:	f7ff fec3 	bl	8000ca0 <AAEB_vIsReady>
			/* assign car state as ABCM_CAR_IDLE */
			gl_uddtCarCondation = ABCM_CAR_IDLE;
 8000f1a:	4b83      	ldr	r3, [pc, #524]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	701a      	strb	r2, [r3, #0]
			/* break the switch */
			break;
 8000f20:	e0f8      	b.n	8001114 <ABCM_vSysMangment+0x27c>
		}
		case ABCM_CAR_ON :
		{
			/* Show simple dash_board for car options on UART */
			AUDI_vOnDashboard(MUART1_PERIPHERAL);
 8000f22:	4880      	ldr	r0, [pc, #512]	; (8001124 <ABCM_vSysMangment+0x28c>)
 8000f24:	f000 fc6c 	bl	8001800 <AUDI_vOnDashboard>
			/* assign car state as ABCM_CAR_IDLE */
			gl_uddtCarCondation = ABCM_CAR_IDLE;
 8000f28:	4b7f      	ldr	r3, [pc, #508]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	701a      	strb	r2, [r3, #0]
			/* break the switch */
			break;
 8000f2e:	e0f1      	b.n	8001114 <ABCM_vSysMangment+0x27c>
		}
		case ABCM_CAR_IDLE :
		{
			if(gl_u8AccIsOnFlag == 1)
 8000f30:	4b7e      	ldr	r3, [pc, #504]	; (800112c <ABCM_vSysMangment+0x294>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	f040 80e9 	bne.w	800110c <ABCM_vSysMangment+0x274>
			{
				gl_uddtCarCondation = ABCM_CAR_ACC_ACTIVE;
 8000f3a:	4b7b      	ldr	r3, [pc, #492]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	701a      	strb	r2, [r3, #0]
			}
			/* break the switch */
			break;
 8000f40:	e0e4      	b.n	800110c <ABCM_vSysMangment+0x274>
		}
		case ABCM_CAR_GET_FAULT :
		{
			/* send the action to function that determine the fault & what to do */
			gl_uddtCarCondation = ABCM_uddtFaultDetection(gl_uddtFaultCode);
 8000f42:	4b7b      	ldr	r3, [pc, #492]	; (8001130 <ABCM_vSysMangment+0x298>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fac8 	bl	80014dc <ABCM_uddtFaultDetection>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b75      	ldr	r3, [pc, #468]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000f52:	701a      	strb	r2, [r3, #0]
			/* break the switch */
			break;
 8000f54:	e0de      	b.n	8001114 <ABCM_vSysMangment+0x27c>
		}
		case ABCM_CAR_ACC_SET :
		{
			/* call function that will control the ACC and pass to it the motors strut and wanted speed */
			AACC_vSetSpeedLimit(&wheelControl , gl_u8AccSpeedLimit);
 8000f56:	4b77      	ldr	r3, [pc, #476]	; (8001134 <ABCM_vSysMangment+0x29c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	486f      	ldr	r0, [pc, #444]	; (800111c <ABCM_vSysMangment+0x284>)
 8000f5e:	f7ff fd29 	bl	80009b4 <AACC_vSetSpeedLimit>
			/* transmit a massage for the driver with UART */
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"To Stop Acc In Any Time Press z \r\n");
 8000f62:	4975      	ldr	r1, [pc, #468]	; (8001138 <ABCM_vSysMangment+0x2a0>)
 8000f64:	486f      	ldr	r0, [pc, #444]	; (8001124 <ABCM_vSysMangment+0x28c>)
 8000f66:	f000 fdbd 	bl	8001ae4 <HHC05_uddtTransmitString>
			/* assign car state as ABCM_CAR_ACC_ACTIVE */
			gl_uddtCarCondation = ABCM_CAR_ACC_ACTIVE;
 8000f6a:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	701a      	strb	r2, [r3, #0]
			/* break the switch */
			break;
 8000f70:	e0d0      	b.n	8001114 <ABCM_vSysMangment+0x27c>
		}
		case ABCM_CAR_ACC_ACTIVE :
		{
			/* call function that will control the ACC and pass to it the motors strut & LIDAR reading of distance */
			AACC_vControlingCar(&wheelControl , gl_u32distance);
 8000f72:	4b69      	ldr	r3, [pc, #420]	; (8001118 <ABCM_vSysMangment+0x280>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4868      	ldr	r0, [pc, #416]	; (800111c <ABCM_vSysMangment+0x284>)
 8000f7a:	f7ff fd3b 	bl	80009f4 <AACC_vControlingCar>
			/* assign car state as ABCM_CAR_IDLE */
			gl_uddtCarCondation = ABCM_CAR_IDLE;
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000f80:	2208      	movs	r2, #8
 8000f82:	701a      	strb	r2, [r3, #0]
			/* break the switch */
			break;
 8000f84:	e0c6      	b.n	8001114 <ABCM_vSysMangment+0x27c>
		}
		case ABCM_CAR_NCC_ACTIVE :
		{
			/* call function that will control the NCC and pass to it the motors strut and wanted speed */
			ANCC_vStartNcc(&wheelControl , gl_u8NccSpeedLimit);
 8000f86:	4b6d      	ldr	r3, [pc, #436]	; (800113c <ABCM_vSysMangment+0x2a4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4863      	ldr	r0, [pc, #396]	; (800111c <ABCM_vSysMangment+0x284>)
 8000f8e:	f000 fb8b 	bl	80016a8 <ANCC_vStartNcc>
			/* transmit a massage for the driver with UART */
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"To Stop Ncc In Any Time Press k \r\n");
 8000f92:	496b      	ldr	r1, [pc, #428]	; (8001140 <ABCM_vSysMangment+0x2a8>)
 8000f94:	4863      	ldr	r0, [pc, #396]	; (8001124 <ABCM_vSysMangment+0x28c>)
 8000f96:	f000 fda5 	bl	8001ae4 <HHC05_uddtTransmitString>
			/* assign car state as ABCM_CAR_RECVINIG */
			gl_uddtCarCondation = ABCM_CAR_IDLE;
 8000f9a:	4b63      	ldr	r3, [pc, #396]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	701a      	strb	r2, [r3, #0]
			/* break the switch */
			break;
 8000fa0:	e0b8      	b.n	8001114 <ABCM_vSysMangment+0x27c>
		}
		case ABCM_CAR_NCC_OFF :
		{
			/* call function that will stop the NCC and pass to it the motors strut */
			ANCC_vStopNcc(&wheelControl);
 8000fa2:	485e      	ldr	r0, [pc, #376]	; (800111c <ABCM_vSysMangment+0x284>)
 8000fa4:	f000 fb9e 	bl	80016e4 <ANCC_vStopNcc>
			/* transmit a massage for the driver with UART */
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Ncc Is Stopped \r\n");
 8000fa8:	4966      	ldr	r1, [pc, #408]	; (8001144 <ABCM_vSysMangment+0x2ac>)
 8000faa:	485e      	ldr	r0, [pc, #376]	; (8001124 <ABCM_vSysMangment+0x28c>)
 8000fac:	f000 fd9a 	bl	8001ae4 <HHC05_uddtTransmitString>
			/* assign car state as ABCM_CAR_ON */
			gl_uddtCarCondation = ABCM_CAR_ON;
 8000fb0:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
			/* break the switch */
			break;
 8000fb6:	e0ad      	b.n	8001114 <ABCM_vSysMangment+0x27c>
		}
		case ABCM_CAR_ACC_OFF :
		{
			/* call function that will stop the ACC and pass to it the motors strut */
			AACC_vStopAcc(&wheelControl);
 8000fb8:	4858      	ldr	r0, [pc, #352]	; (800111c <ABCM_vSysMangment+0x284>)
 8000fba:	f7ff fe3b 	bl	8000c34 <AACC_vStopAcc>
			/* transmit a massage for the driver with UART */
			HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Acc Is Stopped \r\n");
 8000fbe:	4962      	ldr	r1, [pc, #392]	; (8001148 <ABCM_vSysMangment+0x2b0>)
 8000fc0:	4858      	ldr	r0, [pc, #352]	; (8001124 <ABCM_vSysMangment+0x28c>)
 8000fc2:	f000 fd8f 	bl	8001ae4 <HHC05_uddtTransmitString>
			/* assign car state as ABCM_CAR_ON */
			gl_uddtCarCondation = ABCM_CAR_ON;
 8000fc6:	4b58      	ldr	r3, [pc, #352]	; (8001128 <ABCM_vSysMangment+0x290>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
			/* break the switch */
			break;
 8000fcc:	e0a2      	b.n	8001114 <ABCM_vSysMangment+0x27c>
		}
		case ABCM_CHANGE_SPEED_LIMIT :
		{
			/* check if the NCC is on */
			if(gl_u8NccIsOnFlag == 1)
 8000fce:	4b5f      	ldr	r3, [pc, #380]	; (800114c <ABCM_vSysMangment+0x2b4>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d141      	bne.n	800105a <ABCM_vSysMangment+0x1c2>
			{
				if(((gl_u8NccSpeedLimit < gl_u8CarDefaultMaxSpeed) && (gl_u8IncSpeedFlag == 1)) ||
 8000fd6:	4b59      	ldr	r3, [pc, #356]	; (800113c <ABCM_vSysMangment+0x2a4>)
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	4b5d      	ldr	r3, [pc, #372]	; (8001150 <ABCM_vSysMangment+0x2b8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d203      	bcs.n	8000fea <ABCM_vSysMangment+0x152>
 8000fe2:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <ABCM_vSysMangment+0x2bc>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d009      	beq.n	8000ffe <ABCM_vSysMangment+0x166>
						((gl_u8NccSpeedLimit > gl_u8CarDefaultMinSpeed) && (gl_u8DecSpeedFlag == 1)))
 8000fea:	4b54      	ldr	r3, [pc, #336]	; (800113c <ABCM_vSysMangment+0x2a4>)
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <ABCM_vSysMangment+0x2c0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
				if(((gl_u8NccSpeedLimit < gl_u8CarDefaultMaxSpeed) && (gl_u8IncSpeedFlag == 1)) ||
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d924      	bls.n	8001040 <ABCM_vSysMangment+0x1a8>
						((gl_u8NccSpeedLimit > gl_u8CarDefaultMinSpeed) && (gl_u8DecSpeedFlag == 1)))
 8000ff6:	4b59      	ldr	r3, [pc, #356]	; (800115c <ABCM_vSysMangment+0x2c4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d120      	bne.n	8001040 <ABCM_vSysMangment+0x1a8>
				{
					/* check if the change is INC or DEC*/
					if(gl_u8IncSpeedFlag == 1)
 8000ffe:	4b55      	ldr	r3, [pc, #340]	; (8001154 <ABCM_vSysMangment+0x2bc>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d10a      	bne.n	800101c <ABCM_vSysMangment+0x184>
					{
						/* call function that will change NCC speed limit and pass to it the action to take on the speed */
						gl_u8NccSpeedLimit = ANCC_vChangeNccSpeedLimit('+');
 8001006:	202b      	movs	r0, #43	; 0x2b
 8001008:	f000 fb7a 	bl	8001700 <ANCC_vChangeNccSpeedLimit>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b4a      	ldr	r3, [pc, #296]	; (800113c <ABCM_vSysMangment+0x2a4>)
 8001012:	701a      	strb	r2, [r3, #0]
						/* clear the gl_u8IncSpeedFlag (global flag) to indicate all of the system that the speed is changed */
						gl_u8IncSpeedFlag = 0;
 8001014:	4b4f      	ldr	r3, [pc, #316]	; (8001154 <ABCM_vSysMangment+0x2bc>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e00d      	b.n	8001038 <ABCM_vSysMangment+0x1a0>
					}
					else if(gl_u8DecSpeedFlag == 1)
 800101c:	4b4f      	ldr	r3, [pc, #316]	; (800115c <ABCM_vSysMangment+0x2c4>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d109      	bne.n	8001038 <ABCM_vSysMangment+0x1a0>
					{
						/* call function that will change NCC speed limit and pass to it the action to take on the speed */
						gl_u8NccSpeedLimit = ANCC_vChangeNccSpeedLimit('-');
 8001024:	202d      	movs	r0, #45	; 0x2d
 8001026:	f000 fb6b 	bl	8001700 <ANCC_vChangeNccSpeedLimit>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b43      	ldr	r3, [pc, #268]	; (800113c <ABCM_vSysMangment+0x2a4>)
 8001030:	701a      	strb	r2, [r3, #0]
						/* clear the gl_u8DecSpeedFlag (global flag) to indicate all of the system that the speed is changed */
						gl_u8DecSpeedFlag = 0;
 8001032:	4b4a      	ldr	r3, [pc, #296]	; (800115c <ABCM_vSysMangment+0x2c4>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
					}
					else{/* Do Nothing */};
					/* assign car state as ABCM_CAR_IDLE */
					gl_uddtCarCondation = ABCM_CAR_IDLE;
 8001038:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <ABCM_vSysMangment+0x290>)
 800103a:	2208      	movs	r2, #8
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	e052      	b.n	80010e6 <ABCM_vSysMangment+0x24e>
				}
				else
				{
					gl_u8IncSpeedFlag = 0;
 8001040:	4b44      	ldr	r3, [pc, #272]	; (8001154 <ABCM_vSysMangment+0x2bc>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
					gl_u8DecSpeedFlag = 0;
 8001046:	4b45      	ldr	r3, [pc, #276]	; (800115c <ABCM_vSysMangment+0x2c4>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
					/* invalid range assign fault code in gl_uddtFaultCode (global variable) to notify driver */
					gl_uddtFaultCode = ABCM_FAULT_SPEED_RANGE_INVALID;
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <ABCM_vSysMangment+0x298>)
 800104e:	2207      	movs	r2, #7
 8001050:	701a      	strb	r2, [r3, #0]
					/* assign car state as ABCM_CAR_GET_FAULT */
					gl_uddtCarCondation = ABCM_CAR_GET_FAULT;
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <ABCM_vSysMangment+0x290>)
 8001054:	2205      	movs	r2, #5
 8001056:	701a      	strb	r2, [r3, #0]
					gl_uddtFaultCode = ABCM_FAULT_SPEED_RANGE_INVALID;
					/* assign car state as ABCM_CAR_GET_FAULT */
					gl_uddtCarCondation = ABCM_CAR_GET_FAULT;
				}
			}
			break;
 8001058:	e05a      	b.n	8001110 <ABCM_vSysMangment+0x278>
			else if(gl_u8AccIsOnFlag == 1)
 800105a:	4b34      	ldr	r3, [pc, #208]	; (800112c <ABCM_vSysMangment+0x294>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d156      	bne.n	8001110 <ABCM_vSysMangment+0x278>
				if(((gl_u8AccSpeedLimit < gl_u8CarDefaultMaxSpeed) && (gl_u8IncSpeedFlag == 1)) ||
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <ABCM_vSysMangment+0x29c>)
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <ABCM_vSysMangment+0x2b8>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d203      	bcs.n	8001076 <ABCM_vSysMangment+0x1de>
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <ABCM_vSysMangment+0x2bc>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d009      	beq.n	800108a <ABCM_vSysMangment+0x1f2>
						((gl_u8AccSpeedLimit > gl_u8CarDefaultMinSpeed) && (gl_u8DecSpeedFlag == 1)))
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <ABCM_vSysMangment+0x29c>)
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <ABCM_vSysMangment+0x2c0>)
 800107c:	781b      	ldrb	r3, [r3, #0]
				if(((gl_u8AccSpeedLimit < gl_u8CarDefaultMaxSpeed) && (gl_u8IncSpeedFlag == 1)) ||
 800107e:	429a      	cmp	r2, r3
 8001080:	d924      	bls.n	80010cc <ABCM_vSysMangment+0x234>
						((gl_u8AccSpeedLimit > gl_u8CarDefaultMinSpeed) && (gl_u8DecSpeedFlag == 1)))
 8001082:	4b36      	ldr	r3, [pc, #216]	; (800115c <ABCM_vSysMangment+0x2c4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d120      	bne.n	80010cc <ABCM_vSysMangment+0x234>
					if(gl_u8IncSpeedFlag == 1)
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <ABCM_vSysMangment+0x2bc>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d10a      	bne.n	80010a8 <ABCM_vSysMangment+0x210>
						gl_u8AccSpeedLimit = AACC_vChangeAccSpeedLimit('+');
 8001092:	202b      	movs	r0, #43	; 0x2b
 8001094:	f7ff fde0 	bl	8000c58 <AACC_vChangeAccSpeedLimit>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <ABCM_vSysMangment+0x29c>)
 800109e:	701a      	strb	r2, [r3, #0]
						gl_u8IncSpeedFlag = 0;
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <ABCM_vSysMangment+0x2bc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e00d      	b.n	80010c4 <ABCM_vSysMangment+0x22c>
					else if(gl_u8DecSpeedFlag == 1)
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <ABCM_vSysMangment+0x2c4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d109      	bne.n	80010c4 <ABCM_vSysMangment+0x22c>
						gl_u8AccSpeedLimit = AACC_vChangeAccSpeedLimit('-');
 80010b0:	202d      	movs	r0, #45	; 0x2d
 80010b2:	f7ff fdd1 	bl	8000c58 <AACC_vChangeAccSpeedLimit>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <ABCM_vSysMangment+0x29c>)
 80010bc:	701a      	strb	r2, [r3, #0]
						gl_u8DecSpeedFlag = 0;
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <ABCM_vSysMangment+0x2c4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
					gl_uddtCarCondation = ABCM_CAR_IDLE;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <ABCM_vSysMangment+0x290>)
 80010c6:	2208      	movs	r2, #8
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e00c      	b.n	80010e6 <ABCM_vSysMangment+0x24e>
					gl_u8IncSpeedFlag = 0;
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <ABCM_vSysMangment+0x2bc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
					gl_u8DecSpeedFlag = 0;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <ABCM_vSysMangment+0x2c4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
					gl_uddtFaultCode = ABCM_FAULT_SPEED_RANGE_INVALID;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <ABCM_vSysMangment+0x298>)
 80010da:	2207      	movs	r2, #7
 80010dc:	701a      	strb	r2, [r3, #0]
					gl_uddtCarCondation = ABCM_CAR_GET_FAULT;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <ABCM_vSysMangment+0x290>)
 80010e0:	2205      	movs	r2, #5
 80010e2:	701a      	strb	r2, [r3, #0]
			break;
 80010e4:	e014      	b.n	8001110 <ABCM_vSysMangment+0x278>
 80010e6:	e013      	b.n	8001110 <ABCM_vSysMangment+0x278>
		}
		case ABCM_UPDATE_FIRMWARE :
		{
			/* transmit a massage for the driver with UART with fault code & short description about it*/
			MUSART_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Car Will Stop For Update Firmware\r\n");
 80010e8:	491d      	ldr	r1, [pc, #116]	; (8001160 <ABCM_vSysMangment+0x2c8>)
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <ABCM_vSysMangment+0x28c>)
 80010ec:	f001 fc61 	bl	80029b2 <MUSART_uddtTransmitString>
			/* clear gl_u8NewFirmwareFlag */
			gl_u8NewFirmwareFlag = 0;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <ABCM_vSysMangment+0x2cc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
			/* Set the pointer to the end of vector table (startup code of boot-loader) */
			MUSART_uddtTransmitString(MUART2_PERIPHERAL,(uint8_t *)'q');
 80010f6:	2171      	movs	r1, #113	; 0x71
 80010f8:	481b      	ldr	r0, [pc, #108]	; (8001168 <ABCM_vSysMangment+0x2d0>)
 80010fa:	f001 fc5a 	bl	80029b2 <MUSART_uddtTransmitString>
			AddressToCall = (BL_Call_t)0x08000004;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <ABCM_vSysMangment+0x2d4>)
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <ABCM_vSysMangment+0x2d8>)
 8001102:	601a      	str	r2, [r3, #0]
			AddressToCall();
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <ABCM_vSysMangment+0x2d4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4798      	blx	r3
			/* break the switch */
			break;
 800110a:	e003      	b.n	8001114 <ABCM_vSysMangment+0x27c>
			break;
 800110c:	bf00      	nop
 800110e:	e6c6      	b.n	8000e9e <ABCM_vSysMangment+0x6>
			break;
 8001110:	bf00      	nop
 8001112:	e6c4      	b.n	8000e9e <ABCM_vSysMangment+0x6>
	{
 8001114:	e6c3      	b.n	8000e9e <ABCM_vSysMangment+0x6>
 8001116:	bf00      	nop
 8001118:	20000064 	.word	0x20000064
 800111c:	20000000 	.word	0x20000000
 8001120:	08002d50 	.word	0x08002d50
 8001124:	40011000 	.word	0x40011000
 8001128:	20000061 	.word	0x20000061
 800112c:	2000006c 	.word	0x2000006c
 8001130:	20000060 	.word	0x20000060
 8001134:	20000039 	.word	0x20000039
 8001138:	08002d78 	.word	0x08002d78
 800113c:	2000003a 	.word	0x2000003a
 8001140:	08002d9c 	.word	0x08002d9c
 8001144:	08002dc0 	.word	0x08002dc0
 8001148:	08002dd4 	.word	0x08002dd4
 800114c:	2000006b 	.word	0x2000006b
 8001150:	20000038 	.word	0x20000038
 8001154:	20000068 	.word	0x20000068
 8001158:	20000062 	.word	0x20000062
 800115c:	20000069 	.word	0x20000069
 8001160:	08002de8 	.word	0x08002de8
 8001164:	2000006d 	.word	0x2000006d
 8001168:	40004400 	.word	0x40004400
 800116c:	2000005c 	.word	0x2000005c
 8001170:	08000004 	.word	0x08000004

08001174 <ABCM_uddtDetermineCarState>:
 * @param copy_u8Action
 * @return EN_ABCM_carStates_t
 */

EN_ABCM_carStates_t ABCM_uddtDetermineCarState(uint8_t copy_u8Action)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	/* local variable store return of the function */
	EN_ABCM_carStates_t ret;

	/* switch to know what to return depend on the driver choice */
	switch(copy_u8Action)
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b7a      	cmp	r3, #122	; 0x7a
 8001182:	f300 8193 	bgt.w	80014ac <ABCM_uddtDetermineCarState+0x338>
 8001186:	2b61      	cmp	r3, #97	; 0x61
 8001188:	da06      	bge.n	8001198 <ABCM_uddtDetermineCarState+0x24>
 800118a:	2b2b      	cmp	r3, #43	; 0x2b
 800118c:	f000 8143 	beq.w	8001416 <ABCM_uddtDetermineCarState+0x2a2>
 8001190:	2b2d      	cmp	r3, #45	; 0x2d
 8001192:	f000 8140 	beq.w	8001416 <ABCM_uddtDetermineCarState+0x2a2>
 8001196:	e189      	b.n	80014ac <ABCM_uddtDetermineCarState+0x338>
 8001198:	3b61      	subs	r3, #97	; 0x61
 800119a:	2b19      	cmp	r3, #25
 800119c:	f200 8186 	bhi.w	80014ac <ABCM_uddtDetermineCarState+0x338>
 80011a0:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <ABCM_uddtDetermineCarState+0x34>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	0800128d 	.word	0x0800128d
 80011ac:	080014ad 	.word	0x080014ad
 80011b0:	080014ad 	.word	0x080014ad
 80011b4:	080014ad 	.word	0x080014ad
 80011b8:	080014ad 	.word	0x080014ad
 80011bc:	080014ad 	.word	0x080014ad
 80011c0:	080014ad 	.word	0x080014ad
 80011c4:	080014ad 	.word	0x080014ad
 80011c8:	080014ad 	.word	0x080014ad
 80011cc:	080013c1 	.word	0x080013c1
 80011d0:	08001331 	.word	0x08001331
 80011d4:	080014ad 	.word	0x080014ad
 80011d8:	080014ad 	.word	0x080014ad
 80011dc:	0800123b 	.word	0x0800123b
 80011e0:	08001211 	.word	0x08001211
 80011e4:	080014ad 	.word	0x080014ad
 80011e8:	080014ad 	.word	0x080014ad
 80011ec:	080014ad 	.word	0x080014ad
 80011f0:	080012df 	.word	0x080012df
 80011f4:	080014ad 	.word	0x080014ad
 80011f8:	080014ad 	.word	0x080014ad
 80011fc:	080014ad 	.word	0x080014ad
 8001200:	080014ad 	.word	0x080014ad
 8001204:	080014ad 	.word	0x080014ad
 8001208:	080014ad 	.word	0x080014ad
 800120c:	08001379 	.word	0x08001379
	{
	case 'o' :  /* choice o : mean to turn on car */
	{
		/* check if the car is off  */
		if(gl_u8CarIsOnFlag == 0)
 8001210:	4b9f      	ldr	r3, [pc, #636]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <ABCM_uddtDetermineCarState+0xb0>
		{
			/* set the gl_u8CarIsOnFlag (global flag) to indicate all of the system that the car is on */
			gl_u8CarIsOnFlag = 1;
 8001218:	4b9d      	ldr	r3, [pc, #628]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
			/* return to ABCM_CAR_ON state */
			ret = ABCM_CAR_ON;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
			/* return to ABCM_CAR_GET_FAULT state */
			ret = ABCM_CAR_GET_FAULT;
		}
		else {/* DO Nothing */};
		/* break the switch */
		break;
 8001222:	e149      	b.n	80014b8 <ABCM_uddtDetermineCarState+0x344>
		else if(gl_u8CarIsOnFlag == 1)
 8001224:	4b9a      	ldr	r3, [pc, #616]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	f040 8145 	bne.w	80014b8 <ABCM_uddtDetermineCarState+0x344>
			gl_uddtFaultCode = ABCM_FAULT_CAR_IS_ALREADY_ON;
 800122e:	4b99      	ldr	r3, [pc, #612]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
			ret = ABCM_CAR_GET_FAULT;
 8001234:	2305      	movs	r3, #5
 8001236:	73fb      	strb	r3, [r7, #15]
		break;
 8001238:	e13e      	b.n	80014b8 <ABCM_uddtDetermineCarState+0x344>
	}
	case 'n' : 	/* choice n : mean to turn on NCC */
	{
		/* check if the NCC is off  */
		if(gl_u8NccIsOnFlag == 0)
 800123a:	4b97      	ldr	r3, [pc, #604]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d119      	bne.n	8001276 <ABCM_uddtDetermineCarState+0x102>
		{
			/* check if the car is on */
			if(gl_u8CarIsOnFlag == 1 )
 8001242:	4b93      	ldr	r3, [pc, #588]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10f      	bne.n	800126a <ABCM_uddtDetermineCarState+0xf6>
			{
				/* check if the ACC is off */
				if(gl_u8AccIsOnFlag == 0)
 800124a:	4b94      	ldr	r3, [pc, #592]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d105      	bne.n	800125e <ABCM_uddtDetermineCarState+0xea>
				{
					/* set the gl_u8NccIsOnFlag (global flag) to indicate all of the system that the NCC is on */
					gl_u8NccIsOnFlag = 1;
 8001252:	4b91      	ldr	r3, [pc, #580]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
					/* return to ABCM_CAR_NCC_ACTIVE state */
					ret = ABCM_CAR_NCC_ACTIVE;
 8001258:	2302      	movs	r3, #2
 800125a:	73fb      	strb	r3, [r7, #15]
			/* return to ABCM_CAR_GET_FAULT state */
			ret = ABCM_CAR_GET_FAULT;
		}
		else {/* DO Nothing */};
		/* break the switch */
		break;
 800125c:	e12e      	b.n	80014bc <ABCM_uddtDetermineCarState+0x348>
					gl_uddtFaultCode = ABCM_FAULT_ACC_IS_ALREADY_ACTIVE;
 800125e:	4b8d      	ldr	r3, [pc, #564]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001260:	2203      	movs	r2, #3
 8001262:	701a      	strb	r2, [r3, #0]
					ret = ABCM_CAR_GET_FAULT;
 8001264:	2305      	movs	r3, #5
 8001266:	73fb      	strb	r3, [r7, #15]
		break;
 8001268:	e128      	b.n	80014bc <ABCM_uddtDetermineCarState+0x348>
				gl_uddtFaultCode = ABCM_FAULT_CAR_IS_ALREADY_OFF;
 800126a:	4b8a      	ldr	r3, [pc, #552]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 800126c:	2204      	movs	r2, #4
 800126e:	701a      	strb	r2, [r3, #0]
				ret = ABCM_CAR_GET_FAULT;
 8001270:	2305      	movs	r3, #5
 8001272:	73fb      	strb	r3, [r7, #15]
				break;
 8001274:	e12d      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
		else if(gl_u8NccIsOnFlag == 1)
 8001276:	4b88      	ldr	r3, [pc, #544]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	f040 811e 	bne.w	80014bc <ABCM_uddtDetermineCarState+0x348>
			gl_uddtFaultCode = ABCM_FAULT_NCC_IS_ALREADY_ACTIVE;
 8001280:	4b84      	ldr	r3, [pc, #528]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001282:	2202      	movs	r2, #2
 8001284:	701a      	strb	r2, [r3, #0]
			ret = ABCM_CAR_GET_FAULT;
 8001286:	2305      	movs	r3, #5
 8001288:	73fb      	strb	r3, [r7, #15]
		break;
 800128a:	e117      	b.n	80014bc <ABCM_uddtDetermineCarState+0x348>
	}
	case 'a' : /* choice a : mean to turn on ACC */
	{
		/* check if the ACC is off  */
		if(gl_u8AccIsOnFlag == 0)
 800128c:	4b83      	ldr	r3, [pc, #524]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d119      	bne.n	80012c8 <ABCM_uddtDetermineCarState+0x154>
		{
			/* check if the car is on */
			if(gl_u8CarIsOnFlag == 1)
 8001294:	4b7e      	ldr	r3, [pc, #504]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d10f      	bne.n	80012bc <ABCM_uddtDetermineCarState+0x148>
			{
				/* check if the NCC is off */
				if(gl_u8NccIsOnFlag == 0)
 800129c:	4b7e      	ldr	r3, [pc, #504]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d105      	bne.n	80012b0 <ABCM_uddtDetermineCarState+0x13c>
				{
					/* set the gl_u8AccIsOnFlag (global flag) to indicate all of the system that the ACC is on */
					gl_u8AccIsOnFlag = 1;
 80012a4:	4b7d      	ldr	r3, [pc, #500]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
					/* return to ABCM_CAR_ACC_SET state */
					ret = ABCM_CAR_ACC_SET;
 80012aa:	2303      	movs	r3, #3
 80012ac:	73fb      	strb	r3, [r7, #15]
			/* return to ABCM_CAR_GET_FAULT state */
			ret = ABCM_CAR_GET_FAULT;
		}
		else {/* DO Nothing */};
		/* break the switch */
		break;
 80012ae:	e107      	b.n	80014c0 <ABCM_uddtDetermineCarState+0x34c>
					gl_uddtFaultCode = ABCM_FAULT_NCC_IS_ALREADY_ACTIVE;
 80012b0:	4b78      	ldr	r3, [pc, #480]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]
					ret = ABCM_CAR_GET_FAULT;
 80012b6:	2305      	movs	r3, #5
 80012b8:	73fb      	strb	r3, [r7, #15]
		break;
 80012ba:	e101      	b.n	80014c0 <ABCM_uddtDetermineCarState+0x34c>
				gl_uddtFaultCode = ABCM_FAULT_CAR_IS_ALREADY_OFF;
 80012bc:	4b75      	ldr	r3, [pc, #468]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 80012be:	2204      	movs	r2, #4
 80012c0:	701a      	strb	r2, [r3, #0]
				ret = ABCM_CAR_GET_FAULT;
 80012c2:	2305      	movs	r3, #5
 80012c4:	73fb      	strb	r3, [r7, #15]
				break;
 80012c6:	e104      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
		else if(gl_u8AccIsOnFlag == 1)
 80012c8:	4b74      	ldr	r3, [pc, #464]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	f040 80f7 	bne.w	80014c0 <ABCM_uddtDetermineCarState+0x34c>
			gl_uddtFaultCode = ABCM_FAULT_ACC_IS_ALREADY_ACTIVE;
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 80012d4:	2203      	movs	r2, #3
 80012d6:	701a      	strb	r2, [r3, #0]
			ret = ABCM_CAR_GET_FAULT;
 80012d8:	2305      	movs	r3, #5
 80012da:	73fb      	strb	r3, [r7, #15]
		break;
 80012dc:	e0f0      	b.n	80014c0 <ABCM_uddtDetermineCarState+0x34c>
	}
	case 's' : /* choice s : mean to turn off car */
	{
		/* check if the car is on */
		if(gl_u8CarIsOnFlag == 1)
 80012de:	4b6c      	ldr	r3, [pc, #432]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d119      	bne.n	800131a <ABCM_uddtDetermineCarState+0x1a6>
		{
			/* check if the NCC is off */
			if(gl_u8NccIsOnFlag == 0)
 80012e6:	4b6c      	ldr	r3, [pc, #432]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10f      	bne.n	800130e <ABCM_uddtDetermineCarState+0x19a>
			{
				/* check if the ACC is off */
				if(gl_u8AccIsOnFlag == 0)
 80012ee:	4b6b      	ldr	r3, [pc, #428]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <ABCM_uddtDetermineCarState+0x18e>
				{
					/* clear the gl_u8CarIsOnFlag (global flag) to indicate all of the system that the car is off */
					gl_u8CarIsOnFlag = 0;
 80012f6:	4b66      	ldr	r3, [pc, #408]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
					/* return to ABCM_CAR_STANDBY state */
					ret = ABCM_CAR_STANDBY;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
			/* return to ABCM_CAR_GET_FAULT state */
			ret = ABCM_CAR_GET_FAULT;
		}
		else {/* DO Nothing */};
		/* break the switch */
		break;
 8001300:	e0e0      	b.n	80014c4 <ABCM_uddtDetermineCarState+0x350>
					gl_uddtFaultCode = ABCM_FAULT_ACC_IS_ALREADY_ACTIVE;
 8001302:	4b64      	ldr	r3, [pc, #400]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001304:	2203      	movs	r2, #3
 8001306:	701a      	strb	r2, [r3, #0]
					ret = ABCM_CAR_GET_FAULT;
 8001308:	2305      	movs	r3, #5
 800130a:	73fb      	strb	r3, [r7, #15]
		break;
 800130c:	e0da      	b.n	80014c4 <ABCM_uddtDetermineCarState+0x350>
				gl_uddtFaultCode = ABCM_FAULT_NCC_IS_ALREADY_ACTIVE;
 800130e:	4b61      	ldr	r3, [pc, #388]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001310:	2202      	movs	r2, #2
 8001312:	701a      	strb	r2, [r3, #0]
				ret = ABCM_CAR_GET_FAULT;
 8001314:	2305      	movs	r3, #5
 8001316:	73fb      	strb	r3, [r7, #15]
		break;
 8001318:	e0d4      	b.n	80014c4 <ABCM_uddtDetermineCarState+0x350>
		else if(gl_u8CarIsOnFlag == 0)
 800131a:	4b5d      	ldr	r3, [pc, #372]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 80d0 	bne.w	80014c4 <ABCM_uddtDetermineCarState+0x350>
			gl_uddtFaultCode = ABCM_FAULT_CAR_IS_ALREADY_OFF;
 8001324:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001326:	2204      	movs	r2, #4
 8001328:	701a      	strb	r2, [r3, #0]
			ret = ABCM_CAR_GET_FAULT;
 800132a:	2305      	movs	r3, #5
 800132c:	73fb      	strb	r3, [r7, #15]
		break;
 800132e:	e0c9      	b.n	80014c4 <ABCM_uddtDetermineCarState+0x350>
	}
	case 'k' : /* choice k : mean to turn off NCC */
	{
		/* check if the car is on */
		if((gl_u8CarIsOnFlag == 1))
 8001330:	4b57      	ldr	r3, [pc, #348]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d114      	bne.n	8001362 <ABCM_uddtDetermineCarState+0x1ee>
		{
			/* check if the NCC is on */
			if(gl_u8NccIsOnFlag == 1)
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d105      	bne.n	800134c <ABCM_uddtDetermineCarState+0x1d8>
			{
				/* clear the gl_u8NccIsOnFlag (global flag) to indicate all of the system that the NCC is off */
				gl_u8NccIsOnFlag = 0;
 8001340:	4b55      	ldr	r3, [pc, #340]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
				/* return to ABCM_CAR_NCC_OFF state */
				ret = ABCM_CAR_NCC_OFF;
 8001346:	2306      	movs	r3, #6
 8001348:	73fb      	strb	r3, [r7, #15]
			/* return to ABCM_CAR_GET_FAULT state */
			ret = ABCM_CAR_GET_FAULT;
		}
		else {/* DO Nothing */};
		/* break the switch */
		break;
 800134a:	e0bd      	b.n	80014c8 <ABCM_uddtDetermineCarState+0x354>
			else if(gl_u8NccIsOnFlag == 0)
 800134c:	4b52      	ldr	r3, [pc, #328]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	f040 80b9 	bne.w	80014c8 <ABCM_uddtDetermineCarState+0x354>
				gl_uddtFaultCode = ABCM_FAULT_NCC_IS_ALREADY_OFF;
 8001356:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001358:	2206      	movs	r2, #6
 800135a:	701a      	strb	r2, [r3, #0]
				ret = ABCM_CAR_GET_FAULT;
 800135c:	2305      	movs	r3, #5
 800135e:	73fb      	strb	r3, [r7, #15]
		break;
 8001360:	e0b2      	b.n	80014c8 <ABCM_uddtDetermineCarState+0x354>
		else if(gl_u8CarIsOnFlag == 0)
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 80ae 	bne.w	80014c8 <ABCM_uddtDetermineCarState+0x354>
			gl_uddtFaultCode = ABCM_FAULT_CAR_IS_ALREADY_OFF;
 800136c:	4b49      	ldr	r3, [pc, #292]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 800136e:	2204      	movs	r2, #4
 8001370:	701a      	strb	r2, [r3, #0]
			ret = ABCM_CAR_GET_FAULT;
 8001372:	2305      	movs	r3, #5
 8001374:	73fb      	strb	r3, [r7, #15]
		break;
 8001376:	e0a7      	b.n	80014c8 <ABCM_uddtDetermineCarState+0x354>
	}
	case 'z' : /* choice z : mean to turn off ACC */
	{
		/* check if the car is on */
		if((gl_u8CarIsOnFlag == 1))
 8001378:	4b45      	ldr	r3, [pc, #276]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d114      	bne.n	80013aa <ABCM_uddtDetermineCarState+0x236>
		{
			/* check if the ACC is on */
			if(gl_u8AccIsOnFlag == 1)
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <ABCM_uddtDetermineCarState+0x220>
			{
				/* clear the gl_u8AccIsOnFlag (global flag) to indicate all of the system that the ACC is off */
				gl_u8AccIsOnFlag = 0;
 8001388:	4b44      	ldr	r3, [pc, #272]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
				/* return to ABCM_CAR_ACC_OFF state */
				ret = ABCM_CAR_ACC_OFF;
 800138e:	2307      	movs	r3, #7
 8001390:	73fb      	strb	r3, [r7, #15]
			/* return to ABCM_CAR_GET_FAULT state */
			ret = ABCM_CAR_GET_FAULT;
		}
		else {/* DO Nothing */};
		/* break the switch */
		break;
 8001392:	e09b      	b.n	80014cc <ABCM_uddtDetermineCarState+0x358>
			else if(gl_u8AccIsOnFlag == 0)
 8001394:	4b41      	ldr	r3, [pc, #260]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f040 8097 	bne.w	80014cc <ABCM_uddtDetermineCarState+0x358>
				gl_uddtFaultCode = ABCM_FAULT_ACC_IS_ALREADY_OFF;
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 80013a0:	2205      	movs	r2, #5
 80013a2:	701a      	strb	r2, [r3, #0]
				ret = ABCM_CAR_GET_FAULT;
 80013a4:	2305      	movs	r3, #5
 80013a6:	73fb      	strb	r3, [r7, #15]
		break;
 80013a8:	e090      	b.n	80014cc <ABCM_uddtDetermineCarState+0x358>
		else if(gl_u8CarIsOnFlag == 0)
 80013aa:	4b39      	ldr	r3, [pc, #228]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 808c 	bne.w	80014cc <ABCM_uddtDetermineCarState+0x358>
			gl_uddtFaultCode = ABCM_FAULT_CAR_IS_ALREADY_OFF;
 80013b4:	4b37      	ldr	r3, [pc, #220]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	701a      	strb	r2, [r3, #0]
			ret = ABCM_CAR_GET_FAULT;
 80013ba:	2305      	movs	r3, #5
 80013bc:	73fb      	strb	r3, [r7, #15]
		break;
 80013be:	e085      	b.n	80014cc <ABCM_uddtDetermineCarState+0x358>
	}
	case 'j': /* choice j : mean driver want to update the firmware */
	{
		/* check if the car is off */
		if(gl_u8CarIsOnFlag == 0)
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d120      	bne.n	800140a <ABCM_uddtDetermineCarState+0x296>
		{
			/* check if the ACC is off */
			if(gl_u8AccIsOnFlag == 0)
 80013c8:	4b34      	ldr	r3, [pc, #208]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d116      	bne.n	80013fe <ABCM_uddtDetermineCarState+0x28a>
			{
				/* check if the NCC is off */
				if(gl_u8NccIsOnFlag == 0)
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10c      	bne.n	80013f2 <ABCM_uddtDetermineCarState+0x27e>
				{
					/*check if their is new firmware*/
					if(gl_u8NewFirmwareFlag == 1)
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <ABCM_uddtDetermineCarState+0x32c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d102      	bne.n	80013e6 <ABCM_uddtDetermineCarState+0x272>
					{
						/* return to ABCM_UPDATE_FIRMWARE state */
						ret = ABCM_UPDATE_FIRMWARE;
 80013e0:	2309      	movs	r3, #9
 80013e2:	73fb      	strb	r3, [r7, #15]
			gl_uddtFaultCode = ABCM_FAULT_CAR_IS_ALREADY_ON;
			/* return to ABCM_CAR_GET_FAULT state */
			ret = ABCM_CAR_GET_FAULT;
		}
		/* break the switch */
		break;
 80013e4:	e075      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
						gl_uddtFaultCode = ABCM_NO_FIRMWARE;
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 80013e8:	2209      	movs	r2, #9
 80013ea:	701a      	strb	r2, [r3, #0]
						ret = ABCM_CAR_GET_FAULT;
 80013ec:	2305      	movs	r3, #5
 80013ee:	73fb      	strb	r3, [r7, #15]
		break;
 80013f0:	e06f      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
					gl_uddtFaultCode = ABCM_FAULT_NCC_IS_ALREADY_ACTIVE;
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	701a      	strb	r2, [r3, #0]
					ret = ABCM_CAR_GET_FAULT;
 80013f8:	2305      	movs	r3, #5
 80013fa:	73fb      	strb	r3, [r7, #15]
		break;
 80013fc:	e069      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
				gl_uddtFaultCode = ABCM_FAULT_ACC_IS_ALREADY_ACTIVE;
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001400:	2203      	movs	r2, #3
 8001402:	701a      	strb	r2, [r3, #0]
				ret = ABCM_CAR_GET_FAULT;
 8001404:	2305      	movs	r3, #5
 8001406:	73fb      	strb	r3, [r7, #15]
		break;
 8001408:	e063      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
			gl_uddtFaultCode = ABCM_FAULT_CAR_IS_ALREADY_ON;
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
			ret = ABCM_CAR_GET_FAULT;
 8001410:	2305      	movs	r3, #5
 8001412:	73fb      	strb	r3, [r7, #15]
		break;
 8001414:	e05d      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
	}
	case '+' : /* choice + : mean to increment speed */
	case '-' : /* choice + : mean to decrement speed */
	{
		/* check if the car is on */
		if(gl_u8CarIsOnFlag == 1)
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d12d      	bne.n	800147a <ABCM_uddtDetermineCarState+0x306>
		{
			/* check if the NCC is off */
			if(gl_u8NccIsOnFlag == 0)
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <ABCM_uddtDetermineCarState+0x324>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d119      	bne.n	800145a <ABCM_uddtDetermineCarState+0x2e6>
			{
				/* check if the ACC is off */
				if(gl_u8AccIsOnFlag == 0)
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <ABCM_uddtDetermineCarState+0x328>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <ABCM_uddtDetermineCarState+0x2c6>
				{
					/* ACC is off and NCC is off so assign fault code in gl_uddtFaultCode (global variable) to notify driver */
					gl_uddtFaultCode = ABCM_FAULT_ACC_NOR_NCC_IS_WORKING;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001430:	2208      	movs	r2, #8
 8001432:	701a      	strb	r2, [r3, #0]
					/* return to ABCM_CAR_GET_FAULT state */
					ret = ABCM_CAR_GET_FAULT;
 8001434:	2305      	movs	r3, #5
 8001436:	73fb      	strb	r3, [r7, #15]
			/* return to ABCM_CAR_GET_FAULT state */
			ret = ABCM_CAR_GET_FAULT;
		}
		else {/* DO Nothing */};
		/* break the switch */
		break;
 8001438:	e04a      	b.n	80014d0 <ABCM_uddtDetermineCarState+0x35c>
					if(copy_u8Action == '+')
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b2b      	cmp	r3, #43	; 0x2b
 800143e:	d103      	bne.n	8001448 <ABCM_uddtDetermineCarState+0x2d4>
						gl_u8IncSpeedFlag = 1;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <ABCM_uddtDetermineCarState+0x330>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	e005      	b.n	8001454 <ABCM_uddtDetermineCarState+0x2e0>
					else if(copy_u8Action == '-')
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b2d      	cmp	r3, #45	; 0x2d
 800144c:	d102      	bne.n	8001454 <ABCM_uddtDetermineCarState+0x2e0>
						gl_u8DecSpeedFlag = 1;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <ABCM_uddtDetermineCarState+0x334>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
					ret = ABCM_CHANGE_SPEED_LIMIT;
 8001454:	230a      	movs	r3, #10
 8001456:	73fb      	strb	r3, [r7, #15]
		break;
 8001458:	e03a      	b.n	80014d0 <ABCM_uddtDetermineCarState+0x35c>
				if(copy_u8Action == '+')
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b2b      	cmp	r3, #43	; 0x2b
 800145e:	d103      	bne.n	8001468 <ABCM_uddtDetermineCarState+0x2f4>
					gl_u8IncSpeedFlag = 1;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <ABCM_uddtDetermineCarState+0x330>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	e005      	b.n	8001474 <ABCM_uddtDetermineCarState+0x300>
				else if(copy_u8Action == '-')
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b2d      	cmp	r3, #45	; 0x2d
 800146c:	d102      	bne.n	8001474 <ABCM_uddtDetermineCarState+0x300>
					gl_u8DecSpeedFlag = 1;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <ABCM_uddtDetermineCarState+0x334>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
				ret = ABCM_CHANGE_SPEED_LIMIT;
 8001474:	230a      	movs	r3, #10
 8001476:	73fb      	strb	r3, [r7, #15]
		break;
 8001478:	e02a      	b.n	80014d0 <ABCM_uddtDetermineCarState+0x35c>
		else if(gl_u8CarIsOnFlag == 0)
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <ABCM_uddtDetermineCarState+0x31c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d126      	bne.n	80014d0 <ABCM_uddtDetermineCarState+0x35c>
			gl_uddtFaultCode = ABCM_FAULT_CAR_IS_ALREADY_OFF;
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <ABCM_uddtDetermineCarState+0x320>)
 8001484:	2204      	movs	r2, #4
 8001486:	701a      	strb	r2, [r3, #0]
			ret = ABCM_CAR_GET_FAULT;
 8001488:	2305      	movs	r3, #5
 800148a:	73fb      	strb	r3, [r7, #15]
		break;
 800148c:	e020      	b.n	80014d0 <ABCM_uddtDetermineCarState+0x35c>
 800148e:	bf00      	nop
 8001490:	2000006a 	.word	0x2000006a
 8001494:	20000060 	.word	0x20000060
 8001498:	2000006b 	.word	0x2000006b
 800149c:	2000006c 	.word	0x2000006c
 80014a0:	2000006d 	.word	0x2000006d
 80014a4:	20000068 	.word	0x20000068
 80014a8:	20000069 	.word	0x20000069
	}
	default : /* default : mean that the input is unknown */
	{
		/* send the action to function that determine the fault & what to do */
		ret = ABCM_uddtFaultDetection('#');
 80014ac:	2023      	movs	r0, #35	; 0x23
 80014ae:	f000 f815 	bl	80014dc <ABCM_uddtFaultDetection>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e00c      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
		break;
 80014b8:	bf00      	nop
 80014ba:	e00a      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
		break;
 80014bc:	bf00      	nop
 80014be:	e008      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
		break;
 80014c0:	bf00      	nop
 80014c2:	e006      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
		break;
 80014c4:	bf00      	nop
 80014c6:	e004      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
		break;
 80014c8:	bf00      	nop
 80014ca:	e002      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
		break;
 80014cc:	bf00      	nop
 80014ce:	e000      	b.n	80014d2 <ABCM_uddtDetermineCarState+0x35e>
		break;
 80014d0:	bf00      	nop
	}
	}
	/*return the state of the car to perform the determined logic*/
	return ret;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <ABCM_uddtFaultDetection>:
 * @param copy_uddtFaultCode
 * @return EN_ABCM_carStates_t
 */

EN_ABCM_carStates_t ABCM_uddtFaultDetection(EN_ABCM_faultCodes_t copy_uddtFaultCode)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	/* local variable store return of the function */
	EN_ABCM_carStates_t ret;

	/*switch to know from the fault code what to do */
	switch(copy_uddtFaultCode)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d85e      	bhi.n	80015ac <ABCM_uddtFaultDetection+0xd0>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <ABCM_uddtFaultDetection+0x18>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001519 	.word	0x08001519
 80014f8:	08001527 	.word	0x08001527
 80014fc:	08001535 	.word	0x08001535
 8001500:	08001543 	.word	0x08001543
 8001504:	0800155f 	.word	0x0800155f
 8001508:	08001551 	.word	0x08001551
 800150c:	0800156d 	.word	0x0800156d
 8001510:	08001591 	.word	0x08001591
 8001514:	0800159f 	.word	0x0800159f
	{
	case ABCM_FAULT_CAR_IS_ALREADY_ON : /* this code mean that the driver want to turn car on but it is already on */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 1 : Car Is Already On \r\n");
 8001518:	4931      	ldr	r1, [pc, #196]	; (80015e0 <ABCM_uddtFaultDetection+0x104>)
 800151a:	4832      	ldr	r0, [pc, #200]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 800151c:	f000 fae2 	bl	8001ae4 <HHC05_uddtTransmitString>
		/* return to ABCM_CAR_RECVINIG state */
		ret = ABCM_CAR_IDLE;
 8001520:	2308      	movs	r3, #8
 8001522:	73fb      	strb	r3, [r7, #15]
		/* break the switch */
		break;
 8001524:	e057      	b.n	80015d6 <ABCM_uddtFaultDetection+0xfa>
	}
	case ABCM_FAULT_NCC_IS_ALREADY_ACTIVE : /* this code mean that the driver want to turn NCC on but it is already on */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 2 : NCC Is Already Active \r\n");
 8001526:	4930      	ldr	r1, [pc, #192]	; (80015e8 <ABCM_uddtFaultDetection+0x10c>)
 8001528:	482e      	ldr	r0, [pc, #184]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 800152a:	f000 fadb 	bl	8001ae4 <HHC05_uddtTransmitString>
		/* return to ABCM_CAR_RECVINIG state */
		ret = ABCM_CAR_IDLE;
 800152e:	2308      	movs	r3, #8
 8001530:	73fb      	strb	r3, [r7, #15]
		/* break the switch */
		break;
 8001532:	e050      	b.n	80015d6 <ABCM_uddtFaultDetection+0xfa>
	}
	case ABCM_FAULT_ACC_IS_ALREADY_ACTIVE : /* this code mean that the driver want to turn ACC on but it is already on */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 3 : ACC Is Already Active \r\n");
 8001534:	492d      	ldr	r1, [pc, #180]	; (80015ec <ABCM_uddtFaultDetection+0x110>)
 8001536:	482b      	ldr	r0, [pc, #172]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 8001538:	f000 fad4 	bl	8001ae4 <HHC05_uddtTransmitString>
		/* return to ABCM_CAR_RECVINIG state */
		ret = ABCM_CAR_ACC_ACTIVE;
 800153c:	2304      	movs	r3, #4
 800153e:	73fb      	strb	r3, [r7, #15]
		/* break the switch */
		break;
 8001540:	e049      	b.n	80015d6 <ABCM_uddtFaultDetection+0xfa>
	}
	case ABCM_FAULT_CAR_IS_ALREADY_OFF : /* this code mean that the driver want to turn car off but it is already off */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 4 : Car Is Already Off \r\n");
 8001542:	492b      	ldr	r1, [pc, #172]	; (80015f0 <ABCM_uddtFaultDetection+0x114>)
 8001544:	4827      	ldr	r0, [pc, #156]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 8001546:	f000 facd 	bl	8001ae4 <HHC05_uddtTransmitString>
		/* return to ABCM_CAR_STANDBY state */
		ret = ABCM_CAR_STANDBY;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
		/* break the switch */
		break;
 800154e:	e042      	b.n	80015d6 <ABCM_uddtFaultDetection+0xfa>
	}
	case ABCM_FAULT_NCC_IS_ALREADY_OFF : /* this code mean that the driver want to turn NCC off but it is already off */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 5 : NCC Is Already Off \r\n");
 8001550:	4928      	ldr	r1, [pc, #160]	; (80015f4 <ABCM_uddtFaultDetection+0x118>)
 8001552:	4824      	ldr	r0, [pc, #144]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 8001554:	f000 fac6 	bl	8001ae4 <HHC05_uddtTransmitString>
		/* return to ABCM_CAR_RECVINIG state */
		ret = ABCM_CAR_IDLE;
 8001558:	2308      	movs	r3, #8
 800155a:	73fb      	strb	r3, [r7, #15]
		/* break the switch */
		break;
 800155c:	e03b      	b.n	80015d6 <ABCM_uddtFaultDetection+0xfa>
	}
	case ABCM_FAULT_ACC_IS_ALREADY_OFF : /* this code mean that the driver want to turn ACC off but it is already off */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 6 : ACC Is Already Off \r\n");
 800155e:	4926      	ldr	r1, [pc, #152]	; (80015f8 <ABCM_uddtFaultDetection+0x11c>)
 8001560:	4820      	ldr	r0, [pc, #128]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 8001562:	f000 fabf 	bl	8001ae4 <HHC05_uddtTransmitString>
		/* return to ABCM_CAR_RECVINIG state */
		ret = ABCM_CAR_IDLE;
 8001566:	2308      	movs	r3, #8
 8001568:	73fb      	strb	r3, [r7, #15]
		/* break the switch */
		break;
 800156a:	e034      	b.n	80015d6 <ABCM_uddtFaultDetection+0xfa>
	}
	case ABCM_FAULT_SPEED_RANGE_INVALID : /* this code mean that the driver input invalid speed range */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 7 : Setting Speed Out Of The Range Of (1 To 100) \r\n");
 800156c:	4923      	ldr	r1, [pc, #140]	; (80015fc <ABCM_uddtFaultDetection+0x120>)
 800156e:	481d      	ldr	r0, [pc, #116]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 8001570:	f000 fab8 	bl	8001ae4 <HHC05_uddtTransmitString>
		/*check driver set the speed for NCC or ACC to return to correct state*/
		/*check if the NCC is on*/
		if(gl_u8NccIsOnFlag == 1)
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <ABCM_uddtFaultDetection+0x124>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d102      	bne.n	8001582 <ABCM_uddtFaultDetection+0xa6>
		{
			/* return to ABCM_CAR_IDLE state */
			ret = ABCM_CAR_IDLE;
 800157c:	2308      	movs	r3, #8
 800157e:	73fb      	strb	r3, [r7, #15]
			/* return to ABCM_CAR_ACC_ACTIVE state */
			ret = ABCM_CAR_ACC_SET;
		}
		else{/*Do Nothing*/};
		/* break the switch */
		break;
 8001580:	e026      	b.n	80015d0 <ABCM_uddtFaultDetection+0xf4>
		else if(gl_u8AccIsOnFlag == 1)
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <ABCM_uddtFaultDetection+0x128>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d122      	bne.n	80015d0 <ABCM_uddtFaultDetection+0xf4>
			ret = ABCM_CAR_ACC_SET;
 800158a:	2303      	movs	r3, #3
 800158c:	73fb      	strb	r3, [r7, #15]
		break;
 800158e:	e01f      	b.n	80015d0 <ABCM_uddtFaultDetection+0xf4>
	}
	case ABCM_FAULT_ACC_NOR_NCC_IS_WORKING : /* this code mean that driver want to change speed but ACC & NCC is not working */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 8 : Can't Change Speed ACC & NCC Is Not Working \r\n");
 8001590:	491d      	ldr	r1, [pc, #116]	; (8001608 <ABCM_uddtFaultDetection+0x12c>)
 8001592:	4814      	ldr	r0, [pc, #80]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 8001594:	f000 faa6 	bl	8001ae4 <HHC05_uddtTransmitString>
		/* return to ABCM_CAR_ABCM_CAR_STANDBY state */
		ret = ABCM_CAR_IDLE;
 8001598:	2308      	movs	r3, #8
 800159a:	73fb      	strb	r3, [r7, #15]
		/* break the switch */
		break;
 800159c:	e01b      	b.n	80015d6 <ABCM_uddtFaultDetection+0xfa>
	}
	case ABCM_NO_FIRMWARE : /* this code mean that the driver want to get new update but their is no new update */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault 9 : No New Update For The Firmware On The Server \r\n");
 800159e:	491b      	ldr	r1, [pc, #108]	; (800160c <ABCM_uddtFaultDetection+0x130>)
 80015a0:	4810      	ldr	r0, [pc, #64]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 80015a2:	f000 fa9f 	bl	8001ae4 <HHC05_uddtTransmitString>
		/* return to ABCM_CAR_ABCM_CAR_STANDBY state */
		ret = ABCM_CAR_STANDBY;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
		/* break the switch */
		break;
 80015aa:	e014      	b.n	80015d6 <ABCM_uddtFaultDetection+0xfa>
	}
	default: /* default : mean that the input is unknown */
	{
		/* transmit a massage for the driver with UART with fault code & short description about it*/
		HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Fault  : Invalid Option \r\n");
 80015ac:	4918      	ldr	r1, [pc, #96]	; (8001610 <ABCM_uddtFaultDetection+0x134>)
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <ABCM_uddtFaultDetection+0x108>)
 80015b0:	f000 fa98 	bl	8001ae4 <HHC05_uddtTransmitString>
		/*check if the car is on or off to return to correct state*/
		/*check if the car is on */
		if(gl_u8CarIsOnFlag == 1)
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <ABCM_uddtFaultDetection+0x138>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d102      	bne.n	80015c2 <ABCM_uddtFaultDetection+0xe6>
		{
			/* return to ABCM_CAR_RECVINIG state */
			ret = ABCM_CAR_IDLE;
 80015bc:	2308      	movs	r3, #8
 80015be:	73fb      	strb	r3, [r7, #15]
		{
			/* return to ABCM_CAR_STANDBY state */
			ret = ABCM_CAR_STANDBY;
		}
		/* break the switch */
		break;
 80015c0:	e008      	b.n	80015d4 <ABCM_uddtFaultDetection+0xf8>
		else if(gl_u8CarIsOnFlag == 0)
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <ABCM_uddtFaultDetection+0x138>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d104      	bne.n	80015d4 <ABCM_uddtFaultDetection+0xf8>
			ret = ABCM_CAR_STANDBY;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
		break;
 80015ce:	e001      	b.n	80015d4 <ABCM_uddtFaultDetection+0xf8>
		break;
 80015d0:	bf00      	nop
 80015d2:	e000      	b.n	80015d6 <ABCM_uddtFaultDetection+0xfa>
		break;
 80015d4:	bf00      	nop
	}
	}
	/*return the state of the car to perform the determined logic*/
	return ret;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	08002e0c 	.word	0x08002e0c
 80015e4:	40011000 	.word	0x40011000
 80015e8:	08002e2c 	.word	0x08002e2c
 80015ec:	08002e50 	.word	0x08002e50
 80015f0:	08002e74 	.word	0x08002e74
 80015f4:	08002e94 	.word	0x08002e94
 80015f8:	08002eb4 	.word	0x08002eb4
 80015fc:	08002ed4 	.word	0x08002ed4
 8001600:	2000006b 	.word	0x2000006b
 8001604:	2000006c 	.word	0x2000006c
 8001608:	08002f10 	.word	0x08002f10
 800160c:	08002f4c 	.word	0x08002f4c
 8001610:	08002f88 	.word	0x08002f88
 8001614:	2000006a 	.word	0x2000006a

08001618 <ABCM_vThreadMode>:
 *
 */


void ABCM_vThreadMode(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	/* transmit a massage for the driver with UART with fault code & short description about it*/
	HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Car in dangerous zone all systems are turned off \r\n");
 800161e:	491a      	ldr	r1, [pc, #104]	; (8001688 <ABCM_vThreadMode+0x70>)
 8001620:	481a      	ldr	r0, [pc, #104]	; (800168c <ABCM_vThreadMode+0x74>)
 8001622:	f000 fa5f 	bl	8001ae4 <HHC05_uddtTransmitString>
	/* clear the gl_u8AccIsOnFlag (global flag) to indicate all of the system that the ACC is off */
	gl_u8AccIsOnFlag = 0;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <ABCM_vThreadMode+0x78>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
	/* clear the gl_u8NccIsOnFlag (global flag) to indicate all of the system that the NCC is off */
	gl_u8NccIsOnFlag = 0;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <ABCM_vThreadMode+0x7c>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
	/*local variable to store the zone of AEB in it*/
	EN_AAEB_zones_t lo_uddtAebZone;
	/*Check if car zone */
	lo_uddtAebZone = AAEB_uddtCheckForObstacles(&wheelControl , gl_u32distance);
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <ABCM_vThreadMode+0x80>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <ABCM_vThreadMode+0x84>)
 800163a:	f7ff fb3d 	bl	8000cb8 <AAEB_uddtCheckForObstacles>
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]

	/*check if the car still in a dangerous zone */
	while(lo_uddtAebZone == AAEB_DANGEROUS_ZONE)
 8001642:	e012      	b.n	800166a <ABCM_vThreadMode+0x52>
	{
		send_pulse();
 8001644:	f000 faaa 	bl	8001b9c <send_pulse>
		gl_u32distance = measure_distance();
 8001648:	f000 fabe 	bl	8001bc8 <measure_distance>
 800164c:	4603      	mov	r3, r0
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <ABCM_vThreadMode+0x80>)
 8001650:	6013      	str	r3, [r2, #0]
		delay_us(10000); // 500ms delay
 8001652:	f242 7010 	movw	r0, #10000	; 0x2710
 8001656:	f000 fa75 	bl	8001b44 <delay_us>

		/* stuck in the loop until the car be in a safe zone */
		lo_uddtAebZone = AAEB_uddtCheckForObstacles(&wheelControl , gl_u32distance);
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <ABCM_vThreadMode+0x80>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4619      	mov	r1, r3
 8001660:	480e      	ldr	r0, [pc, #56]	; (800169c <ABCM_vThreadMode+0x84>)
 8001662:	f7ff fb29 	bl	8000cb8 <AAEB_uddtCheckForObstacles>
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	while(lo_uddtAebZone == AAEB_DANGEROUS_ZONE)
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d0e9      	beq.n	8001644 <ABCM_vThreadMode+0x2c>
	}

	/* transmit a massage for the driver with UART with fault code & short description about it*/
	HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Car in safe zone you can turn on any system again\r\n");
 8001670:	490b      	ldr	r1, [pc, #44]	; (80016a0 <ABCM_vThreadMode+0x88>)
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <ABCM_vThreadMode+0x74>)
 8001674:	f000 fa36 	bl	8001ae4 <HHC05_uddtTransmitString>
	gl_uddtCarCondation = ABCM_CAR_ON;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <ABCM_vThreadMode+0x8c>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	08002fa4 	.word	0x08002fa4
 800168c:	40011000 	.word	0x40011000
 8001690:	2000006c 	.word	0x2000006c
 8001694:	2000006b 	.word	0x2000006b
 8001698:	20000064 	.word	0x20000064
 800169c:	20000000 	.word	0x20000000
 80016a0:	08002fd8 	.word	0x08002fd8
 80016a4:	20000061 	.word	0x20000061

080016a8 <ANCC_vStartNcc>:
#include "../../../Inc/APPLICATION/Normal_Cruise_Control/ncc_interface.h"

static uint8_t gl_u8NccSpeedLimit = 0;

void ANCC_vStartNcc(ST_DCM_cfg_t *dcmCfg , uint8_t copy_u8Speed)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
	gl_u8NccSpeedLimit = copy_u8Speed; /* set gl_u8NccSpeedLimit with the default speed limit of car */
 80016b4:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <ANCC_vStartNcc+0x30>)
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	7013      	strb	r3, [r2, #0]
	HDCM_controlSpeed(copy_u8Speed); /* set the speed of NCC taken from driver */
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f9ad 	bl	8001a1c <HDCM_controlSpeed>
	HDCM_turnOn(dcmCfg); /* turn dc motor on to start moving the car */
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f96b 	bl	800199e <HDCM_turnOn>
	HHC05_uddtTransmitString(MUART1_PERIPHERAL,(uint8_t *)"Ncc Is Working Now \r\n");
 80016c8:	4904      	ldr	r1, [pc, #16]	; (80016dc <ANCC_vStartNcc+0x34>)
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <ANCC_vStartNcc+0x38>)
 80016cc:	f000 fa0a 	bl	8001ae4 <HHC05_uddtTransmitString>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000070 	.word	0x20000070
 80016dc:	0800300c 	.word	0x0800300c
 80016e0:	40011000 	.word	0x40011000

080016e4 <ANCC_vStopNcc>:

void ANCC_vStopNcc(ST_DCM_cfg_t *dcmCfg)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	HDCM_controlSpeed(STOP_SPEED); /* set the speed of NCC to stop speed to turn off pwm*/
 80016ec:	2001      	movs	r0, #1
 80016ee:	f000 f995 	bl	8001a1c <HDCM_controlSpeed>
	HDCM_turnOff(dcmCfg); /* turn off dc motors to stop car */
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f932 	bl	800195c <HDCM_turnOff>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ANCC_vChangeNccSpeedLimit>:

uint8_t ANCC_vChangeNccSpeedLimit(uint8_t copy_u8SpeedAction)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	switch(copy_u8SpeedAction)
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b2b      	cmp	r3, #43	; 0x2b
 800170e:	d002      	beq.n	8001716 <ANCC_vChangeNccSpeedLimit+0x16>
 8001710:	2b2d      	cmp	r3, #45	; 0x2d
 8001712:	d00c      	beq.n	800172e <ANCC_vChangeNccSpeedLimit+0x2e>
			break;
		}
		default :
		{
			/*Do Nothing*/
			break;
 8001714:	e017      	b.n	8001746 <ANCC_vChangeNccSpeedLimit+0x46>
			gl_u8NccSpeedLimit+=10;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <ANCC_vChangeNccSpeedLimit+0x54>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	330a      	adds	r3, #10
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <ANCC_vChangeNccSpeedLimit+0x54>)
 8001720:	701a      	strb	r2, [r3, #0]
			HDCM_controlSpeed(gl_u8NccSpeedLimit);
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <ANCC_vChangeNccSpeedLimit+0x54>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f978 	bl	8001a1c <HDCM_controlSpeed>
			break;
 800172c:	e00b      	b.n	8001746 <ANCC_vChangeNccSpeedLimit+0x46>
			gl_u8NccSpeedLimit-=10;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <ANCC_vChangeNccSpeedLimit+0x54>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	3b0a      	subs	r3, #10
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <ANCC_vChangeNccSpeedLimit+0x54>)
 8001738:	701a      	strb	r2, [r3, #0]
			HDCM_controlSpeed(gl_u8NccSpeedLimit);
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <ANCC_vChangeNccSpeedLimit+0x54>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f96c 	bl	8001a1c <HDCM_controlSpeed>
			break;
 8001744:	bf00      	nop
		}
	}
	return gl_u8NccSpeedLimit;
 8001746:	4b03      	ldr	r3, [pc, #12]	; (8001754 <ANCC_vChangeNccSpeedLimit+0x54>)
 8001748:	781b      	ldrb	r3, [r3, #0]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000070 	.word	0x20000070

08001758 <AUDI_vInitInterface>:

#include "../../../Inc/APPLICATION/User_Dashboard_Interface/udi_interface.h"


void AUDI_vInitInterface(ST_MUART_RegistersMap_t *PS_USARTx , ST_MUSART_cfg_t const *PS_uddtUartCfg , void (*ptr)(void))
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	 /* USART init*/
	HHC05_uddtInit(PS_USARTx , PS_uddtUartCfg);
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f98c 	bl	8001a84 <HHC05_uddtInit>
	/* USART enable*/
	HHC05_uddtEnable(PS_USARTx);
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 f999 	bl	8001aa4 <HHC05_uddtEnable>
	/*initialise interrupt of UART2 */
	HHC05_RxIntSetStatus(PS_USARTx , MUSART_ENABLE);
 8001772:	2101      	movs	r1, #1
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 f9c5 	bl	8001b04 <HHC05_RxIntSetStatus>
	/*set callback function of the receive interrupt with function  ESP_uartCallback*/
	HHC05_uddtSetCallBackUart1(ptr);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f9d4 	bl	8001b28 <HHC05_uddtSetCallBackUart1>
}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <AUDI_vStandByDashboard>:

void AUDI_vStandByDashboard(ST_MUART_RegistersMap_t *PS_USARTx)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0fa      	sub	sp, #488	; 0x1e8
 800178c:	af00      	add	r7, sp, #0
 800178e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001792:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001796:	6018      	str	r0, [r3, #0]

	uint8_t lo_u8CarDashboardTemplate[] = {
 8001798:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800179c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017a0:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <AUDI_vStandByDashboard+0x70>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	4611      	mov	r1, r2
 80017a6:	f240 1321 	movw	r3, #289	; 0x121
 80017aa:	461a      	mov	r2, r3
 80017ac:	f001 fa0a 	bl	8002bc4 <memcpy>
			'|', ' ', 'A', 'C', 'C', ' ', 'S', 't', 'a', 't', 'u', 's', ':', ' ', '[', ' ', ' ', ' ','O', 'F', 'F', ' ', ' ',  ' ', ' ', ']', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|','\r','\n',
			'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','\r','\n',
			'\0'
	};

	uint8_t lo_u8TurnCarOn[] = {
 80017b0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80017b4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80017b8:	4a10      	ldr	r2, [pc, #64]	; (80017fc <AUDI_vStandByDashboard+0x74>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	4611      	mov	r1, r2
 80017be:	23b5      	movs	r3, #181	; 0xb5
 80017c0:	461a      	mov	r2, r3
 80017c2:	f001 f9ff 	bl	8002bc4 <memcpy>
			'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','\r','\n',
			'\0'
	};


	HHC05_uddtTransmitString(PS_USARTx,lo_u8CarDashboardTemplate);
 80017c6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80017ca:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80017ce:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80017d2:	4611      	mov	r1, r2
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	f000 f985 	bl	8001ae4 <HHC05_uddtTransmitString>
	HHC05_uddtTransmitString(PS_USARTx,lo_u8TurnCarOn);
 80017da:	f107 020c 	add.w	r2, r7, #12
 80017de:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80017e2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80017e6:	4611      	mov	r1, r2
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f000 f97b 	bl	8001ae4 <HHC05_uddtTransmitString>

}
 80017ee:	bf00      	nop
 80017f0:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	08003024 	.word	0x08003024
 80017fc:	08003148 	.word	0x08003148

08001800 <AUDI_vOnDashboard>:

void AUDI_vOnDashboard(ST_MUART_RegistersMap_t *PS_USARTx)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0d4      	sub	sp, #336	; 0x150
 8001804:	af00      	add	r7, sp, #0
 8001806:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800180a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800180e:	6018      	str	r0, [r3, #0]
	uint8_t lo_u8CarOptions[] = {
 8001810:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001814:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <AUDI_vOnDashboard+0x48>)
 800181a:	4618      	mov	r0, r3
 800181c:	4611      	mov	r1, r2
 800181e:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8001822:	461a      	mov	r2, r3
 8001824:	f001 f9ce 	bl	8002bc4 <memcpy>
			'|', ' ', 'T', 'U', 'R', 'N', ' ', 'A', 'C', 'C',' ','O','F','F', ':', ' ', ' ', ' ', ' ','[', ' ', ' ',' ',' ', 'z', ' ', ' ', ' ', ']',  ' ', ' ', ' ', ' ', '|','\r','\n',
			'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','\r','\n',
			'\0'
	};

	HHC05_uddtTransmitString(PS_USARTx,lo_u8CarOptions);
 8001828:	f107 020c 	add.w	r2, r7, #12
 800182c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001830:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001834:	4611      	mov	r1, r2
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	f000 f954 	bl	8001ae4 <HHC05_uddtTransmitString>

}
 800183c:	bf00      	nop
 800183e:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	08003200 	.word	0x08003200

0800184c <HDCM_init>:

#include "../../../Inc/HAL/dcm/dcm_interface.h"


EN_DCM_systemState_t HDCM_init(ST_DCM_cfg_t *dcmCfg)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	; 0x40
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	EN_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <HDCM_init+0x16>
	{
		ret = DCM_NOK;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001860:	e076      	b.n	8001950 <HDCM_init+0x104>
	}
	else
	{
		if(dcmCfg->DCM_defaultDirection == DCM_DIR_CLOCKWISE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7b9b      	ldrb	r3, [r3, #14]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d13a      	bne.n	80018e0 <HDCM_init+0x94>
		{

			ST_MGPIO_pinCfg_t lo_dcm5vPinData = {dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin,MGPIO_MODE_OUTPUT,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001878:	2301      	movs	r3, #1
 800187a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001884:	2302      	movs	r3, #2
 8001886:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					MGPIO_OUTPUT_RESISTOR_PUSH_PULL , MGPIO_OUTPUT_SPEED_HIGH , dcmCfg->DCM_intialState ,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7b5b      	ldrb	r3, [r3, #13]
			ST_MGPIO_pinCfg_t lo_dcm5vPinData = {dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin,MGPIO_MODE_OUTPUT,
 800188e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001892:	2300      	movs	r3, #0
 8001894:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					MGPIO_PULL_FLOATING};
			MGPIO_uddtInitPin(&lo_dcm5vPinData);
 8001898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800189c:	4618      	mov	r0, r3
 800189e:	f000 faec 	bl	8001e7a <MGPIO_uddtInitPin>

			ST_MGPIO_pinCfg_t lo_dcmGndPinData = {dcmCfg->DCM_gndPort, dcmCfg->DCM_gndPin,MGPIO_MODE_OUTPUT,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7b1b      	ldrb	r3, [r3, #12]
 80018ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80018bc:	2302      	movs	r3, #2
 80018be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					MGPIO_OUTPUT_RESISTOR_PUSH_PULL , MGPIO_OUTPUT_SPEED_HIGH , MGPIO_LOGIC_LOW ,
					MGPIO_PULL_FLOATING};
			MGPIO_uddtInitPin(&lo_dcmGndPinData);
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fad1 	bl	8001e7a <MGPIO_uddtInitPin>

			ret = DCM_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80018de:	e037      	b.n	8001950 <HDCM_init+0x104>
		}
		else if(dcmCfg->DCM_defaultDirection == DCM_DIR_ANTI_CLOCKWISE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7b9b      	ldrb	r3, [r3, #14]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d130      	bne.n	800194a <HDCM_init+0xfe>
		{

			ST_MGPIO_pinCfg_t lo_dcm5vPinData = {dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin,MGPIO_MODE_OUTPUT,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	773b      	strb	r3, [r7, #28]
 80018f4:	2301      	movs	r3, #1
 80018f6:	777b      	strb	r3, [r7, #29]
 80018f8:	2300      	movs	r3, #0
 80018fa:	77bb      	strb	r3, [r7, #30]
 80018fc:	2302      	movs	r3, #2
 80018fe:	77fb      	strb	r3, [r7, #31]
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3020 	strb.w	r3, [r7, #32]
 8001906:	2300      	movs	r3, #0
 8001908:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					MGPIO_OUTPUT_RESISTOR_PUSH_PULL , MGPIO_OUTPUT_SPEED_HIGH ,MGPIO_LOGIC_LOW ,
					MGPIO_PULL_FLOATING};
			MGPIO_uddtInitPin(&lo_dcm5vPinData);
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fab2 	bl	8001e7a <MGPIO_uddtInitPin>

			ST_MGPIO_pinCfg_t lo_dcmGndPinData = {dcmCfg->DCM_gndPort, dcmCfg->DCM_gndPin,MGPIO_MODE_OUTPUT,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7b1b      	ldrb	r3, [r3, #12]
 8001920:	743b      	strb	r3, [r7, #16]
 8001922:	2301      	movs	r3, #1
 8001924:	747b      	strb	r3, [r7, #17]
 8001926:	2300      	movs	r3, #0
 8001928:	74bb      	strb	r3, [r7, #18]
 800192a:	2302      	movs	r3, #2
 800192c:	74fb      	strb	r3, [r7, #19]
					MGPIO_OUTPUT_RESISTOR_PUSH_PULL , MGPIO_OUTPUT_SPEED_HIGH ,  dcmCfg->DCM_intialState ,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7b5b      	ldrb	r3, [r3, #13]
			ST_MGPIO_pinCfg_t lo_dcmGndPinData = {dcmCfg->DCM_gndPort, dcmCfg->DCM_gndPin,MGPIO_MODE_OUTPUT,
 8001932:	753b      	strb	r3, [r7, #20]
 8001934:	2300      	movs	r3, #0
 8001936:	757b      	strb	r3, [r7, #21]
					MGPIO_PULL_FLOATING};
			MGPIO_uddtInitPin(&lo_dcmGndPinData);
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fa9c 	bl	8001e7a <MGPIO_uddtInitPin>

			ret = DCM_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001948:	e002      	b.n	8001950 <HDCM_init+0x104>
		}
		else
		{
			ret = DCM_NOK;
 800194a:	2301      	movs	r3, #1
 800194c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}

	}
	return ret;
 8001950:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001954:	4618      	mov	r0, r3
 8001956:	3740      	adds	r7, #64	; 0x40
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HDCM_turnOff>:

EN_DCM_systemState_t HDCM_turnOff(ST_DCM_cfg_t *dcmCfg)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	EN_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <HDCM_turnOff+0x14>
	{
		ret = DCM_NOK;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	e011      	b.n	8001994 <HDCM_turnOff+0x38>
	}
	else
	{
	    MGPIO_uddtSetPinVal(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, MGPIO_LOGIC_LOW);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	f000 fa0c 	bl	8001d98 <MGPIO_uddtSetPinVal>
	    MGPIO_uddtSetPinVal(dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin, MGPIO_LOGIC_LOW);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6898      	ldr	r0, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7b1b      	ldrb	r3, [r3, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	f000 fa04 	bl	8001d98 <MGPIO_uddtSetPinVal>
		ret = DCM_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HDCM_turnOn>:

EN_DCM_systemState_t HDCM_turnOn(ST_DCM_cfg_t *dcmCfg)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	EN_DCM_systemState_t ret;
	if(dcmCfg == PTR_NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <HDCM_turnOn+0x14>
	{
		ret = DCM_NOK;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e02f      	b.n	8001a12 <HDCM_turnOn+0x74>
	}
	else
	{
		if(dcmCfg->DCM_defaultDirection == DCM_DIR_CLOCKWISE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7b9b      	ldrb	r3, [r3, #14]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d112      	bne.n	80019e0 <HDCM_turnOn+0x42>
		{
		    MGPIO_uddtSetPinVal(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, MGPIO_LOGIC_HIGH);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	791b      	ldrb	r3, [r3, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4619      	mov	r1, r3
 80019c6:	f000 f9e7 	bl	8001d98 <MGPIO_uddtSetPinVal>
		    MGPIO_uddtSetPinVal(dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin, MGPIO_LOGIC_LOW);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6898      	ldr	r0, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7b1b      	ldrb	r3, [r3, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	f000 f9df 	bl	8001d98 <MGPIO_uddtSetPinVal>

			ret = DCM_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e018      	b.n	8001a12 <HDCM_turnOn+0x74>
		}
		else if(dcmCfg->DCM_defaultDirection == DCM_DIR_ANTI_CLOCKWISE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7b9b      	ldrb	r3, [r3, #14]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d112      	bne.n	8001a0e <HDCM_turnOn+0x70>
		{
		    MGPIO_uddtSetPinVal(dcmCfg->DCM_5vPort, dcmCfg->DCM_5vPin, MGPIO_LOGIC_LOW);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	4619      	mov	r1, r3
 80019f4:	f000 f9d0 	bl	8001d98 <MGPIO_uddtSetPinVal>
		    MGPIO_uddtSetPinVal(dcmCfg->DCM_gndPort , dcmCfg->DCM_gndPin, MGPIO_LOGIC_HIGH);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7b1b      	ldrb	r3, [r3, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4619      	mov	r1, r3
 8001a04:	f000 f9c8 	bl	8001d98 <MGPIO_uddtSetPinVal>

			ret = DCM_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e001      	b.n	8001a12 <HDCM_turnOn+0x74>
		}
		else
		{
			ret = DCM_NOK;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
		}

	}
	return ret;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HDCM_controlSpeed>:
	}
	return ret;
}

EN_DCM_systemState_t HDCM_controlSpeed(uint8_t copy_u8Speed)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]

	ST_MGPIO_altPinCfg_t lo_altPwmPinA0 = {MGPIOA_PERIPHERAL,MGPIO_PIN0,MGPIO_ALTFN_1,
 8001a26:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <HDCM_controlSpeed+0x64>)
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			MGPIO_OUTPUT_RESISTOR_PUSH_PULL,MGPIO_OUTPUT_SPEED_MEDIUM,MGPIO_PULL_FLOATING};
	MGPIO_uddtInitAltPin(&lo_altPwmPinA0);
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fa73 	bl	8001f22 <MGPIO_uddtInitAltPin>

	/* speed init */
	MTMR_vSetTimerPrescaler(MTMR2, 64);
 8001a3c:	2140      	movs	r1, #64	; 0x40
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 fc76 	bl	8002330 <MTMR_vSetTimerPrescaler>
	MTMR_vSetTimerARR(MTMR2, 10000 - 1);
 8001a44:	f242 710f 	movw	r1, #9999	; 0x270f
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f000 fdad 	bl	80025a8 <MTMR_vSetTimerARR>
	MTMR_vSetTimerChannelOutput(MTMR2, MTMR_MODE_PWM_MODE1, MTMR_CH1);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2106      	movs	r1, #6
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 fcc2 	bl	80023dc <MTMR_vSetTimerChannelOutput>

	uint32_t counter = 100 * copy_u8Speed;
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2264      	movs	r2, #100	; 0x64
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
	MTMR_vSetTimerCMPVal(MTMR2, MTMR_CH1, counter - 1);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	461a      	mov	r2, r3
 8001a68:	2101      	movs	r1, #1
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 fd3e 	bl	80024ec <MTMR_vSetTimerCMPVal>
	MTMR_vStartTimer(MTMR2);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f000 fc1d 	bl	80022b0 <MTMR_vStartTimer>
}
 8001a76:	bf00      	nop
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	08003344 	.word	0x08003344

08001a84 <HHC05_uddtInit>:

#include "../../../Inc/HAL/hc05/hc05_interface.h"


EN_HHC05_systeamState_t  HHC05_uddtInit(ST_MUART_RegistersMap_t *PS_USARTx , ST_MUSART_cfg_t const *PS_uddtUartCfg)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	EN_HHC05_systeamState_t ret = MUSART_uddtInit(PS_USARTx,PS_uddtUartCfg);
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fde5 	bl	8002660 <MUSART_uddtInit>
 8001a96:	4603      	mov	r3, r0
 8001a98:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HHC05_uddtEnable>:

EN_HHC05_systeamState_t  HHC05_uddtEnable(ST_MUART_RegistersMap_t *PS_USARTx)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	EN_HHC05_systeamState_t ret = MUSART_uddtEnable(PS_USARTx);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 ff37 	bl	8002920 <MUSART_uddtEnable>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HHC05_uddtTransmitByte>:
	EN_HHC05_systeamState_t ret = HHC05_uddtDisable(PS_USARTx);
	return ret;
}

EN_HHC05_systeamState_t  HHC05_uddtTransmitByte(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t copy_u8ByteToSend)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
	EN_HHC05_systeamState_t ret = MUSART_uddtTransmitByte(PS_USARTx,copy_u8ByteToSend);
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 ff40 	bl	8002956 <MUSART_uddtTransmitByte>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HHC05_uddtTransmitString>:

EN_HHC05_systeamState_t  HHC05_uddtTransmitString(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8StringToSend)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	EN_HHC05_systeamState_t ret = MUSART_uddtTransmitString(PS_USARTx,copy_u8StringToSend);
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 ff5e 	bl	80029b2 <MUSART_uddtTransmitString>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HHC05_RxIntSetStatus>:
	return ret;
}


EN_HHC05_systeamState_t  HHC05_RxIntSetStatus(ST_MUART_RegistersMap_t *PS_USARTx, uint8_t copy_u8Status)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
	EN_HHC05_systeamState_t ret = MUSART_RxIntSetStatus(PS_USARTx,copy_u8Status);
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 ff77 	bl	8002a08 <MUSART_RxIntSetStatus>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HHC05_uddtSetCallBackUart1>:

EN_HHC05_systeamState_t  HHC05_uddtSetCallBackUart1( void (*ptr) (void) )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	EN_HHC05_systeamState_t ret = MUSART1_uddtSetCallBack(ptr);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 ff93 	bl	8002a5c <MUSART1_uddtSetCallBack>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <delay_us>:
/*************************************************************************/

#include "../../../Inc/HAL/ultrsonic/ultrsonic_interface.h"


void delay_us(uint32_t microseconds) {
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    // Assuming a 16MHz system clock
    microseconds = microseconds * 16;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	607b      	str	r3, [r7, #4]
    while (microseconds--) {
 8001b52:	e000      	b.n	8001b56 <delay_us+0x12>
        __asm__("nop");
 8001b54:	bf00      	nop
    while (microseconds--) {
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f9      	bne.n	8001b54 <delay_us+0x10>
    }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <ultra_init>:


void ultra_init(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  // Configure trigger pin as output
    *((volatile uint32_t*)(GPIOA_BASE_ADDRESS + GPIOA_MODER_OFFSET)) |= (1 << 18);
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <ultra_init+0x28>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <ultra_init+0x28>)
 8001b7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]

    // Configure echo pin as input
    *((volatile uint32_t*)(GPIOA_BASE_ADDRESS + GPIOA_MODER_OFFSET)) &= ~(1 << 20);
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <ultra_init+0x28>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <ultra_init+0x28>)
 8001b86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b8a:	6013      	str	r3, [r2, #0]


}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40020000 	.word	0x40020000

08001b9c <send_pulse>:

void send_pulse(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
    // Set trigger pin high for 10 microseconds to generate a pulse
    *((volatile uint32_t*)(GPIOA_BASE_ADDRESS + GPIOA_ODR_OFFSET)) |= TRIGGER_PIN;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <send_pulse+0x28>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <send_pulse+0x28>)
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001baa:	6013      	str	r3, [r2, #0]
    delay_us(10);
 8001bac:	200a      	movs	r0, #10
 8001bae:	f7ff ffc9 	bl	8001b44 <delay_us>
    *((volatile uint32_t*)(GPIOA_BASE_ADDRESS + GPIOA_ODR_OFFSET)) &= ~TRIGGER_PIN;
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <send_pulse+0x28>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <send_pulse+0x28>)
 8001bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bbc:	6013      	str	r3, [r2, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40020014 	.word	0x40020014

08001bc8 <measure_distance>:

uint32_t measure_distance(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
    // Wait for the echo pin to go high
    while (!((*((volatile uint32_t*)(GPIOA_BASE_ADDRESS + GPIOA_IDR_OFFSET))) & ECHO_PIN));
 8001bce:	bf00      	nop
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <measure_distance+0x80>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f9      	beq.n	8001bd0 <measure_distance+0x8>

    // Start timer
    uint32_t start_time = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
    while ((*((volatile uint32_t*)(GPIOA_BASE_ADDRESS + GPIOA_IDR_OFFSET))) & ECHO_PIN) {
 8001be0:	e005      	b.n	8001bee <measure_distance+0x26>
        start_time++;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3301      	adds	r3, #1
 8001be6:	607b      	str	r3, [r7, #4]
        delay_us(1);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff ffab 	bl	8001b44 <delay_us>
    while ((*((volatile uint32_t*)(GPIOA_BASE_ADDRESS + GPIOA_IDR_OFFSET))) & ECHO_PIN) {
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <measure_distance+0x80>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f3      	bne.n	8001be2 <measure_distance+0x1a>
    }

    // Calculate distance in centimeters
    uint32_t distance = (start_time * 0.0343 * 10.7);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fc2e 	bl	800045c <__aeabi_ui2d>
 8001c00:	a30d      	add	r3, pc, #52	; (adr r3, 8001c38 <measure_distance+0x70>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fca3 	bl	8000550 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	a30b      	add	r3, pc, #44	; (adr r3, 8001c40 <measure_distance+0x78>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fc9a 	bl	8000550 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe fea6 	bl	8000974 <__aeabi_d2uiz>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	603b      	str	r3, [r7, #0]
    return distance;
 8001c2c:	683b      	ldr	r3, [r7, #0]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	04816f00 	.word	0x04816f00
 8001c3c:	3fa18fc5 	.word	0x3fa18fc5
 8001c40:	66666666 	.word	0x66666666
 8001c44:	40256666 	.word	0x40256666
 8001c48:	40020010 	.word	0x40020010

08001c4c <MGPIO_uddtSetPinMode>:

#include "../../../Inc/MCAL/gpio/gpio_interface.h"


EN_MGPIO_systemState_t MGPIO_uddtSetPinMode (ST_MGPIOx_RegistersMap_t  *PS_GPIOx , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_pinModeOptions_t copy_uddtPinMode)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	70bb      	strb	r3, [r7, #2]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]

	if((PS_GPIOx != PTR_NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d015      	beq.n	8001c92 <MGPIO_uddtSetPinMode+0x46>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d812      	bhi.n	8001c92 <MGPIO_uddtSetPinMode+0x46>
		&& (copy_uddtPinMode >= MGPIO_MODE_OUTPUT && copy_uddtPinMode <= MGPIO_MODE_ANALOG))
 8001c6c:	78bb      	ldrb	r3, [r7, #2]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00f      	beq.n	8001c92 <MGPIO_uddtSetPinMode+0x46>
 8001c72:	78bb      	ldrb	r3, [r7, #2]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d80c      	bhi.n	8001c92 <MGPIO_uddtSetPinMode+0x46>
	{
		PS_GPIOx->MGPIOx_MODER |= (uint32_t) (copy_uddtPinMode <<((2U) * copy_uddtPinNum));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	78b9      	ldrb	r1, [r7, #2]
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	0052      	lsls	r2, r2, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	601a      	str	r2, [r3, #0]
		ret = MGPIO_OK;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e001      	b.n	8001c96 <MGPIO_uddtSetPinMode+0x4a>
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8001c92:	2302      	movs	r3, #2
 8001c94:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <MGPIO_uddtSetOutputMode>:


EN_MGPIO_systemState_t MGPIO_uddtSetOutputMode (ST_MGPIOx_RegistersMap_t *PS_GPIOx , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_outputResistorOptions_t copy_uddtOutputResistor)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	70bb      	strb	r3, [r7, #2]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]

	if((PS_GPIOx != PTR_NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d011      	beq.n	8001ce2 <MGPIO_uddtSetOutputMode+0x3e>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80e      	bhi.n	8001ce2 <MGPIO_uddtSetOutputMode+0x3e>
		&& (copy_uddtOutputResistor >= MGPIO_OUTPUT_RESISTOR_PUSH_PULL && copy_uddtOutputResistor <= MGPIO_OUTPUT_RESISTOR_OPEN_DRAIN))
 8001cc4:	78bb      	ldrb	r3, [r7, #2]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d80b      	bhi.n	8001ce2 <MGPIO_uddtSetOutputMode+0x3e>
	{
		PS_GPIOx->MGPIOx_OTYPER |= (uint32_t) (copy_uddtOutputResistor << copy_uddtPinNum);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	78b9      	ldrb	r1, [r7, #2]
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	605a      	str	r2, [r3, #4]
		ret = MGPIO_OK;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e001      	b.n	8001ce6 <MGPIO_uddtSetOutputMode+0x42>
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <MGPIO_uddtSetOutputSpeed>:


EN_MGPIO_systemState_t MGPIO_uddtSetOutputSpeed  (ST_MGPIOx_RegistersMap_t *PS_GPIOx , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_outputSpeedOptions_t copy_uddtOutputSpeed )
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
 8001d00:	4613      	mov	r3, r2
 8001d02:	70bb      	strb	r3, [r7, #2]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]

	if((PS_GPIOx != PTR_NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d012      	beq.n	8001d34 <MGPIO_uddtSetOutputSpeed+0x40>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80f      	bhi.n	8001d34 <MGPIO_uddtSetOutputSpeed+0x40>
		&& (copy_uddtOutputSpeed >= MGPIO_OUTPUT_SPEED_LOW && copy_uddtOutputSpeed <= MGPIO_OUTPUT_SPEED_VERY_HIGH))
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d80c      	bhi.n	8001d34 <MGPIO_uddtSetOutputSpeed+0x40>
	{
		PS_GPIOx->MGPIOx_OSPEEDR |= (uint32_t) (copy_uddtOutputSpeed << ((2U) * copy_uddtPinNum));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	78b9      	ldrb	r1, [r7, #2]
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	0052      	lsls	r2, r2, #1
 8001d24:	fa01 f202 	lsl.w	r2, r1, r2
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
		ret = MGPIO_OK;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e001      	b.n	8001d38 <MGPIO_uddtSetOutputSpeed+0x44>
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8001d34:	2302      	movs	r3, #2
 8001d36:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <MGPIO_uddtSetPullState>:


EN_MGPIO_systemState_t MGPIO_uddtSetPullState  (ST_MGPIOx_RegistersMap_t *PS_GPIOx , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_pushPullOptions_t copy_uddtPullState )
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	70fb      	strb	r3, [r7, #3]
 8001d52:	4613      	mov	r3, r2
 8001d54:	70bb      	strb	r3, [r7, #2]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]

	if((PS_GPIOx != PTR_NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d012      	beq.n	8001d86 <MGPIO_uddtSetPullState+0x40>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	d80f      	bhi.n	8001d86 <MGPIO_uddtSetPullState+0x40>
		&& (copy_uddtPullState >= MGPIO_PULL_FLOATING && copy_uddtPullState <= MGPIO_PULL_PULL_DOWN))
 8001d66:	78bb      	ldrb	r3, [r7, #2]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d80c      	bhi.n	8001d86 <MGPIO_uddtSetPullState+0x40>
	{
		PS_GPIOx->MGPIOx_PUPDR |= (uint32_t) (copy_uddtPullState << ((2U) * copy_uddtPinNum));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	78b9      	ldrb	r1, [r7, #2]
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	0052      	lsls	r2, r2, #1
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]
		ret = MGPIO_OK;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e001      	b.n	8001d8a <MGPIO_uddtSetPullState+0x44>
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8001d86:	2302      	movs	r3, #2
 8001d88:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <MGPIO_uddtSetPinVal>:
	}
	return ret;
}

EN_MGPIO_systemState_t MGPIO_uddtSetPinVal(ST_MGPIOx_RegistersMap_t *PS_GPIOx , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_pinLogicOptions_t copy_uddtPinLogic)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
 8001da4:	4613      	mov	r3, r2
 8001da6:	70bb      	strb	r3, [r7, #2]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]

	if((PS_GPIOx != PTR_NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d027      	beq.n	8001e02 <MGPIO_uddtSetPinVal+0x6a>
		&& (copy_uddtPinNum >= MGPIO_PIN0 && copy_uddtPinNum <= MGPIO_PIN15)
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d824      	bhi.n	8001e02 <MGPIO_uddtSetPinVal+0x6a>
		&& (copy_uddtPinLogic >= MGPIO_LOGIC_LOW && copy_uddtPinLogic <= MGPIO_LOGIC_HIGH))
 8001db8:	78bb      	ldrb	r3, [r7, #2]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d821      	bhi.n	8001e02 <MGPIO_uddtSetPinVal+0x6a>
	{
		if(copy_uddtPinLogic == MGPIO_LOGIC_HIGH)
 8001dbe:	78bb      	ldrb	r3, [r7, #2]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d10b      	bne.n	8001ddc <MGPIO_uddtSetPinVal+0x44>
		{
			SET_BIT(PS_GPIOx->MGPIOx_ODR , copy_uddtPinNum);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	615a      	str	r2, [r3, #20]
			ret = MGPIO_OK;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
		if(copy_uddtPinLogic == MGPIO_LOGIC_HIGH)
 8001dda:	e014      	b.n	8001e06 <MGPIO_uddtSetPinVal+0x6e>
		}
		else if(copy_uddtPinLogic == MGPIO_LOGIC_LOW)
 8001ddc:	78bb      	ldrb	r3, [r7, #2]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <MGPIO_uddtSetPinVal+0x64>
		{
			CLR_BIT(PS_GPIOx->MGPIOx_ODR , copy_uddtPinNum);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	43d2      	mvns	r2, r2
 8001df0:	401a      	ands	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	615a      	str	r2, [r3, #20]
			ret = MGPIO_OK;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
		if(copy_uddtPinLogic == MGPIO_LOGIC_HIGH)
 8001dfa:	e004      	b.n	8001e06 <MGPIO_uddtSetPinVal+0x6e>
		}
		else
		{
			ret = MGPIO_INVALID_PARAMTER;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	73fb      	strb	r3, [r7, #15]
		if(copy_uddtPinLogic == MGPIO_LOGIC_HIGH)
 8001e00:	e001      	b.n	8001e06 <MGPIO_uddtSetPinVal+0x6e>
		}
	}
	else
	{
		ret = MGPIO_INVALID_PARAMTER;
 8001e02:	2302      	movs	r3, #2
 8001e04:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <MGPIO_uddtSetAltFun>:
	}
	return ret;
}

EN_MGPIO_systemState_t MGPIO_uddtSetAltFun (ST_MGPIOx_RegistersMap_t *PS_GPIOx , EN_MGPIO_pinOptions_t copy_uddtPinNum , EN_MGPIO_altfnOptions_t Copy_uddtAltFun)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
 8001e20:	4613      	mov	r3, r2
 8001e22:	70bb      	strb	r3, [r7, #2]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
	if (copy_uddtPinNum <= 7U )
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	2b07      	cmp	r3, #7
 8001e2c:	d80c      	bhi.n	8001e48 <MGPIO_uddtSetAltFun+0x34>
	{
		PS_GPIOx->MGPIOx_AFRL  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	78b9      	ldrb	r1, [r7, #2]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	621a      	str	r2, [r3, #32]
		ret= MGPIO_OK;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	e011      	b.n	8001e6c <MGPIO_uddtSetAltFun+0x58>
	}
	else  if (copy_uddtPinNum <= 15U )
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	d80c      	bhi.n	8001e68 <MGPIO_uddtSetAltFun+0x54>
	{
		PS_GPIOx->MGPIOx_AFRH  |= (Copy_uddtAltFun << 4U * (copy_uddtPinNum));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	78b9      	ldrb	r1, [r7, #2]
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
		ret= MGPIO_OK;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	e001      	b.n	8001e6c <MGPIO_uddtSetAltFun+0x58>
	}
	else
	{
		ret= MGPIO_PTR_NULL;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <MGPIO_uddtInitPin>:



EN_MGPIO_systemState_t MGPIO_uddtInitPin		(ST_MGPIO_pinCfg_t *PS_pinInstance)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
	if(PS_pinInstance != PTR_NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d043      	beq.n	8001f14 <MGPIO_uddtInitPin+0x9a>
	{
		ret = MGPIO_uddtSetPinMode(PS_pinInstance->PS_GPIOx,PS_pinInstance->copy_uddtPinNum,PS_pinInstance->copy_uddtPinMode);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7919      	ldrb	r1, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	795b      	ldrb	r3, [r3, #5]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f7ff fed7 	bl	8001c4c <MGPIO_uddtSetPinMode>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	73fb      	strb	r3, [r7, #15]
		if(ret == MGPIO_OK)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10a      	bne.n	8001ebe <MGPIO_uddtInitPin+0x44>
		ret = MGPIO_uddtSetOutputMode(PS_pinInstance->PS_GPIOx,PS_pinInstance->copy_uddtPinNum,PS_pinInstance->copy_uddtOutputResistor);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7919      	ldrb	r1, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	799b      	ldrb	r3, [r3, #6]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f7ff fef5 	bl	8001ca4 <MGPIO_uddtSetOutputMode>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	73fb      	strb	r3, [r7, #15]
		if(ret == MGPIO_OK)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10a      	bne.n	8001eda <MGPIO_uddtInitPin+0x60>
		ret = MGPIO_uddtSetOutputSpeed(PS_pinInstance->PS_GPIOx,PS_pinInstance->copy_uddtPinNum,PS_pinInstance->copy_uddtOutputSpeed);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7919      	ldrb	r1, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	79db      	ldrb	r3, [r3, #7]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f7ff ff0f 	bl	8001cf4 <MGPIO_uddtSetOutputSpeed>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	73fb      	strb	r3, [r7, #15]
		if(ret == MGPIO_OK)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10a      	bne.n	8001ef6 <MGPIO_uddtInitPin+0x7c>
		ret = MGPIO_uddtSetPullState(PS_pinInstance->PS_GPIOx,PS_pinInstance->copy_uddtPinNum,PS_pinInstance->copy_uddtPullState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7919      	ldrb	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7a5b      	ldrb	r3, [r3, #9]
 8001eec:	461a      	mov	r2, r3
 8001eee:	f7ff ff2a 	bl	8001d46 <MGPIO_uddtSetPullState>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	73fb      	strb	r3, [r7, #15]
		if(ret == MGPIO_OK)
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10d      	bne.n	8001f18 <MGPIO_uddtInitPin+0x9e>
		ret = MGPIO_uddtSetPinVal(PS_pinInstance->PS_GPIOx,PS_pinInstance->copy_uddtPinNum,PS_pinInstance->copy_uddtPtrRetOfPinLogic);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7919      	ldrb	r1, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7a1b      	ldrb	r3, [r3, #8]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f7ff ff45 	bl	8001d98 <MGPIO_uddtSetPinVal>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e001      	b.n	8001f18 <MGPIO_uddtInitPin+0x9e>
	}
	else
	{
		ret = MGPIO_PTR_NULL;
 8001f14:	2303      	movs	r3, #3
 8001f16:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <MGPIO_uddtInitAltPin>:


EN_MGPIO_systemState_t MGPIO_uddtInitAltPin		(ST_MGPIO_altPinCfg_t *PS_altPinInstance)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
	EN_MGPIO_systemState_t ret = MGPIO_NOK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]

	if(PS_altPinInstance != PTR_NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d042      	beq.n	8001fba <MGPIO_uddtInitAltPin+0x98>
	{
		ret = MGPIO_uddtSetPinMode(PS_altPinInstance->PS_GPIOx,PS_altPinInstance->copy_uddtPinNum,MGPIO_MODE_ALTF);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	791b      	ldrb	r3, [r3, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7ff fe84 	bl	8001c4c <MGPIO_uddtSetPinMode>
 8001f44:	4603      	mov	r3, r0
 8001f46:	73fb      	strb	r3, [r7, #15]
		if(ret == MGPIO_OK)
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10a      	bne.n	8001f64 <MGPIO_uddtInitAltPin+0x42>
		ret = MGPIO_uddtSetOutputMode(PS_altPinInstance->PS_GPIOx,PS_altPinInstance->copy_uddtPinNum,PS_altPinInstance->copy_uddtOutputResistor);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7919      	ldrb	r1, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	799b      	ldrb	r3, [r3, #6]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f7ff fea2 	bl	8001ca4 <MGPIO_uddtSetOutputMode>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73fb      	strb	r3, [r7, #15]
		if(ret == MGPIO_OK)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10a      	bne.n	8001f80 <MGPIO_uddtInitAltPin+0x5e>
		ret = MGPIO_uddtSetOutputSpeed(PS_altPinInstance->PS_GPIOx,PS_altPinInstance->copy_uddtPinNum,PS_altPinInstance->copy_uddtOutputSpeed);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7919      	ldrb	r1, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	79db      	ldrb	r3, [r3, #7]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff febc 	bl	8001cf4 <MGPIO_uddtSetOutputSpeed>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
		if(ret == MGPIO_OK)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d10a      	bne.n	8001f9c <MGPIO_uddtInitAltPin+0x7a>
		ret = MGPIO_uddtSetAltFun(PS_altPinInstance->PS_GPIOx,PS_altPinInstance->copy_uddtPinNum,PS_altPinInstance->Copy_uddtAltFun);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7919      	ldrb	r1, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	795b      	ldrb	r3, [r3, #5]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f7ff ff3e 	bl	8001e14 <MGPIO_uddtSetAltFun>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]
		if(ret == MGPIO_OK)
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10d      	bne.n	8001fbe <MGPIO_uddtInitAltPin+0x9c>
		ret = MGPIO_uddtSetPullState(PS_altPinInstance->PS_GPIOx,PS_altPinInstance->copy_uddtPinNum,PS_altPinInstance->copy_uddtPullState);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7919      	ldrb	r1, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7a1b      	ldrb	r3, [r3, #8]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f7ff fec9 	bl	8001d46 <MGPIO_uddtSetPullState>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e001      	b.n	8001fbe <MGPIO_uddtInitAltPin+0x9c>

	}
	else
	{
		ret = MGPIO_PTR_NULL;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <MNVIC_enableInterrupt>:
#include "../../../Inc/MCAL/nvic/nvic_interface.h"



EN_MNVIC_systemState_t MNVIC_enableInterrupt(uint8_t copy_u8IntPos)
{
 8001fc8:	b490      	push	{r4, r7}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	EN_MNVIC_systemState_t ret = MNVIC_NOK;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
	if(copy_u8IntPos >= POS_OF_FIRST_INT && copy_u8IntPos <= POS_OF_LAST_INT)
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b54      	cmp	r3, #84	; 0x54
 8001fda:	d815      	bhi.n	8002008 <MNVIC_enableInterrupt+0x40>
	{
		SET_BIT(MNVIC_PERIPHERAL->MNVIC_ISERx[getIntRegNumber(copy_u8IntPos)] ,getIntBitNumber(copy_u8IntPos));
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <MNVIC_enableInterrupt+0x50>)
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	b2d8      	uxtb	r0, r3
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	79fa      	ldrb	r2, [r7, #7]
 8001fec:	f002 021f 	and.w	r2, r2, #31
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	4614      	mov	r4, r2
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <MNVIC_enableInterrupt+0x50>)
 8001ffa:	4601      	mov	r1, r0
 8001ffc:	4323      	orrs	r3, r4
 8001ffe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		ret = MNVIC_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e001      	b.n	800200c <MNVIC_enableInterrupt+0x44>
	}
	else
	{
		ret = MNVIC_INVALID_PARAMTER;
 8002008:	2302      	movs	r3, #2
 800200a:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bc90      	pop	{r4, r7}
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100

0800201c <MNVIC_SetInterruptPriority>:

	return ret;
}

EN_MNVIC_systemState_t MNVIC_SetInterruptPriority (uint8_t copy_u8IntPos , EN_MNVIC_priorityGrouping_t copy_uddtGroupOption ,uint8_t copy_u8GroupPriority , uint8_t copy_u8SubPriority)
{
 800201c:	b490      	push	{r4, r7}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4623      	mov	r3, r4
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	4603      	mov	r3, r0
 8002030:	71bb      	strb	r3, [r7, #6]
 8002032:	460b      	mov	r3, r1
 8002034:	717b      	strb	r3, [r7, #5]
 8002036:	4613      	mov	r3, r2
 8002038:	713b      	strb	r3, [r7, #4]
	EN_MNVIC_systemState_t ret = MNVIC_NOK;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
	if((copy_u8IntPos >= POS_OF_FIRST_INT && copy_u8IntPos <= POS_OF_LAST_INT)
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2b54      	cmp	r3, #84	; 0x54
 8002042:	d841      	bhi.n	80020c8 <MNVIC_SetInterruptPriority+0xac>
		&&(copy_uddtGroupOption >= GP_16_SP_00 && copy_uddtGroupOption <= GP_00_SP_16 ))
 8002044:	79bb      	ldrb	r3, [r7, #6]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d83e      	bhi.n	80020c8 <MNVIC_SetInterruptPriority+0xac>
	{
		uint8_t Local_u8Priority = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	73bb      	strb	r3, [r7, #14]

		  switch(copy_uddtGroupOption)
 800204e:	79bb      	ldrb	r3, [r7, #6]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d82e      	bhi.n	80020b2 <MNVIC_SetInterruptPriority+0x96>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <MNVIC_SetInterruptPriority+0x40>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	08002077 	.word	0x08002077
 8002060:	080020a1 	.word	0x080020a1
 8002064:	0800207d 	.word	0x0800207d
 8002068:	0800208f 	.word	0x0800208f
 800206c:	08002071 	.word	0x08002071
		  {
		  case GP_00_SP_16 :  Local_u8Priority = copy_u8SubPriority								   ;  break ;
 8002070:	793b      	ldrb	r3, [r7, #4]
 8002072:	73bb      	strb	r3, [r7, #14]
 8002074:	e01d      	b.n	80020b2 <MNVIC_SetInterruptPriority+0x96>
		  case GP_16_SP_00 :  Local_u8Priority = copy_u8GroupPriority   						   ;  break ;
 8002076:	797b      	ldrb	r3, [r7, #5]
 8002078:	73bb      	strb	r3, [r7, #14]
 800207a:	e01a      	b.n	80020b2 <MNVIC_SetInterruptPriority+0x96>
		  case GP_04_SP_04 :  Local_u8Priority = (copy_u8GroupPriority<<2) | copy_u8SubPriority    ;  break ;
 800207c:	797b      	ldrb	r3, [r7, #5]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	b25a      	sxtb	r2, r3
 8002082:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002086:	4313      	orrs	r3, r2
 8002088:	b25b      	sxtb	r3, r3
 800208a:	73bb      	strb	r3, [r7, #14]
 800208c:	e011      	b.n	80020b2 <MNVIC_SetInterruptPriority+0x96>
		  case GP_02_SP_08 :  Local_u8Priority = (copy_u8GroupPriority<<3) | copy_u8SubPriority    ;  break ;
 800208e:	797b      	ldrb	r3, [r7, #5]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	b25a      	sxtb	r2, r3
 8002094:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002098:	4313      	orrs	r3, r2
 800209a:	b25b      	sxtb	r3, r3
 800209c:	73bb      	strb	r3, [r7, #14]
 800209e:	e008      	b.n	80020b2 <MNVIC_SetInterruptPriority+0x96>
		  case GP_08_SP_02 :  Local_u8Priority = (copy_u8GroupPriority<<1) | copy_u8SubPriority    ;  break ;
 80020a0:	797b      	ldrb	r3, [r7, #5]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	b25a      	sxtb	r2, r3
 80020a6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	73bb      	strb	r3, [r7, #14]
 80020b0:	bf00      	nop
		  }


		  MNVIC_PERIPHERAL->MNVIC_IPRx[copy_u8IntPos] = (Local_u8Priority<<4) ;
 80020b2:	4909      	ldr	r1, [pc, #36]	; (80020d8 <MNVIC_SetInterruptPriority+0xbc>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	7bba      	ldrb	r2, [r7, #14]
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	440b      	add	r3, r1
 80020be:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

//		uint8_t Local_u8Priority =  copy_u8SubPriority | (copy_u8GroupPriority << (copy_uddtGroupOption-3) ) ;
//		MNVIC_PERIPHERAL -> MNVIC_IPRx[copy_u8IntPos/32] = (Local_u8Priority << 4 );
		ret = MNVIC_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
	{
 80020c6:	e001      	b.n	80020cc <MNVIC_SetInterruptPriority+0xb0>
	}
	else
	{
		ret = MNVIC_INVALID_PARAMTER;
 80020c8:	2302      	movs	r3, #2
 80020ca:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc90      	pop	{r4, r7}
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100

080020dc <MNVIC_SetInterruptGroup>:

EN_MNVIC_systemState_t MNVIC_SetInterruptGroup(EN_MNVIC_priorityGrouping_t copy_uddtGroupOption)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
	EN_MNVIC_systemState_t ret = MNVIC_NOK;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
	if(copy_uddtGroupOption >= GP_16_SP_00 && copy_uddtGroupOption <= GP_00_SP_16 )
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d80d      	bhi.n	800210c <MNVIC_SetInterruptGroup+0x30>
	{
		SCB_AIRCR = MNVIC_VECTKEY;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <MNVIC_SetInterruptGroup+0x44>)
 80020f2:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <MNVIC_SetInterruptGroup+0x48>)
 80020f4:	601a      	str	r2, [r3, #0]
		SCB_AIRCR = MNVIC_VECTKEY|(copy_uddtGroupOption<<8);
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <MNVIC_SetInterruptGroup+0x44>)
 8002104:	6013      	str	r3, [r2, #0]
		ret = MNVIC_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
 800210a:	e001      	b.n	8002110 <MNVIC_SetInterruptGroup+0x34>
	}
	else
	{
		ret = MNVIC_INVALID_PARAMTER;
 800210c:	2302      	movs	r3, #2
 800210e:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed0c 	.word	0xe000ed0c
 8002124:	05fa0000 	.word	0x05fa0000

08002128 <MRCC_Init>:

#include "../../../Inc/MCAL/rcc/rcc_interface.h"


EN_MRCC_systemState_t MRCC_Init(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
	EN_MRCC_systemState_t ret = MRCC_NOK;
 800212e:	2301      	movs	r3, #1
 8002130:	71fb      	strb	r3, [r7, #7]

		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFFFFFC ) | (sysClkSelect << SW0_BIT));
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MRCC_Init+0x48>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <MRCC_Init+0x48>)
 8002138:	f023 0303 	bic.w	r3, r3, #3
 800213c:	6093      	str	r3, [r2, #8]

		if(sysClkSelect == MRCC_SYS_CLK_HSI )
		{
			SET_BIT(MRCC_PERIPHERAL->RCC_CR_REG , HSION_BIT );
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MRCC_Init+0x48>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <MRCC_Init+0x48>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6013      	str	r3, [r2, #0]
			ret = MRCC_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	71fb      	strb	r3, [r7, #7]
		}
		else
		{
			ret = MRCC_INVALID_PARAMTER;
		}
		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFF030F )
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MRCC_Init+0x48>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8002156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <MRCC_Init+0x48>)
						|(ahbPrescaler << HPRE0_BIT)
						|(apbLowSpeedPrescaler << PPRE10_BIT)
						|(apbHighSpeedPrescaler << PPRE20_BIT));
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		MRCC_PERIPHERAL->RCC_CFGR_REG = ((MRCC_PERIPHERAL->RCC_CFGR_REG & 0xFFFF030F )
 8002160:	6093      	str	r3, [r2, #8]
	return ret;
 8002162:	79fb      	ldrb	r3, [r7, #7]
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40023800 	.word	0x40023800

08002174 <MRCC_enablePeripheral>:


EN_MRCC_systemState_t MRCC_enablePeripheral(EN_MRCC_busOptions_t busSelection,EN_MRCC_peripheralOptions_t PeripheralNumber)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	460a      	mov	r2, r1
 800217e:	71fb      	strb	r3, [r7, #7]
 8002180:	4613      	mov	r3, r2
 8002182:	71bb      	strb	r3, [r7, #6]
	EN_MRCC_systemState_t ret = MRCC_NOK;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
	if((busSelection >=0 && busSelection <=4 ) && (PeripheralNumber >=0 && PeripheralNumber <= 31))
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d848      	bhi.n	8002220 <MRCC_enablePeripheral+0xac>
 800218e:	79bb      	ldrb	r3, [r7, #6]
 8002190:	2b1f      	cmp	r3, #31
 8002192:	d845      	bhi.n	8002220 <MRCC_enablePeripheral+0xac>
	{
		switch(busSelection)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d83e      	bhi.n	8002218 <MRCC_enablePeripheral+0xa4>
 800219a:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <MRCC_enablePeripheral+0x2c>)
 800219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021cb 	.word	0x080021cb
 80021a8:	080021e5 	.word	0x080021e5
 80021ac:	080021ff 	.word	0x080021ff
		{
			case MRCC_AHP1_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_AHB1ENR_REG , PeripheralNumber);
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <MRCC_enablePeripheral+0xc0>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	79ba      	ldrb	r2, [r7, #6]
 80021b6:	2101      	movs	r1, #1
 80021b8:	fa01 f202 	lsl.w	r2, r1, r2
 80021bc:	4611      	mov	r1, r2
 80021be:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <MRCC_enablePeripheral+0xc0>)
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6313      	str	r3, [r2, #48]	; 0x30
				ret = MRCC_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
				break;
 80021c8:	e029      	b.n	800221e <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_AHP2_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_AHB2ENR_REG , PeripheralNumber);
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <MRCC_enablePeripheral+0xc0>)
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	79ba      	ldrb	r2, [r7, #6]
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f202 	lsl.w	r2, r1, r2
 80021d6:	4611      	mov	r1, r2
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <MRCC_enablePeripheral+0xc0>)
 80021da:	430b      	orrs	r3, r1
 80021dc:	6353      	str	r3, [r2, #52]	; 0x34
				ret = MRCC_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
				break;
 80021e2:	e01c      	b.n	800221e <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_APB1_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_APB1ENR_REG , PeripheralNumber);
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <MRCC_enablePeripheral+0xc0>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	79ba      	ldrb	r2, [r7, #6]
 80021ea:	2101      	movs	r1, #1
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	4611      	mov	r1, r2
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <MRCC_enablePeripheral+0xc0>)
 80021f4:	430b      	orrs	r3, r1
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
				ret = MRCC_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
				break;
 80021fc:	e00f      	b.n	800221e <MRCC_enablePeripheral+0xaa>
			}
			case MRCC_APB2_BUS :
			{
				SET_BIT(MRCC_PERIPHERAL->RCC_APB2ENR_REG , PeripheralNumber);
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <MRCC_enablePeripheral+0xc0>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	79ba      	ldrb	r2, [r7, #6]
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f202 	lsl.w	r2, r1, r2
 800220a:	4611      	mov	r1, r2
 800220c:	4a09      	ldr	r2, [pc, #36]	; (8002234 <MRCC_enablePeripheral+0xc0>)
 800220e:	430b      	orrs	r3, r1
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
				ret = MRCC_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
				break;
 8002216:	e002      	b.n	800221e <MRCC_enablePeripheral+0xaa>
			}
			default :
			{
				ret = MRCC_INVALID_PARAMTER;
 8002218:	2303      	movs	r3, #3
 800221a:	73fb      	strb	r3, [r7, #15]
		switch(busSelection)
 800221c:	e002      	b.n	8002224 <MRCC_enablePeripheral+0xb0>
 800221e:	e001      	b.n	8002224 <MRCC_enablePeripheral+0xb0>
			}
		}
	}
	else
	{
		ret = MRCC_INVALID_PARAMTER;
 8002220:	2303      	movs	r3, #3
 8002222:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <SysTick_Handler>:
	return ret;
}


void SysTick_Handler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
	if(PTR_NULL != pfForStkCallBack)
 800223e:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <SysTick_Handler+0x6c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d02a      	beq.n	800229c <SysTick_Handler+0x64>
	{
		uint8_t u8TempForFlagReading = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	71fb      	strb	r3, [r7, #7]
		if(g_u8intervalMode == MSTK_IntervalSingle)
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <SysTick_Handler+0x70>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <SysTick_Handler+0x48>
		{
			u8TempForFlagReading = GET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_COUNTFLAG_BIT);
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <SysTick_Handler+0x74>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	71fb      	strb	r3, [r7, #7]
			pfForStkCallBack();
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <SysTick_Handler+0x6c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4798      	blx	r3
			CLR_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_ENABLE_BIT);
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <SysTick_Handler+0x74>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <SysTick_Handler+0x74>)
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	6013      	str	r3, [r2, #0]
			MSTK_PERIPHERAL->MSTK_STK_LOAD = 0;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <SysTick_Handler+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
			MSTK_PERIPHERAL->MSTK_STK_VAL = 0;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <SysTick_Handler+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
	}
	else
	{
		/* Do Nothing */
	}
}
 800227e:	e00d      	b.n	800229c <SysTick_Handler+0x64>
		else if(g_u8intervalMode == MSTK_IntervalPeriodic)
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <SysTick_Handler+0x70>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d109      	bne.n	800229c <SysTick_Handler+0x64>
			u8TempForFlagReading = GET_BIT(MSTK_PERIPHERAL->MSTK_STK_CTRL , MSTK_COUNTFLAG_BIT);
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <SysTick_Handler+0x74>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	71fb      	strb	r3, [r7, #7]
			pfForStkCallBack();
 8002296:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <SysTick_Handler+0x6c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4798      	blx	r3
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000074 	.word	0x20000074
 80022a8:	20000078 	.word	0x20000078
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <MTMR_vStartTimer>:

#include "../../../Inc/MCAL/tmr/tmr_interface.h"
#include "../../../Inc/MCAL/gpio/gpio_interface.h"

void 	 MTMR_vStartTimer(EN_MTMR_number_t copy_uddtTMRNumber)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
	switch(copy_uddtTMRNumber)
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d829      	bhi.n	8002314 <MTMR_vStartTimer+0x64>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <MTMR_vStartTimer+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022d9 	.word	0x080022d9
 80022cc:	080022eb 	.word	0x080022eb
 80022d0:	080022f9 	.word	0x080022f9
 80022d4:	08002307 	.word	0x08002307
	{
	case MTMR2:
		SET_BIT(MTMR2_PERIPHERAL -> MTMRx_CR1, CEN_BIT); break;
 80022d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e015      	b.n	8002316 <MTMR_vStartTimer+0x66>
	case MTMR3:
		SET_BIT(MTMR3_PERIPHERAL -> MTMRx_CR1, CEN_BIT); break;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MTMR_vStartTimer+0x74>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <MTMR_vStartTimer+0x74>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e00e      	b.n	8002316 <MTMR_vStartTimer+0x66>
	case MTMR4:
		SET_BIT(MTMR4_PERIPHERAL -> MTMRx_CR1, CEN_BIT); break;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <MTMR_vStartTimer+0x78>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <MTMR_vStartTimer+0x78>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	e007      	b.n	8002316 <MTMR_vStartTimer+0x66>
	case MTMR5:
		SET_BIT(MTMR5_PERIPHERAL -> MTMRx_CR1, CEN_BIT); break;
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <MTMR_vStartTimer+0x7c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <MTMR_vStartTimer+0x7c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e000      	b.n	8002316 <MTMR_vStartTimer+0x66>

	default:                               break;
 8002314:	bf00      	nop
	}
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	40000c00 	.word	0x40000c00

08002330 <MTMR_vSetTimerPrescaler>:
	}
}


void 	 MTMR_vSetTimerPrescaler(EN_MTMR_number_t copy_uddtTMRNumber, uint16_t copy_u16Value)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	460a      	mov	r2, r1
 800233a:	71fb      	strb	r3, [r7, #7]
 800233c:	4613      	mov	r3, r2
 800233e:	80bb      	strh	r3, [r7, #4]
	switch(copy_uddtTMRNumber)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d83d      	bhi.n	80023c2 <MTMR_vSetTimerPrescaler+0x92>
 8002346:	a201      	add	r2, pc, #4	; (adr r2, 800234c <MTMR_vSetTimerPrescaler+0x1c>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	0800235d 	.word	0x0800235d
 8002350:	0800237b 	.word	0x0800237b
 8002354:	08002393 	.word	0x08002393
 8002358:	080023ab 	.word	0x080023ab
	{
	case MTMR2:
		CLR_ALL_BITS(MTMR2_PERIPHERAL -> MTMRx_PSC);
 800235c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002360:	2200      	movs	r2, #0
 8002362:	629a      	str	r2, [r3, #40]	; 0x28
		MTMR2_PERIPHERAL -> MTMRx_PSC |= copy_u16Value - 1;
 8002364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	88ba      	ldrh	r2, [r7, #4]
 800236c:	3a01      	subs	r2, #1
 800236e:	4611      	mov	r1, r2
 8002370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002374:	430b      	orrs	r3, r1
 8002376:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8002378:	e024      	b.n	80023c4 <MTMR_vSetTimerPrescaler+0x94>
	case MTMR3:
		CLR_ALL_BITS(MTMR3_PERIPHERAL -> MTMRx_PSC);
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <MTMR_vSetTimerPrescaler+0xa0>)
 800237c:	2200      	movs	r2, #0
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
		MTMR3_PERIPHERAL -> MTMRx_PSC |= copy_u16Value - 1;
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <MTMR_vSetTimerPrescaler+0xa0>)
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	88ba      	ldrh	r2, [r7, #4]
 8002386:	3a01      	subs	r2, #1
 8002388:	4611      	mov	r1, r2
 800238a:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <MTMR_vSetTimerPrescaler+0xa0>)
 800238c:	430b      	orrs	r3, r1
 800238e:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8002390:	e018      	b.n	80023c4 <MTMR_vSetTimerPrescaler+0x94>
	case MTMR4:
		CLR_ALL_BITS(MTMR4_PERIPHERAL -> MTMRx_PSC);
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <MTMR_vSetTimerPrescaler+0xa4>)
 8002394:	2200      	movs	r2, #0
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
		MTMR4_PERIPHERAL -> MTMRx_PSC |= copy_u16Value - 1;
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MTMR_vSetTimerPrescaler+0xa4>)
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	88ba      	ldrh	r2, [r7, #4]
 800239e:	3a01      	subs	r2, #1
 80023a0:	4611      	mov	r1, r2
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <MTMR_vSetTimerPrescaler+0xa4>)
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 80023a8:	e00c      	b.n	80023c4 <MTMR_vSetTimerPrescaler+0x94>
	case MTMR5:
		CLR_ALL_BITS(MTMR5_PERIPHERAL -> MTMRx_PSC);
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MTMR_vSetTimerPrescaler+0xa8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
		MTMR5_PERIPHERAL -> MTMRx_PSC |= copy_u16Value - 1;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MTMR_vSetTimerPrescaler+0xa8>)
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	88ba      	ldrh	r2, [r7, #4]
 80023b6:	3a01      	subs	r2, #1
 80023b8:	4611      	mov	r1, r2
 80023ba:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <MTMR_vSetTimerPrescaler+0xa8>)
 80023bc:	430b      	orrs	r3, r1
 80023be:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 80023c0:	e000      	b.n	80023c4 <MTMR_vSetTimerPrescaler+0x94>
	default:                               break;
 80023c2:	bf00      	nop
	}
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40000c00 	.word	0x40000c00

080023dc <MTMR_vSetTimerChannelOutput>:
}



void 	 MTMR_vSetTimerChannelOutput(EN_MTMR_number_t copy_uddtTMRNumber, EN_MTMR_selectedMode_t copy_uddtTimerMode, EN_MTMR_channel_t copy_uddtChannelNumber)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
 80023e6:	460b      	mov	r3, r1
 80023e8:	71bb      	strb	r3, [r7, #6]
 80023ea:	4613      	mov	r3, r2
 80023ec:	717b      	strb	r3, [r7, #5]
	switch(copy_uddtTMRNumber)
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <MTMR_vSetTimerChannelOutput+0x1e>
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d047      	beq.n	8002488 <MTMR_vSetTimerChannelOutput+0xac>
				case MTMR_CH3: break;
				case MTMR_CH4: break;
			}
		}

		default:                               break;
 80023f8:	e06f      	b.n	80024da <MTMR_vSetTimerChannelOutput+0xfe>
			switch(copy_uddtChannelNumber)
 80023fa:	797b      	ldrb	r3, [r7, #5]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d869      	bhi.n	80024d6 <MTMR_vSetTimerChannelOutput+0xfa>
 8002402:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <MTMR_vSetTimerChannelOutput+0x2c>)
 8002404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002408:	08002419 	.word	0x08002419
 800240c:	08002485 	.word	0x08002485
 8002410:	0800244f 	.word	0x0800244f
 8002414:	08002485 	.word	0x08002485
					CLR_BITS(MTMR2_PERIPHERAL -> MTMRx_CCMR1, 0x00000073);
 8002418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002422:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002426:	6193      	str	r3, [r2, #24]
					MTMR2_PERIPHERAL -> MTMRx_CCMR1 |= (copy_uddtTimerMode << OC1M_SHIFT);
 8002428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	79ba      	ldrb	r2, [r7, #6]
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	4611      	mov	r1, r2
 8002434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002438:	430b      	orrs	r3, r1
 800243a:	6193      	str	r3, [r2, #24]
					SET_BIT(MTMR2_PERIPHERAL -> MTMRx_CCER, CC1EN_BIT);
 800243c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
					break;
 800244c:	e01b      	b.n	8002486 <MTMR_vSetTimerChannelOutput+0xaa>
					CLR_BITS(MTMR2_PERIPHERAL -> MTMRx_CCMR2, 0x00000073);
 800244e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002458:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800245c:	61d3      	str	r3, [r2, #28]
					MTMR2_PERIPHERAL -> MTMRx_CCMR2 |= (copy_uddtTimerMode << OC1M_SHIFT);
 800245e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	79ba      	ldrb	r2, [r7, #6]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	4611      	mov	r1, r2
 800246a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800246e:	430b      	orrs	r3, r1
 8002470:	61d3      	str	r3, [r2, #28]
					SET_BIT(MTMR2_PERIPHERAL -> MTMRx_CCER, 8);
 8002472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6213      	str	r3, [r2, #32]
					break;
 8002482:	e000      	b.n	8002486 <MTMR_vSetTimerChannelOutput+0xaa>
				case MTMR_CH2:	break;
 8002484:	bf00      	nop
			break;
 8002486:	e026      	b.n	80024d6 <MTMR_vSetTimerChannelOutput+0xfa>
			switch(copy_uddtChannelNumber)
 8002488:	797b      	ldrb	r3, [r7, #5]
 800248a:	3b01      	subs	r3, #1
 800248c:	2b03      	cmp	r3, #3
 800248e:	d824      	bhi.n	80024da <MTMR_vSetTimerChannelOutput+0xfe>
 8002490:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <MTMR_vSetTimerChannelOutput+0xbc>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	080024a9 	.word	0x080024a9
 800249c:	080024d3 	.word	0x080024d3
 80024a0:	080024d3 	.word	0x080024d3
 80024a4:	080024d3 	.word	0x080024d3
					CLR_BITS(MTMR3_PERIPHERAL -> MTMRx_CCMR1, 0x00000073);
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <MTMR_vSetTimerChannelOutput+0x10c>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <MTMR_vSetTimerChannelOutput+0x10c>)
 80024ae:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80024b2:	6193      	str	r3, [r2, #24]
					MTMR3_PERIPHERAL -> MTMRx_CCMR1 |= (copy_uddtTimerMode << OC1M_SHIFT);
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MTMR_vSetTimerChannelOutput+0x10c>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	79ba      	ldrb	r2, [r7, #6]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	4611      	mov	r1, r2
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <MTMR_vSetTimerChannelOutput+0x10c>)
 80024c0:	430b      	orrs	r3, r1
 80024c2:	6193      	str	r3, [r2, #24]
					SET_BIT(MTMR3_PERIPHERAL -> MTMRx_CCER, CC1EN_BIT);
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <MTMR_vSetTimerChannelOutput+0x10c>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <MTMR_vSetTimerChannelOutput+0x10c>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
					break;
 80024d0:	e000      	b.n	80024d4 <MTMR_vSetTimerChannelOutput+0xf8>
				case MTMR_CH2: break;
 80024d2:	bf00      	nop
		default:                               break;
 80024d4:	e001      	b.n	80024da <MTMR_vSetTimerChannelOutput+0xfe>
			break;
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <MTMR_vSetTimerChannelOutput+0x100>
		default:                               break;
 80024da:	bf00      	nop
	}
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40000400 	.word	0x40000400

080024ec <MTMR_vSetTimerCMPVal>:

void 	 MTMR_vSetTimerCMPVal(EN_MTMR_number_t copy_uddtTMRNumber, EN_MTMR_channel_t copy_uddtChannelNumber, uint32_t copy_u32CmpValue)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	603a      	str	r2, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	460b      	mov	r3, r1
 80024fa:	71bb      	strb	r3, [r7, #6]
	switch(copy_uddtTMRNumber)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <MTMR_vSetTimerCMPVal+0x1c>
 8002502:	2b01      	cmp	r3, #1
 8002504:	d025      	beq.n	8002552 <MTMR_vSetTimerCMPVal+0x66>
					break;
				}
			break;
		}

		default:                               break;
 8002506:	e047      	b.n	8002598 <MTMR_vSetTimerCMPVal+0xac>
				switch(copy_uddtChannelNumber)
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	3b01      	subs	r3, #1
 800250c:	2b03      	cmp	r3, #3
 800250e:	d840      	bhi.n	8002592 <MTMR_vSetTimerCMPVal+0xa6>
 8002510:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <MTMR_vSetTimerCMPVal+0x2c>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	08002529 	.word	0x08002529
 800251c:	08002533 	.word	0x08002533
 8002520:	0800253d 	.word	0x0800253d
 8002524:	08002547 	.word	0x08002547
					MTMR2_PERIPHERAL -> MTMRx_CCR1 = copy_u32CmpValue;
 8002528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6353      	str	r3, [r2, #52]	; 0x34
					break;
 8002530:	e00e      	b.n	8002550 <MTMR_vSetTimerCMPVal+0x64>
					MTMR2_PERIPHERAL -> MTMRx_CCR2 = copy_u32CmpValue;
 8002532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6393      	str	r3, [r2, #56]	; 0x38
					break;
 800253a:	e009      	b.n	8002550 <MTMR_vSetTimerCMPVal+0x64>
					MTMR2_PERIPHERAL -> MTMRx_CCR3 = copy_u32CmpValue;
 800253c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	63d3      	str	r3, [r2, #60]	; 0x3c
					break;
 8002544:	e004      	b.n	8002550 <MTMR_vSetTimerCMPVal+0x64>
					MTMR2_PERIPHERAL -> MTMRx_CCR4 = copy_u32CmpValue;
 8002546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
					break;
 800254e:	bf00      	nop
			break;
 8002550:	e01f      	b.n	8002592 <MTMR_vSetTimerCMPVal+0xa6>
				switch(copy_uddtChannelNumber)
 8002552:	79bb      	ldrb	r3, [r7, #6]
 8002554:	3b01      	subs	r3, #1
 8002556:	2b03      	cmp	r3, #3
 8002558:	d81d      	bhi.n	8002596 <MTMR_vSetTimerCMPVal+0xaa>
 800255a:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <MTMR_vSetTimerCMPVal+0x74>)
 800255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002560:	08002571 	.word	0x08002571
 8002564:	08002579 	.word	0x08002579
 8002568:	08002581 	.word	0x08002581
 800256c:	08002589 	.word	0x08002589
					MTMR3_PERIPHERAL -> MTMRx_CCR1 = copy_u32CmpValue;
 8002570:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <MTMR_vSetTimerCMPVal+0xb8>)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6353      	str	r3, [r2, #52]	; 0x34
					break;
 8002576:	e00b      	b.n	8002590 <MTMR_vSetTimerCMPVal+0xa4>
					MTMR3_PERIPHERAL -> MTMRx_CCR2 = copy_u32CmpValue;
 8002578:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <MTMR_vSetTimerCMPVal+0xb8>)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6393      	str	r3, [r2, #56]	; 0x38
					break;
 800257e:	e007      	b.n	8002590 <MTMR_vSetTimerCMPVal+0xa4>
					MTMR3_PERIPHERAL -> MTMRx_CCR3 = copy_u32CmpValue;
 8002580:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <MTMR_vSetTimerCMPVal+0xb8>)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	63d3      	str	r3, [r2, #60]	; 0x3c
					break;
 8002586:	e003      	b.n	8002590 <MTMR_vSetTimerCMPVal+0xa4>
					MTMR3_PERIPHERAL -> MTMRx_CCR4 = copy_u32CmpValue;
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <MTMR_vSetTimerCMPVal+0xb8>)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
					break;
 800258e:	bf00      	nop
			break;
 8002590:	e001      	b.n	8002596 <MTMR_vSetTimerCMPVal+0xaa>
			break;
 8002592:	bf00      	nop
 8002594:	e000      	b.n	8002598 <MTMR_vSetTimerCMPVal+0xac>
			break;
 8002596:	bf00      	nop
	}
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40000400 	.word	0x40000400

080025a8 <MTMR_vSetTimerARR>:




void 	 MTMR_vSetTimerARR(EN_MTMR_number_t copy_uddtTMRNumber, uint32_t copy_u32Value)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
	switch(copy_uddtTMRNumber)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d00f      	beq.n	80025da <MTMR_vSetTimerARR+0x32>
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	dc11      	bgt.n	80025e2 <MTMR_vSetTimerARR+0x3a>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <MTMR_vSetTimerARR+0x20>
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d005      	beq.n	80025d2 <MTMR_vSetTimerARR+0x2a>
		MTMR3_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
		break;
	case MTMR5:
		MTMR5_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
		break;
	default:                               break;
 80025c6:	e00c      	b.n	80025e2 <MTMR_vSetTimerARR+0x3a>
		MTMR2_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
 80025c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80025d0:	e008      	b.n	80025e4 <MTMR_vSetTimerARR+0x3c>
		MTMR3_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <MTMR_vSetTimerARR+0x48>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80025d8:	e004      	b.n	80025e4 <MTMR_vSetTimerARR+0x3c>
		MTMR5_PERIPHERAL -> MTMRx_ARR = copy_u32Value;
 80025da:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <MTMR_vSetTimerARR+0x4c>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80025e0:	e000      	b.n	80025e4 <MTMR_vSetTimerARR+0x3c>
	default:                               break;
 80025e2:	bf00      	nop
	}
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000c00 	.word	0x40000c00

080025f8 <HLIDAR_controlSpeed>:
//}



void HLIDAR_controlSpeed(uint8_t copy_u8Speed)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	ST_MGPIO_altPinCfg_t lo_altPwmPinA6 = {MGPIOA_PERIPHERAL,MGPIO_PIN6,MGPIO_ALTFN_2,
 8002602:	4a16      	ldr	r2, [pc, #88]	; (800265c <HLIDAR_controlSpeed+0x64>)
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	ca07      	ldmia	r2, {r0, r1, r2}
 800260a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			MGPIO_OUTPUT_RESISTOR_PUSH_PULL,MGPIO_OUTPUT_SPEED_MEDIUM,MGPIO_PULL_FLOATING};
	MGPIO_uddtInitAltPin(&lo_altPwmPinA6);
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fc85 	bl	8001f22 <MGPIO_uddtInitAltPin>

	/* speed init */
	MTMR_vSetTimerPrescaler(MTMR3, 64);
 8002618:	2140      	movs	r1, #64	; 0x40
 800261a:	2001      	movs	r0, #1
 800261c:	f7ff fe88 	bl	8002330 <MTMR_vSetTimerPrescaler>
	MTMR_vSetTimerARR(MTMR3, 10000 - 1);
 8002620:	f242 710f 	movw	r1, #9999	; 0x270f
 8002624:	2001      	movs	r0, #1
 8002626:	f7ff ffbf 	bl	80025a8 <MTMR_vSetTimerARR>
	MTMR_vSetTimerChannelOutput(MTMR3, MTMR_MODE_PWM_MODE1, MTMR_CH1);
 800262a:	2201      	movs	r2, #1
 800262c:	2106      	movs	r1, #6
 800262e:	2001      	movs	r0, #1
 8002630:	f7ff fed4 	bl	80023dc <MTMR_vSetTimerChannelOutput>

	uint32_t counter = 100 * copy_u8Speed;
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	2264      	movs	r2, #100	; 0x64
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
	MTMR_vSetTimerCMPVal(MTMR3, MTMR_CH1, counter - 1);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3b01      	subs	r3, #1
 8002642:	461a      	mov	r2, r3
 8002644:	2101      	movs	r1, #1
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff ff50 	bl	80024ec <MTMR_vSetTimerCMPVal>
	MTMR_vStartTimer(MTMR3);
 800264c:	2001      	movs	r0, #1
 800264e:	f7ff fe2f 	bl	80022b0 <MTMR_vStartTimer>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	08003350 	.word	0x08003350

08002660 <MUSART_uddtInit>:
static void (*MUSART1_CallBack)(void) = PTR_NULL;
static void (*MUSART2_CallBack)(void) = PTR_NULL;
static void (*MUSART6_CallBack)(void) = PTR_NULL;

EN_MUSART_systeamState_t MUSART_uddtInit(ST_MUART_RegistersMap_t *PS_USARTx , ST_MUSART_cfg_t const *PS_uddtUartCfg)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
	if(PS_uddtUartCfg != PTR_NULL && PS_USARTx != PTR_NULL)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8145 	beq.w	8002900 <MUSART_uddtInit+0x2a0>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8141 	beq.w	8002900 <MUSART_uddtInit+0x2a0>
	{
		switch (PS_uddtUartCfg->copy_uddtSamplingModeOption)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	785b      	ldrb	r3, [r3, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <MUSART_uddtInit+0x2c>
 8002686:	2b01      	cmp	r3, #1
 8002688:	d072      	beq.n	8002770 <MUSART_uddtInit+0x110>
 800268a:	e0e1      	b.n	8002850 <MUSART_uddtInit+0x1f0>
		{
			case MUSART_SAMPLING_BY_16 : PS_USARTx->MUSART_BRR = UART_BRR_SAMPLING16(__PCLK__,PS_uddtUartCfg->copy_uddtBuadRateOption); break;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd fee3 	bl	800045c <__aeabi_ui2d>
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	4b9f      	ldr	r3, [pc, #636]	; (8002918 <MUSART_uddtInit+0x2b8>)
 800269c:	f7fd ff58 	bl	8000550 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	a19a      	add	r1, pc, #616	; (adr r1, 8002910 <MUSART_uddtInit+0x2b0>)
 80026a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026aa:	f7fe f87b 	bl	80007a4 <__aeabi_ddiv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe f95d 	bl	8000974 <__aeabi_d2uiz>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a97      	ldr	r2, [pc, #604]	; (800291c <MUSART_uddtInit+0x2bc>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	011c      	lsls	r4, r3, #4
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd fec6 	bl	800045c <__aeabi_ui2d>
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	4b90      	ldr	r3, [pc, #576]	; (8002918 <MUSART_uddtInit+0x2b8>)
 80026d6:	f7fd ff3b 	bl	8000550 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	a18c      	add	r1, pc, #560	; (adr r1, 8002910 <MUSART_uddtInit+0x2b0>)
 80026e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026e4:	f7fe f85e 	bl	80007a4 <__aeabi_ddiv>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	f7fe f940 	bl	8000974 <__aeabi_d2uiz>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b89      	ldr	r3, [pc, #548]	; (800291c <MUSART_uddtInit+0x2bc>)
 80026f8:	fba3 1302 	umull	r1, r3, r3, r2
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	2164      	movs	r1, #100	; 0x64
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	3332      	adds	r3, #50	; 0x32
 800270a:	4a84      	ldr	r2, [pc, #528]	; (800291c <MUSART_uddtInit+0x2bc>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002716:	441c      	add	r4, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd fe9d 	bl	800045c <__aeabi_ui2d>
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	4b7c      	ldr	r3, [pc, #496]	; (8002918 <MUSART_uddtInit+0x2b8>)
 8002728:	f7fd ff12 	bl	8000550 <__aeabi_dmul>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	a177      	add	r1, pc, #476	; (adr r1, 8002910 <MUSART_uddtInit+0x2b0>)
 8002732:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002736:	f7fe f835 	bl	80007a4 <__aeabi_ddiv>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f7fe f917 	bl	8000974 <__aeabi_d2uiz>
 8002746:	4602      	mov	r2, r0
 8002748:	4b74      	ldr	r3, [pc, #464]	; (800291c <MUSART_uddtInit+0x2bc>)
 800274a:	fba3 1302 	umull	r1, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2164      	movs	r1, #100	; 0x64
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	3332      	adds	r3, #50	; 0x32
 800275c:	4a6f      	ldr	r2, [pc, #444]	; (800291c <MUSART_uddtInit+0x2bc>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	18e2      	adds	r2, r4, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	e06f      	b.n	8002850 <MUSART_uddtInit+0x1f0>
			case MUSART_SAMPLING_BY_8  : PS_USARTx->MUSART_BRR = UART_BRR_SAMPLING8(__PCLK__,PS_uddtUartCfg->copy_uddtBuadRateOption); break;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fe71 	bl	800045c <__aeabi_ui2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	f7fd fd31 	bl	80001e4 <__adddf3>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	a162      	add	r1, pc, #392	; (adr r1, 8002910 <MUSART_uddtInit+0x2b0>)
 8002788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800278c:	f7fe f80a 	bl	80007a4 <__aeabi_ddiv>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7fe f8ec 	bl	8000974 <__aeabi_d2uiz>
 800279c:	4603      	mov	r3, r0
 800279e:	4a5f      	ldr	r2, [pc, #380]	; (800291c <MUSART_uddtInit+0x2bc>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	011c      	lsls	r4, r3, #4
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fe55 	bl	800045c <__aeabi_ui2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	f7fd fd15 	bl	80001e4 <__adddf3>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	a154      	add	r1, pc, #336	; (adr r1, 8002910 <MUSART_uddtInit+0x2b0>)
 80027c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027c4:	f7fd ffee 	bl	80007a4 <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe f8d0 	bl	8000974 <__aeabi_d2uiz>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <MUSART_uddtInit+0x2bc>)
 80027d8:	fba3 1302 	umull	r1, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	2164      	movs	r1, #100	; 0x64
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	3332      	adds	r3, #50	; 0x32
 80027ea:	4a4c      	ldr	r2, [pc, #304]	; (800291c <MUSART_uddtInit+0x2bc>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027f8:	441c      	add	r4, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fe2c 	bl	800045c <__aeabi_ui2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	f7fd fcec 	bl	80001e4 <__adddf3>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	a13f      	add	r1, pc, #252	; (adr r1, 8002910 <MUSART_uddtInit+0x2b0>)
 8002812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002816:	f7fd ffc5 	bl	80007a4 <__aeabi_ddiv>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f7fe f8a7 	bl	8000974 <__aeabi_d2uiz>
 8002826:	4602      	mov	r2, r0
 8002828:	4b3c      	ldr	r3, [pc, #240]	; (800291c <MUSART_uddtInit+0x2bc>)
 800282a:	fba3 1302 	umull	r1, r3, r3, r2
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2164      	movs	r1, #100	; 0x64
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	3332      	adds	r3, #50	; 0x32
 800283c:	4a37      	ldr	r2, [pc, #220]	; (800291c <MUSART_uddtInit+0x2bc>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	18e2      	adds	r2, r4, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	bf00      	nop
		}

		PS_USARTx->MUSART_CR1 =  (PS_uddtUartCfg->copy_uddtSamplingModeOption << MUSART_CR1_OVER8_BIT)  |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	785b      	ldrb	r3, [r3, #1]
 8002854:	03da      	lsls	r2, r3, #15
					      	  	 (PS_uddtUartCfg->copy_HardwareFlowControl<<MUSART_CR1_UE_BIT)          |
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	7b1b      	ldrb	r3, [r3, #12]
 800285a:	035b      	lsls	r3, r3, #13
		PS_USARTx->MUSART_CR1 =  (PS_uddtUartCfg->copy_uddtSamplingModeOption << MUSART_CR1_OVER8_BIT)  |
 800285c:	431a      	orrs	r2, r3
								 (PS_uddtUartCfg->copy_uddtDataSizeOption <<MUSART_CR1_M_BIT)           |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7a1b      	ldrb	r3, [r3, #8]
 8002862:	031b      	lsls	r3, r3, #12
					      	  	 (PS_uddtUartCfg->copy_HardwareFlowControl<<MUSART_CR1_UE_BIT)          |
 8002864:	431a      	orrs	r2, r3
								 (PS_uddtUartCfg->copy_uddtParityControl <<MUSART_CR1_PCE_BIT)     		|
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	7a5b      	ldrb	r3, [r3, #9]
 800286a:	029b      	lsls	r3, r3, #10
								 (PS_uddtUartCfg->copy_uddtDataSizeOption <<MUSART_CR1_M_BIT)           |
 800286c:	431a      	orrs	r2, r3
								 (PS_uddtUartCfg->copy_uddtParitySelection <<MUSART_CR1_PS_BIT)    		;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	7a9b      	ldrb	r3, [r3, #10]
 8002872:	025b      	lsls	r3, r3, #9
								 (PS_uddtUartCfg->copy_uddtParityControl <<MUSART_CR1_PCE_BIT)     		|
 8002874:	4313      	orrs	r3, r2
 8002876:	461a      	mov	r2, r3
		PS_USARTx->MUSART_CR1 =  (PS_uddtUartCfg->copy_uddtSamplingModeOption << MUSART_CR1_OVER8_BIT)  |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	60da      	str	r2, [r3, #12]

		switch (PS_uddtUartCfg->copy_uddtTransferDirection)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d014      	beq.n	80028ae <MUSART_uddtInit+0x24e>
 8002884:	2b02      	cmp	r3, #2
 8002886:	dc1f      	bgt.n	80028c8 <MUSART_uddtInit+0x268>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <MUSART_uddtInit+0x232>
 800288c:	2b01      	cmp	r3, #1
 800288e:	d007      	beq.n	80028a0 <MUSART_uddtInit+0x240>
 8002890:	e01a      	b.n	80028c8 <MUSART_uddtInit+0x268>
		{
			case MUSART_TX_ONLY:   SET_BIT(PS_USARTx->MUSART_CR1, MUSART_CR1_TE_BIT); break;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f043 0208 	orr.w	r2, r3, #8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	e013      	b.n	80028c8 <MUSART_uddtInit+0x268>
			case MUSART_RX_ONLY:   SET_BIT(PS_USARTx->MUSART_CR1, MUSART_CR1_RE_BIT); break;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	e00c      	b.n	80028c8 <MUSART_uddtInit+0x268>
			case MUSART_TX_RX  :   SET_BIT(PS_USARTx->MUSART_CR1, MUSART_CR1_TE_BIT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f043 0208 	orr.w	r2, r3, #8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	60da      	str	r2, [r3, #12]
						  	  	   SET_BIT(PS_USARTx->MUSART_CR1, MUSART_CR1_RE_BIT); break;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	bf00      	nop
		}
		PS_USARTx->MUSART_CR2 = (PS_uddtUartCfg->copy_uddtStopBitSelection<<MUSART_CR2_STOP_BIT)				  |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	7adb      	ldrb	r3, [r3, #11]
 80028cc:	031a      	lsls	r2, r3, #12
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockOutput <<MUSART_CR2_CLKEN_BIT)       |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	7b5b      	ldrb	r3, [r3, #13]
 80028d2:	02db      	lsls	r3, r3, #11
		PS_USARTx->MUSART_CR2 = (PS_uddtUartCfg->copy_uddtStopBitSelection<<MUSART_CR2_STOP_BIT)				  |
 80028d4:	431a      	orrs	r2, r3
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockPhase <<MUSART_CR2_CPHA_BIT)         |
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	7bdb      	ldrb	r3, [r3, #15]
 80028da:	025b      	lsls	r3, r3, #9
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockOutput <<MUSART_CR2_CLKEN_BIT)       |
 80028dc:	431a      	orrs	r2, r3
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockPolarity <<MUSART_CR2_CPOL_BIT)      |
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	7b9b      	ldrb	r3, [r3, #14]
 80028e2:	029b      	lsls	r3, r3, #10
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockPhase <<MUSART_CR2_CPHA_BIT)         |
 80028e4:	431a      	orrs	r2, r3
								(PS_uddtUartCfg->copy_uddtUartClockInit.lastBitClockPulse <<MUSART_CR2_LBCL_BIT)  ;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	7c1b      	ldrb	r3, [r3, #16]
 80028ea:	021b      	lsls	r3, r3, #8
								(PS_uddtUartCfg->copy_uddtUartClockInit.clockPolarity <<MUSART_CR2_CPOL_BIT)      |
 80028ec:	4313      	orrs	r3, r2
 80028ee:	461a      	mov	r2, r3
		PS_USARTx->MUSART_CR2 = (PS_uddtUartCfg->copy_uddtStopBitSelection<<MUSART_CR2_STOP_BIT)				  |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]

		PS_USARTx->MUSART_SR = 0																                  ;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]

		ret = MUSART_OK;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e001      	b.n	8002904 <MUSART_uddtInit+0x2a4>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 8002900:	2302      	movs	r3, #2
 8002902:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bd90      	pop	{r4, r7, pc}
 800290e:	bf00      	nop
 8002910:	00000000 	.word	0x00000000
 8002914:	41a7d784 	.word	0x41a7d784
 8002918:	40100000 	.word	0x40100000
 800291c:	51eb851f 	.word	0x51eb851f

08002920 <MUSART_uddtEnable>:



EN_MUSART_systeamState_t MUSART_uddtEnable(ST_MUART_RegistersMap_t *PS_USARTx)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]

	if(PS_USARTx != PTR_NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <MUSART_uddtEnable+0x24>
	{
		SET_BIT(PS_USARTx->MUSART_CR1,MUSART_CR1_UE_BIT);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60da      	str	r2, [r3, #12]
		ret = MUSART_OK;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	e001      	b.n	8002948 <MUSART_uddtEnable+0x28>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 8002944:	2302      	movs	r3, #2
 8002946:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <MUSART_uddtTransmitByte>:

	return ret;
}

EN_MUSART_systeamState_t MUSART_uddtTransmitByte(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t copy_u8ByteToSend)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	70fb      	strb	r3, [r7, #3]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]

	if(PS_USARTx != PTR_NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d019      	beq.n	80029a0 <MUSART_uddtTransmitByte+0x4a>
	{
		while (GET_BIT(PS_USARTx->MUSART_SR,MUSART_SR_TXE_BIT)==0);
 800296c:	bf00      	nop
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f9      	beq.n	800296e <MUSART_uddtTransmitByte+0x18>
		PS_USARTx->MUSART_DR = copy_u8ByteToSend;
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	605a      	str	r2, [r3, #4]
		while (GET_BIT(PS_USARTx->MUSART_SR,MUSART_SR_TC_BIT)==0);
 8002980:	bf00      	nop
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f9      	beq.n	8002982 <MUSART_uddtTransmitByte+0x2c>
		CLR_BIT(PS_USARTx->MUSART_SR,MUSART_SR_TC_BIT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]
		ret = MUSART_OK;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	e001      	b.n	80029a4 <MUSART_uddtTransmitByte+0x4e>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 80029a0:	2302      	movs	r3, #2
 80029a2:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <MUSART_uddtTransmitString>:

EN_MUSART_systeamState_t MUSART_uddtTransmitString(ST_MUART_RegistersMap_t *PS_USARTx , uint8_t *copy_u8StringToSend)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]

	if(PS_USARTx != PTR_NULL && copy_u8StringToSend != PTR_NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <MUSART_uddtTransmitString+0x48>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d016      	beq.n	80029fa <MUSART_uddtTransmitString+0x48>
	{
		uint32_t loc_u32Iterator = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
		while (copy_u8StringToSend[loc_u32Iterator] != STR_NULL)
 80029d0:	e00a      	b.n	80029e8 <MUSART_uddtTransmitString+0x36>
		{
			MUSART_uddtTransmitByte(PS_USARTx, copy_u8StringToSend[loc_u32Iterator]);
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ffba 	bl	8002956 <MUSART_uddtTransmitByte>
			loc_u32Iterator++;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3301      	adds	r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
		while (copy_u8StringToSend[loc_u32Iterator] != STR_NULL)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ee      	bne.n	80029d2 <MUSART_uddtTransmitString+0x20>
		}
		ret = MUSART_OK;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
	{
 80029f8:	e001      	b.n	80029fe <MUSART_uddtTransmitString+0x4c>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 80029fa:	2302      	movs	r3, #2
 80029fc:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <MUSART_RxIntSetStatus>:
	return ret;
}


EN_MUSART_systeamState_t MUSART_RxIntSetStatus(ST_MUART_RegistersMap_t *PS_USARTx, uint8_t copy_u8Status)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	70fb      	strb	r3, [r7, #3]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]

	if(PS_USARTx != PTR_NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d015      	beq.n	8002a4a <MUSART_RxIntSetStatus+0x42>
	{
		switch (copy_u8Status)
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <MUSART_RxIntSetStatus+0x2e>
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10d      	bne.n	8002a44 <MUSART_RxIntSetStatus+0x3c>
		{
			case MUSART_ENABLE:  SET_BIT(PS_USARTx->MUSART_CR1 ,(MUSART_CR1_RXNEIE_BIT)); break;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
 8002a34:	e006      	b.n	8002a44 <MUSART_RxIntSetStatus+0x3c>
			case MUSART_DISABLE: CLR_BIT(PS_USARTx->MUSART_CR1 ,(MUSART_CR1_RXNEIE_BIT)); break;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 0220 	bic.w	r2, r3, #32
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	bf00      	nop
		}
		ret = MUSART_OK;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e001      	b.n	8002a4e <MUSART_RxIntSetStatus+0x46>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <MUSART1_uddtSetCallBack>:



EN_MUSART_systeamState_t MUSART1_uddtSetCallBack( void (*ptr) (void) )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]

	if(ptr != PTR_NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <MUSART1_uddtSetCallBack+0x1e>
	{
		MUSART1_CallBack = ptr ;
 8002a6e:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <MUSART1_uddtSetCallBack+0x30>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6013      	str	r3, [r2, #0]
		ret = MUSART_OK;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	e001      	b.n	8002a7e <MUSART1_uddtSetCallBack+0x22>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	2000007c 	.word	0x2000007c

08002a90 <MUSART2_uddtSetCallBack>:

EN_MUSART_systeamState_t MUSART2_uddtSetCallBack( void (*ptr) (void) )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	EN_MUSART_systeamState_t ret = MUSART_NOK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

	if(ptr != PTR_NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <MUSART2_uddtSetCallBack+0x1e>
	{
		MUSART2_CallBack = ptr ;
 8002aa2:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <MUSART2_uddtSetCallBack+0x30>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6013      	str	r3, [r2, #0]
		ret = MUSART_OK;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e001      	b.n	8002ab2 <MUSART2_uddtSetCallBack+0x22>
	}
	else
	{
		ret = MUSART_PTR_NULL;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;}
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	20000080 	.word	0x20000080

08002ac4 <USART1_IRQHandler>:
	return ret;
}


void USART1_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	MUART1_PERIPHERAL -> MUSART_SR = 0 ;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <USART1_IRQHandler+0x14>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 8002ace:	4b03      	ldr	r3, [pc, #12]	; (8002adc <USART1_IRQHandler+0x18>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4798      	blx	r3
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40011000 	.word	0x40011000
 8002adc:	2000007c 	.word	0x2000007c

08002ae0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	MUART2_PERIPHERAL -> MUSART_SR = 0 ;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <USART2_IRQHandler+0x14>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
	MUSART2_CallBack();
 8002aea:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <USART2_IRQHandler+0x18>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4798      	blx	r3
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40004400 	.word	0x40004400
 8002af8:	20000080 	.word	0x20000080

08002afc <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	MUART6_PERIPHERAL -> MUSART_SR = 0 ;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <USART6_IRQHandler+0x14>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
	MUSART6_CallBack();
 8002b06:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <USART6_IRQHandler+0x18>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4798      	blx	r3
}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40011400 	.word	0x40011400
 8002b14:	20000084 	.word	0x20000084

08002b18 <main>:
 */



void main(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	ABCM_vSysInit();
 8002b1c:	f7fe f928 	bl	8000d70 <ABCM_vSysInit>
	ABCM_vSysMangment();
 8002b20:	f7fe f9ba 	bl	8000e98 <ABCM_vSysMangment>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b30:	480c      	ldr	r0, [pc, #48]	; (8002b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b32:	490d      	ldr	r1, [pc, #52]	; (8002b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b34:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <LoopForever+0xe>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b48:	4c0a      	ldr	r4, [pc, #40]	; (8002b74 <LoopForever+0x16>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b56:	f000 f811 	bl	8002b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b5a:	f7ff ffdd 	bl	8002b18 <main>

08002b5e <LoopForever>:

LoopForever:
  b LoopForever
 8002b5e:	e7fe      	b.n	8002b5e <LoopForever>
  ldr   r0, =_estack
 8002b60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b68:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002b6c:	08003364 	.word	0x08003364
  ldr r2, =_sbss
 8002b70:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002b74:	20000088 	.word	0x20000088

08002b78 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b78:	e7fe      	b.n	8002b78 <ADC_IRQHandler>
	...

08002b7c <__libc_init_array>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	4d0d      	ldr	r5, [pc, #52]	; (8002bb4 <__libc_init_array+0x38>)
 8002b80:	4c0d      	ldr	r4, [pc, #52]	; (8002bb8 <__libc_init_array+0x3c>)
 8002b82:	1b64      	subs	r4, r4, r5
 8002b84:	10a4      	asrs	r4, r4, #2
 8002b86:	2600      	movs	r6, #0
 8002b88:	42a6      	cmp	r6, r4
 8002b8a:	d109      	bne.n	8002ba0 <__libc_init_array+0x24>
 8002b8c:	4d0b      	ldr	r5, [pc, #44]	; (8002bbc <__libc_init_array+0x40>)
 8002b8e:	4c0c      	ldr	r4, [pc, #48]	; (8002bc0 <__libc_init_array+0x44>)
 8002b90:	f000 f826 	bl	8002be0 <_init>
 8002b94:	1b64      	subs	r4, r4, r5
 8002b96:	10a4      	asrs	r4, r4, #2
 8002b98:	2600      	movs	r6, #0
 8002b9a:	42a6      	cmp	r6, r4
 8002b9c:	d105      	bne.n	8002baa <__libc_init_array+0x2e>
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba4:	4798      	blx	r3
 8002ba6:	3601      	adds	r6, #1
 8002ba8:	e7ee      	b.n	8002b88 <__libc_init_array+0xc>
 8002baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bae:	4798      	blx	r3
 8002bb0:	3601      	adds	r6, #1
 8002bb2:	e7f2      	b.n	8002b9a <__libc_init_array+0x1e>
 8002bb4:	0800335c 	.word	0x0800335c
 8002bb8:	0800335c 	.word	0x0800335c
 8002bbc:	0800335c 	.word	0x0800335c
 8002bc0:	08003360 	.word	0x08003360

08002bc4 <memcpy>:
 8002bc4:	440a      	add	r2, r1
 8002bc6:	4291      	cmp	r1, r2
 8002bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bcc:	d100      	bne.n	8002bd0 <memcpy+0xc>
 8002bce:	4770      	bx	lr
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bda:	4291      	cmp	r1, r2
 8002bdc:	d1f9      	bne.n	8002bd2 <memcpy+0xe>
 8002bde:	bd10      	pop	{r4, pc}

08002be0 <_init>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr

08002bec <_fini>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr
